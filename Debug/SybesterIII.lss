
SybesterIII.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000061c  00804000  0000875a  000087ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000875a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ea8  0080461c  0080461c  00008e0a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00008e0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008e68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008a8  00000000  00000000  00008ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015272  00000000  00000000  00009750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b95  00000000  00000000  0001e9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006c75  00000000  00000000  00023557  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c88  00000000  00000000  0002a1cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004923  00000000  00000000  0002be54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009835  00000000  00000000  00030777  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000748  00000000  00000000  00039fac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__ctors_end>
       4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
       8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
       c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      10:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      14:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      18:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      1c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      20:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      24:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      28:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      2c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      30:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      34:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      38:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      3c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      40:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      44:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      48:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      4c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      50:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      54:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      58:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      5c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      60:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      64:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      68:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      6c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      70:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      74:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      78:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      7c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      80:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      84:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      88:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      8c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      90:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      94:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      98:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      9c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      a0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      a4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      a8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      ac:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      b0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      b4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      b8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      bc:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      c0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      c4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      c8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      cc:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      d0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      d4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      d8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      dc:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      e0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      e4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
      e8:	e7 2d       	mov	r30, r7
      ea:	e7 2d       	mov	r30, r7
      ec:	e7 2d       	mov	r30, r7
      ee:	ed 2d       	mov	r30, r13
      f0:	ed 2d       	mov	r30, r13
      f2:	ed 2d       	mov	r30, r13
      f4:	f4 2d       	mov	r31, r4
      f6:	f4 2d       	mov	r31, r4
      f8:	f4 2d       	mov	r31, r4
      fa:	fb 2d       	mov	r31, r11
      fc:	fe 2d       	mov	r31, r14
      fe:	fe 2d       	mov	r31, r14
     100:	38 32       	cpi	r19, 0x28	; 40
     102:	80 32       	cpi	r24, 0x20	; 32
     104:	3a 32       	cpi	r19, 0x2A	; 42
     106:	3c 32       	cpi	r19, 0x2C	; 44
     108:	3e 32       	cpi	r19, 0x2E	; 46
     10a:	40 32       	cpi	r20, 0x20	; 32
     10c:	42 32       	cpi	r20, 0x22	; 34
     10e:	44 32       	cpi	r20, 0x24	; 36
     110:	46 32       	cpi	r20, 0x26	; 38
     112:	48 32       	cpi	r20, 0x28	; 40
     114:	7e 32       	cpi	r23, 0x2E	; 46
     116:	7e 32       	cpi	r23, 0x2E	; 46
     118:	7e 32       	cpi	r23, 0x2E	; 46
     11a:	7e 32       	cpi	r23, 0x2E	; 46
     11c:	7e 32       	cpi	r23, 0x2E	; 46
     11e:	7e 32       	cpi	r23, 0x2E	; 46
     120:	7e 32       	cpi	r23, 0x2E	; 46
     122:	7e 32       	cpi	r23, 0x2E	; 46
     124:	7e 32       	cpi	r23, 0x2E	; 46
     126:	7e 32       	cpi	r23, 0x2E	; 46
     128:	7e 32       	cpi	r23, 0x2E	; 46
     12a:	7e 32       	cpi	r23, 0x2E	; 46
     12c:	7e 32       	cpi	r23, 0x2E	; 46
     12e:	7e 32       	cpi	r23, 0x2E	; 46
     130:	7e 32       	cpi	r23, 0x2E	; 46
     132:	7e 32       	cpi	r23, 0x2E	; 46
     134:	7e 32       	cpi	r23, 0x2E	; 46
     136:	7e 32       	cpi	r23, 0x2E	; 46
     138:	7e 32       	cpi	r23, 0x2E	; 46
     13a:	7e 32       	cpi	r23, 0x2E	; 46
     13c:	7e 32       	cpi	r23, 0x2E	; 46
     13e:	7e 32       	cpi	r23, 0x2E	; 46
     140:	7e 32       	cpi	r23, 0x2E	; 46
     142:	7e 32       	cpi	r23, 0x2E	; 46
     144:	7e 32       	cpi	r23, 0x2E	; 46
     146:	7e 32       	cpi	r23, 0x2E	; 46
     148:	7e 32       	cpi	r23, 0x2E	; 46
     14a:	7e 32       	cpi	r23, 0x2E	; 46
     14c:	7e 32       	cpi	r23, 0x2E	; 46
     14e:	7e 32       	cpi	r23, 0x2E	; 46
     150:	7e 32       	cpi	r23, 0x2E	; 46
     152:	7e 32       	cpi	r23, 0x2E	; 46
     154:	7e 32       	cpi	r23, 0x2E	; 46
     156:	7e 32       	cpi	r23, 0x2E	; 46
     158:	7e 32       	cpi	r23, 0x2E	; 46
     15a:	7e 32       	cpi	r23, 0x2E	; 46
     15c:	7e 32       	cpi	r23, 0x2E	; 46
     15e:	7e 32       	cpi	r23, 0x2E	; 46
     160:	7e 32       	cpi	r23, 0x2E	; 46
     162:	4a 32       	cpi	r20, 0x2A	; 42
     164:	4c 32       	cpi	r20, 0x2C	; 44
     166:	4e 32       	cpi	r20, 0x2E	; 46
     168:	50 32       	cpi	r21, 0x20	; 32
     16a:	52 32       	cpi	r21, 0x22	; 34
     16c:	54 32       	cpi	r21, 0x24	; 36
     16e:	56 32       	cpi	r21, 0x26	; 38
     170:	58 32       	cpi	r21, 0x28	; 40
     172:	5a 32       	cpi	r21, 0x2A	; 42
     174:	5c 32       	cpi	r21, 0x2C	; 44
     176:	5e 32       	cpi	r21, 0x2E	; 46
     178:	60 32       	cpi	r22, 0x20	; 32
     17a:	62 32       	cpi	r22, 0x22	; 34
     17c:	64 32       	cpi	r22, 0x24	; 36
     17e:	66 32       	cpi	r22, 0x26	; 38
     180:	68 32       	cpi	r22, 0x28	; 40
     182:	6a 32       	cpi	r22, 0x2A	; 42
     184:	6c 32       	cpi	r22, 0x2C	; 44
     186:	6e 32       	cpi	r22, 0x2E	; 46
     188:	70 32       	cpi	r23, 0x20	; 32
     18a:	72 32       	cpi	r23, 0x22	; 34
     18c:	74 32       	cpi	r23, 0x24	; 36
     18e:	76 32       	cpi	r23, 0x26	; 38
     190:	78 32       	cpi	r23, 0x28	; 40
     192:	7a 32       	cpi	r23, 0x2A	; 42
     194:	7c 32       	cpi	r23, 0x2C	; 44
     196:	8b 32       	cpi	r24, 0x2B	; 43
     198:	a9 32       	cpi	r26, 0x29	; 41
     19a:	8d 32       	cpi	r24, 0x2D	; 45
     19c:	8f 32       	cpi	r24, 0x2F	; 47
     19e:	91 32       	cpi	r25, 0x21	; 33
     1a0:	93 32       	cpi	r25, 0x23	; 35
     1a2:	95 32       	cpi	r25, 0x25	; 37
     1a4:	97 32       	cpi	r25, 0x27	; 39
     1a6:	99 32       	cpi	r25, 0x29	; 41
     1a8:	9b 32       	cpi	r25, 0x2B	; 43
     1aa:	a7 32       	cpi	r26, 0x27	; 39
     1ac:	a7 32       	cpi	r26, 0x27	; 39
     1ae:	a7 32       	cpi	r26, 0x27	; 39
     1b0:	a7 32       	cpi	r26, 0x27	; 39
     1b2:	a7 32       	cpi	r26, 0x27	; 39
     1b4:	a7 32       	cpi	r26, 0x27	; 39
     1b6:	a7 32       	cpi	r26, 0x27	; 39
     1b8:	a7 32       	cpi	r26, 0x27	; 39
     1ba:	a7 32       	cpi	r26, 0x27	; 39
     1bc:	a7 32       	cpi	r26, 0x27	; 39
     1be:	a7 32       	cpi	r26, 0x27	; 39
     1c0:	a7 32       	cpi	r26, 0x27	; 39
     1c2:	a7 32       	cpi	r26, 0x27	; 39
     1c4:	a7 32       	cpi	r26, 0x27	; 39
     1c6:	a7 32       	cpi	r26, 0x27	; 39
     1c8:	a7 32       	cpi	r26, 0x27	; 39
     1ca:	a7 32       	cpi	r26, 0x27	; 39
     1cc:	a7 32       	cpi	r26, 0x27	; 39
     1ce:	a1 32       	cpi	r26, 0x21	; 33
     1d0:	a7 32       	cpi	r26, 0x27	; 39
     1d2:	a7 32       	cpi	r26, 0x27	; 39
     1d4:	a7 32       	cpi	r26, 0x27	; 39
     1d6:	a7 32       	cpi	r26, 0x27	; 39
     1d8:	a7 32       	cpi	r26, 0x27	; 39
     1da:	a7 32       	cpi	r26, 0x27	; 39
     1dc:	a7 32       	cpi	r26, 0x27	; 39
     1de:	a7 32       	cpi	r26, 0x27	; 39
     1e0:	a7 32       	cpi	r26, 0x27	; 39
     1e2:	a7 32       	cpi	r26, 0x27	; 39
     1e4:	a7 32       	cpi	r26, 0x27	; 39
     1e6:	a7 32       	cpi	r26, 0x27	; 39
     1e8:	a7 32       	cpi	r26, 0x27	; 39
     1ea:	a7 32       	cpi	r26, 0x27	; 39
     1ec:	a7 32       	cpi	r26, 0x27	; 39
     1ee:	a7 32       	cpi	r26, 0x27	; 39
     1f0:	a7 32       	cpi	r26, 0x27	; 39
     1f2:	a7 32       	cpi	r26, 0x27	; 39
     1f4:	a7 32       	cpi	r26, 0x27	; 39
     1f6:	a7 32       	cpi	r26, 0x27	; 39
     1f8:	a7 32       	cpi	r26, 0x27	; 39
     1fa:	a7 32       	cpi	r26, 0x27	; 39
     1fc:	a7 32       	cpi	r26, 0x27	; 39
     1fe:	a7 32       	cpi	r26, 0x27	; 39
     200:	a7 32       	cpi	r26, 0x27	; 39
     202:	a7 32       	cpi	r26, 0x27	; 39
     204:	a7 32       	cpi	r26, 0x27	; 39
     206:	a7 32       	cpi	r26, 0x27	; 39
     208:	a7 32       	cpi	r26, 0x27	; 39
     20a:	a7 32       	cpi	r26, 0x27	; 39
     20c:	a7 32       	cpi	r26, 0x27	; 39
     20e:	a7 32       	cpi	r26, 0x27	; 39
     210:	a7 32       	cpi	r26, 0x27	; 39
     212:	a7 32       	cpi	r26, 0x27	; 39
     214:	a7 32       	cpi	r26, 0x27	; 39
     216:	a3 32       	cpi	r26, 0x23	; 35
     218:	a7 32       	cpi	r26, 0x27	; 39
     21a:	a7 32       	cpi	r26, 0x27	; 39
     21c:	a7 32       	cpi	r26, 0x27	; 39
     21e:	a7 32       	cpi	r26, 0x27	; 39
     220:	a7 32       	cpi	r26, 0x27	; 39
     222:	a7 32       	cpi	r26, 0x27	; 39
     224:	a7 32       	cpi	r26, 0x27	; 39
     226:	a7 32       	cpi	r26, 0x27	; 39
     228:	a7 32       	cpi	r26, 0x27	; 39
     22a:	a7 32       	cpi	r26, 0x27	; 39
     22c:	a7 32       	cpi	r26, 0x27	; 39
     22e:	a7 32       	cpi	r26, 0x27	; 39
     230:	a7 32       	cpi	r26, 0x27	; 39
     232:	a7 32       	cpi	r26, 0x27	; 39
     234:	a7 32       	cpi	r26, 0x27	; 39
     236:	a7 32       	cpi	r26, 0x27	; 39
     238:	a7 32       	cpi	r26, 0x27	; 39
     23a:	a7 32       	cpi	r26, 0x27	; 39
     23c:	a7 32       	cpi	r26, 0x27	; 39
     23e:	a7 32       	cpi	r26, 0x27	; 39
     240:	a7 32       	cpi	r26, 0x27	; 39
     242:	a7 32       	cpi	r26, 0x27	; 39
     244:	a7 32       	cpi	r26, 0x27	; 39
     246:	9f 32       	cpi	r25, 0x2F	; 47
     248:	a7 32       	cpi	r26, 0x27	; 39
     24a:	a7 32       	cpi	r26, 0x27	; 39
     24c:	a7 32       	cpi	r26, 0x27	; 39
     24e:	a7 32       	cpi	r26, 0x27	; 39
     250:	a7 32       	cpi	r26, 0x27	; 39
     252:	a7 32       	cpi	r26, 0x27	; 39
     254:	a7 32       	cpi	r26, 0x27	; 39
     256:	a7 32       	cpi	r26, 0x27	; 39
     258:	a7 32       	cpi	r26, 0x27	; 39
     25a:	a7 32       	cpi	r26, 0x27	; 39
     25c:	a7 32       	cpi	r26, 0x27	; 39
     25e:	a7 32       	cpi	r26, 0x27	; 39
     260:	a7 32       	cpi	r26, 0x27	; 39
     262:	a7 32       	cpi	r26, 0x27	; 39
     264:	a7 32       	cpi	r26, 0x27	; 39
     266:	a7 32       	cpi	r26, 0x27	; 39
     268:	a7 32       	cpi	r26, 0x27	; 39
     26a:	a7 32       	cpi	r26, 0x27	; 39
     26c:	a7 32       	cpi	r26, 0x27	; 39
     26e:	a7 32       	cpi	r26, 0x27	; 39
     270:	a7 32       	cpi	r26, 0x27	; 39
     272:	a7 32       	cpi	r26, 0x27	; 39
     274:	a7 32       	cpi	r26, 0x27	; 39
     276:	a7 32       	cpi	r26, 0x27	; 39
     278:	a7 32       	cpi	r26, 0x27	; 39
     27a:	a7 32       	cpi	r26, 0x27	; 39
     27c:	a7 32       	cpi	r26, 0x27	; 39
     27e:	a7 32       	cpi	r26, 0x27	; 39
     280:	a7 32       	cpi	r26, 0x27	; 39
     282:	a7 32       	cpi	r26, 0x27	; 39
     284:	a7 32       	cpi	r26, 0x27	; 39
     286:	a7 32       	cpi	r26, 0x27	; 39
     288:	a7 32       	cpi	r26, 0x27	; 39
     28a:	a7 32       	cpi	r26, 0x27	; 39
     28c:	a7 32       	cpi	r26, 0x27	; 39
     28e:	9d 32       	cpi	r25, 0x2D	; 45
     290:	a7 32       	cpi	r26, 0x27	; 39
     292:	a7 32       	cpi	r26, 0x27	; 39
     294:	a7 32       	cpi	r26, 0x27	; 39
     296:	a5 32       	cpi	r26, 0x25	; 37
     298:	08 00       	.word	0x0008	; ????
     29a:	00 00       	nop
     29c:	be 92       	st	-X, r11
     29e:	24 49       	sbci	r18, 0x94	; 148
     2a0:	12 3e       	cpi	r17, 0xE2	; 226
     2a2:	ab aa       	std	Y+51, r10	; 0x33
     2a4:	aa 2a       	or	r10, r26
     2a6:	be cd       	rjmp	.-1156   	; 0xfffffe24 <__eeprom_end+0xff7efe24>
     2a8:	cc cc       	rjmp	.-1640   	; 0xfffffc42 <__eeprom_end+0xff7efc42>
     2aa:	4c 3e       	cpi	r20, 0xEC	; 236
     2ac:	00 00       	nop
     2ae:	00 80       	ld	r0, Z
     2b0:	be ab       	std	Y+54, r27	; 0x36
     2b2:	aa aa       	std	Y+50, r10	; 0x32
     2b4:	aa 3e       	cpi	r26, 0xEA	; 234
     2b6:	00 00       	nop
     2b8:	00 00       	nop
     2ba:	bf 00       	.word	0x00bf	; ????
     2bc:	00 00       	nop
     2be:	80 3f       	cpi	r24, 0xF0	; 240
     2c0:	00 00       	nop
     2c2:	00 00       	nop
     2c4:	00 08       	sbc	r0, r0
     2c6:	41 78       	andi	r20, 0x81	; 129
     2c8:	d3 bb       	out	0x13, r29	; 19
     2ca:	43 87       	std	Z+11, r20	; 0x0b
     2cc:	d1 13       	cpse	r29, r17
     2ce:	3d 19       	sub	r19, r13
     2d0:	0e 3c       	cpi	r16, 0xCE	; 206
     2d2:	c3 bd       	out	0x23, r28	; 35
     2d4:	42 82       	std	Z+2, r4	; 0x02
     2d6:	ad 2b       	or	r26, r29
     2d8:	3e 68       	ori	r19, 0x8E	; 142
     2da:	ec 82       	std	Y+4, r14	; 0x04
     2dc:	76 be       	out	0x36, r7	; 54
     2de:	d9 8f       	std	Y+25, r29	; 0x19
     2e0:	e1 a9       	ldd	r30, Z+49	; 0x31
     2e2:	3e 4c       	sbci	r19, 0xCE	; 206
     2e4:	80 ef       	ldi	r24, 0xF0	; 240
     2e6:	ff be       	out	0x3f, r15	; 63
     2e8:	01 c4       	rjmp	.+2050   	; 0xaec <RunAutoCalibration+0x30c>
     2ea:	ff 7f       	andi	r31, 0xFF	; 255
     2ec:	3f 00       	.word	0x003f	; ????
     2ee:	00 00       	nop
	...

000002f2 <__trampolines_end>:
     2f2:	63 64       	ori	r22, 0x43	; 67
     2f4:	69 6e       	ori	r22, 0xE9	; 233
     2f6:	6f 70       	andi	r22, 0x0F	; 15
     2f8:	73 75       	andi	r23, 0x53	; 83
     2fa:	78 58       	subi	r23, 0x88	; 136
     2fc:	5b 00       	.word	0x005b	; ????

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df e7       	ldi	r29, 0x7F	; 127
     308:	de bf       	out	0x3e, r29	; 62

0000030a <__do_copy_data>:
     30a:	16 e4       	ldi	r17, 0x46	; 70
     30c:	a0 e0       	ldi	r26, 0x00	; 0
     30e:	b0 e4       	ldi	r27, 0x40	; 64
     310:	ea e5       	ldi	r30, 0x5A	; 90
     312:	f7 e8       	ldi	r31, 0x87	; 135
     314:	00 e0       	ldi	r16, 0x00	; 0
     316:	0b bf       	out	0x3b, r16	; 59
     318:	02 c0       	rjmp	.+4      	; 0x31e <__do_copy_data+0x14>
     31a:	07 90       	elpm	r0, Z+
     31c:	0d 92       	st	X+, r0
     31e:	ac 31       	cpi	r26, 0x1C	; 28
     320:	b1 07       	cpc	r27, r17
     322:	d9 f7       	brne	.-10     	; 0x31a <__do_copy_data+0x10>

00000324 <__do_clear_bss>:
     324:	24 e5       	ldi	r18, 0x54	; 84
     326:	ac e1       	ldi	r26, 0x1C	; 28
     328:	b6 e4       	ldi	r27, 0x46	; 70
     32a:	01 c0       	rjmp	.+2      	; 0x32e <.do_clear_bss_start>

0000032c <.do_clear_bss_loop>:
     32c:	1d 92       	st	X+, r1

0000032e <.do_clear_bss_start>:
     32e:	a4 3c       	cpi	r26, 0xC4	; 196
     330:	b2 07       	cpc	r27, r18
     332:	e1 f7       	brne	.-8      	; 0x32c <.do_clear_bss_loop>
     334:	0e 94 c3 2e 	call	0x5d86	; 0x5d86 <main>
     338:	0c 94 ab 43 	jmp	0x8756	; 0x8756 <_exit>

0000033c <__bad_interrupt>:
     33c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000340 <atmel_start_init>:
     340:	0e 94 c0 33 	call	0x6780	; 0x6780 <system_init>
     344:	08 95       	ret

00000346 <BeginAutoCalibration>:

extern uint32_t Unfinished_Business;
extern uint32_t SleepTimer;

//--------------------------------------------Begin Auto Calibration Routine------------------------------------------------------
void BeginAutoCalibration(struct cal *ptr,char buffer[30]){
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	a0 97       	sbiw	r28, 0x20	; 32
     358:	cd bf       	out	0x3d, r28	; 61
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	8c 01       	movw	r16, r24
     35e:	f6 2e       	mov	r15, r22
     360:	e7 2e       	mov	r14, r23
	int TempOrResCal = 0;
     362:	19 82       	std	Y+1, r1	; 0x01
     364:	1a 82       	std	Y+2, r1	; 0x02
	char string[30];
	memset(string,0,30*sizeof(char));
     366:	fe 01       	movw	r30, r28
     368:	33 96       	adiw	r30, 0x03	; 3
     36a:	8e e1       	ldi	r24, 0x1E	; 30
     36c:	df 01       	movw	r26, r30
     36e:	1d 92       	st	X+, r1
     370:	8a 95       	dec	r24
     372:	e9 f7       	brne	.-6      	; 0x36e <BeginAutoCalibration+0x28>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     374:	85 b1       	in	r24, 0x05	; 5
     376:	80 62       	ori	r24, 0x20	; 32
     378:	85 b9       	out	0x05, r24	; 5
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
     37a:	81 b3       	in	r24, 0x11	; 17
     37c:	8b 7f       	andi	r24, 0xFB	; 251
     37e:	81 bb       	out	0x11, r24	; 17
	FT2_set_level(true);																	//Close relay and leave closed for the duration of the test
	BlueLED_set_level(false);
	ptr->StartandRunCalibration = 0;														// this is also used to suspend periodic battery information transmissions 
     380:	f8 01       	movw	r30, r16
     382:	e4 57       	subi	r30, 0x74	; 116
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	10 82       	st	Z, r1
     388:	11 82       	std	Z+1, r1	; 0x01
	ptr->Preferences = ptr->Preferences | 6;												// Set SYBT Type and Temperature to display Resistance	
     38a:	f4 97       	sbiw	r30, 0x34	; 52
     38c:	80 81       	ld	r24, Z
     38e:	91 81       	ldd	r25, Z+1	; 0x01
     390:	86 60       	ori	r24, 0x06	; 6
     392:	80 83       	st	Z, r24
     394:	91 83       	std	Z+1, r25	; 0x01
	NewSetUnfinishedBusiness(Unfinished_AutoCalRunning,&Unfinished_Business);
     396:	45 ea       	ldi	r20, 0xA5	; 165
     398:	54 e5       	ldi	r21, 0x54	; 84
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	70 e4       	ldi	r23, 0x40	; 64
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
	NewSetUnfinishedBusiness(Unfinished_Beep,&Unfinished_Business);
     3a6:	45 ea       	ldi	r20, 0xA5	; 165
     3a8:	54 e5       	ldi	r21, 0x54	; 84
     3aa:	68 e0       	ldi	r22, 0x08	; 8
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
	sscanf(buffer,"CL1X%d",&TempOrResCal);
     3b6:	ce 01       	movw	r24, r28
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	9f 93       	push	r25
     3bc:	8f 93       	push	r24
     3be:	80 e1       	ldi	r24, 0x10	; 16
     3c0:	90 e4       	ldi	r25, 0x40	; 64
     3c2:	9f 93       	push	r25
     3c4:	8f 93       	push	r24
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	SleepTimer = 0;
     3ce:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
     3d2:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
     3d6:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
     3da:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>
	ptr->Sleep_2 = 800000;
     3de:	f8 01       	movw	r30, r16
     3e0:	e2 58       	subi	r30, 0x82	; 130
     3e2:	ff 4f       	sbci	r31, 0xFF	; 255
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	95 e3       	ldi	r25, 0x35	; 53
     3e8:	ac e0       	ldi	r26, 0x0C	; 12
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	80 83       	st	Z, r24
     3ee:	91 83       	std	Z+1, r25	; 0x01
     3f0:	a2 83       	std	Z+2, r26	; 0x02
     3f2:	b3 83       	std	Z+3, r27	; 0x03
	
	if(TempOrResCal == 1){
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	91 05       	cpc	r25, r1
     408:	71 f4       	brne	.+28     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		ptr->StartandRunCalibration = 1;									// initialize resistor cal
     40a:	3e 96       	adiw	r30, 0x0e	; 14
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	80 83       	st	Z, r24
     412:	91 83       	std	Z+1, r25	; 0x01
		NewSetUnfinishedBusiness(Unfinished_AutoCalResStart,&Unfinished_Business); 	
     414:	45 ea       	ldi	r20, 0xA5	; 165
     416:	54 e5       	ldi	r21, 0x54	; 84
     418:	60 e4       	ldi	r22, 0x40	; 64
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
     424:	11 c0       	rjmp	.+34     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	}
	else if(TempOrResCal == 2){														// initialize thermistor cal
     426:	02 97       	sbiw	r24, 0x02	; 2
     428:	79 f4       	brne	.+30     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		ptr->StartandRunCalibration = 2;
     42a:	f8 01       	movw	r30, r16
     42c:	e4 57       	subi	r30, 0x74	; 116
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	80 83       	st	Z, r24
     436:	91 83       	std	Z+1, r25	; 0x01
		NewSetUnfinishedBusiness(Unfinished_AutoCalTempStart,&Unfinished_Business);
     438:	45 ea       	ldi	r20, 0xA5	; 165
     43a:	54 e5       	ldi	r21, 0x54	; 84
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	70 e1       	ldi	r23, 0x10	; 16
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
	}
}
     448:	a0 96       	adiw	r28, 0x20	; 32
     44a:	cd bf       	out	0x3d, r28	; 61
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	08 95       	ret

0000045c <EnterCalValue66>:
//--------------------------------------------Read Calibration Value for 6.6k and export to app-----------------------------------
void EnterCalValue66(struct cal *ptr){
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	6e 97       	sbiw	r28, 0x1e	; 30
     46e:	cd bf       	out	0x3d, r28	; 61
     470:	de bf       	out	0x3e, r29	; 62
     472:	8c 01       	movw	r16, r24

	char string[30];
	memset(string,0,30*sizeof(char));
     474:	fe 01       	movw	r30, r28
     476:	31 96       	adiw	r30, 0x01	; 1
     478:	8e e1       	ldi	r24, 0x1E	; 30
     47a:	df 01       	movw	r26, r30
     47c:	1d 92       	st	X+, r1
     47e:	8a 95       	dec	r24
     480:	e9 f7       	brne	.-6      	; 0x47c <EnterCalValue66+0x20>
	SleepTimer = 0;
     482:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
     486:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
     48a:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
     48e:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>
	if(ptr->StartandRunCalibration & 1)ptr->CalibrationValue66 = MeasureSYBTresistance(&resistance);								// read resistor ADC
     492:	f8 01       	movw	r30, r16
     494:	e4 57       	subi	r30, 0x74	; 116
     496:	ff 4f       	sbci	r31, 0xFF	; 255
     498:	80 81       	ld	r24, Z
     49a:	80 ff       	sbrs	r24, 0
     49c:	0a c0       	rjmp	.+20     	; 0x4b2 <EnterCalValue66+0x56>
     49e:	8e e5       	ldi	r24, 0x5E	; 94
     4a0:	94 e5       	ldi	r25, 0x54	; 84
     4a2:	0e 94 67 29 	call	0x52ce	; 0x52ce <MeasureSYBTresistance>
     4a6:	f8 01       	movw	r30, r16
     4a8:	e2 57       	subi	r30, 0x72	; 114
     4aa:	ff 4f       	sbci	r31, 0xFF	; 255
     4ac:	80 83       	st	Z, r24
     4ae:	91 83       	std	Z+1, r25	; 0x01
     4b0:	10 c0       	rjmp	.+32     	; 0x4d2 <EnterCalValue66+0x76>
	else if(ptr->StartandRunCalibration & 2)ptr->CalibrationValue66 = MeasureSYBTtemperature(true,(uint32_t*)21,0,&temperature);	// read temperature ADC. Entered arguments 21,true,0 are to satisfy the function when used as part of battery test routine
     4b2:	81 ff       	sbrs	r24, 1
     4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <EnterCalValue66+0x76>
     4b6:	21 e6       	ldi	r18, 0x61	; 97
     4b8:	33 e5       	ldi	r19, 0x53	; 83
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	65 e1       	ldi	r22, 0x15	; 21
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	0e 94 57 2a 	call	0x54ae	; 0x54ae <MeasureSYBTtemperature>
     4c8:	f8 01       	movw	r30, r16
     4ca:	e2 57       	subi	r30, 0x72	; 114
     4cc:	ff 4f       	sbci	r31, 0xFF	; 255
     4ce:	80 83       	st	Z, r24
     4d0:	91 83       	std	Z+1, r25	; 0x01
	ptr->StartandRunCalibration |= 4;						 // 
     4d2:	78 01       	movw	r14, r16
     4d4:	bc e8       	ldi	r27, 0x8C	; 140
     4d6:	eb 0e       	add	r14, r27
     4d8:	f1 1c       	adc	r15, r1
     4da:	f7 01       	movw	r30, r14
     4dc:	80 81       	ld	r24, Z
     4de:	91 81       	ldd	r25, Z+1	; 0x01
     4e0:	84 60       	ori	r24, 0x04	; 4
     4e2:	80 83       	st	Z, r24
     4e4:	91 83       	std	Z+1, r25	; 0x01
	NewSetUnfinishedBusiness(Unfinished_Beep,&Unfinished_Business);
     4e6:	45 ea       	ldi	r20, 0xA5	; 165
     4e8:	54 e5       	ldi	r21, 0x54	; 84
     4ea:	68 e0       	ldi	r22, 0x08	; 8
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
	NewClearUnfinishedBusiness(Clear_AutoCalResistance,&Unfinished_Business);
     4f6:	45 ea       	ldi	r20, 0xA5	; 165
     4f8:	54 e5       	ldi	r21, 0x54	; 84
     4fa:	60 e8       	ldi	r22, 0x80	; 128
     4fc:	77 e0       	ldi	r23, 0x07	; 7
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 02 23 	call	0x4604	; 0x4604 <NewClearUnfinishedBusiness>
	NewSetUnfinishedBusiness(Unfinished_AutoCal66,&Unfinished_Business);
     506:	45 ea       	ldi	r20, 0xA5	; 165
     508:	54 e5       	ldi	r21, 0x54	; 84
     50a:	60 e8       	ldi	r22, 0x80	; 128
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
	sprintf(string,"ENTR66,%d,%dOHM\r\n",ptr->CalibrationValue66,ptr->StartandRunCalibration);
     516:	d7 01       	movw	r26, r14
     518:	11 96       	adiw	r26, 0x01	; 1
     51a:	8c 91       	ld	r24, X
     51c:	11 97       	sbiw	r26, 0x01	; 1
     51e:	8f 93       	push	r24
     520:	8c 91       	ld	r24, X
     522:	8f 93       	push	r24
     524:	f8 01       	movw	r30, r16
     526:	e2 57       	subi	r30, 0x72	; 114
     528:	ff 4f       	sbci	r31, 0xFF	; 255
     52a:	81 81       	ldd	r24, Z+1	; 0x01
     52c:	8f 93       	push	r24
     52e:	80 81       	ld	r24, Z
     530:	8f 93       	push	r24
     532:	87 e1       	ldi	r24, 0x17	; 23
     534:	90 e4       	ldi	r25, 0x40	; 64
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	8e 01       	movw	r16, r28
     53c:	0f 5f       	subi	r16, 0xFF	; 255
     53e:	1f 4f       	sbci	r17, 0xFF	; 255
     540:	1f 93       	push	r17
     542:	0f 93       	push	r16
     544:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
	SleepTimer = 0;
     548:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
     54c:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
     550:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
     554:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>
	TransmitADcalData(string,true);
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	c8 01       	movw	r24, r16
     55c:	0e 94 7d 17 	call	0x2efa	; 0x2efa <TransmitADcalData>
	NewSetUnfinishedBusiness(Unfinished_AutoCalRetransmit,&Unfinished_Business);			//The output is buffered and retransmitted if the app doesn't respond.
     560:	45 ea       	ldi	r20, 0xA5	; 165
     562:	54 e5       	ldi	r21, 0x54	; 84
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	88 e0       	ldi	r24, 0x08	; 8
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
//	USART0_sendString(string);	
//	_delay_ms(80);
//	USART0_sendString(string);	
}
     570:	cd bf       	out	0x3d, r28	; 61
     572:	de bf       	out	0x3e, r29	; 62
     574:	6e 96       	adiw	r28, 0x1e	; 30
     576:	cd bf       	out	0x3d, r28	; 61
     578:	de bf       	out	0x3e, r29	; 62
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	08 95       	ret

00000588 <EnterCalValue20>:
	_delay_ms(80);
	USART0_sendString(string);
}
*/
//--------------------------------------------Import Calibration Value for 20k----------------------------------------------------
void EnterCalValue20(struct cal *ptr){
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	6e 97       	sbiw	r28, 0x1e	; 30
     59a:	cd bf       	out	0x3d, r28	; 61
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	8c 01       	movw	r16, r24

	char string[30];
	memset(string,0,30*sizeof(char));
     5a0:	fe 01       	movw	r30, r28
     5a2:	31 96       	adiw	r30, 0x01	; 1
     5a4:	8e e1       	ldi	r24, 0x1E	; 30
     5a6:	df 01       	movw	r26, r30
     5a8:	1d 92       	st	X+, r1
     5aa:	8a 95       	dec	r24
     5ac:	e9 f7       	brne	.-6      	; 0x5a8 <EnterCalValue20+0x20>
	SleepTimer = 0;	
     5ae:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
     5b2:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
     5b6:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
     5ba:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>
	if(ptr->StartandRunCalibration & 1)ptr->CalibrationValue20 = MeasureSYBTresistance(&resistance);								// read resistor ADC
     5be:	f8 01       	movw	r30, r16
     5c0:	e4 57       	subi	r30, 0x74	; 116
     5c2:	ff 4f       	sbci	r31, 0xFF	; 255
     5c4:	80 81       	ld	r24, Z
     5c6:	80 ff       	sbrs	r24, 0
     5c8:	0a c0       	rjmp	.+20     	; 0x5de <EnterCalValue20+0x56>
     5ca:	8e e5       	ldi	r24, 0x5E	; 94
     5cc:	94 e5       	ldi	r25, 0x54	; 84
     5ce:	0e 94 67 29 	call	0x52ce	; 0x52ce <MeasureSYBTresistance>
     5d2:	f8 01       	movw	r30, r16
     5d4:	ee 56       	subi	r30, 0x6E	; 110
     5d6:	ff 4f       	sbci	r31, 0xFF	; 255
     5d8:	80 83       	st	Z, r24
     5da:	91 83       	std	Z+1, r25	; 0x01
     5dc:	10 c0       	rjmp	.+32     	; 0x5fe <EnterCalValue20+0x76>
	else if(ptr->StartandRunCalibration & 2)ptr->CalibrationValue20 = MeasureSYBTtemperature(true,(uint32_t*)21,0,&temperature);	// read temperature ADC
     5de:	81 ff       	sbrs	r24, 1
     5e0:	0e c0       	rjmp	.+28     	; 0x5fe <EnterCalValue20+0x76>
     5e2:	21 e6       	ldi	r18, 0x61	; 97
     5e4:	33 e5       	ldi	r19, 0x53	; 83
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	65 e1       	ldi	r22, 0x15	; 21
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	0e 94 57 2a 	call	0x54ae	; 0x54ae <MeasureSYBTtemperature>
     5f4:	f8 01       	movw	r30, r16
     5f6:	ee 56       	subi	r30, 0x6E	; 110
     5f8:	ff 4f       	sbci	r31, 0xFF	; 255
     5fa:	80 83       	st	Z, r24
     5fc:	91 83       	std	Z+1, r25	; 0x01
	ptr->StartandRunCalibration |= 8;	
     5fe:	78 01       	movw	r14, r16
     600:	bc e8       	ldi	r27, 0x8C	; 140
     602:	eb 0e       	add	r14, r27
     604:	f1 1c       	adc	r15, r1
     606:	f7 01       	movw	r30, r14
     608:	80 81       	ld	r24, Z
     60a:	91 81       	ldd	r25, Z+1	; 0x01
     60c:	88 60       	ori	r24, 0x08	; 8
     60e:	80 83       	st	Z, r24
     610:	91 83       	std	Z+1, r25	; 0x01
	NewClearUnfinishedBusiness(Clear_AutoCalResistance,&Unfinished_Business);
     612:	45 ea       	ldi	r20, 0xA5	; 165
     614:	54 e5       	ldi	r21, 0x54	; 84
     616:	60 e8       	ldi	r22, 0x80	; 128
     618:	77 e0       	ldi	r23, 0x07	; 7
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 02 23 	call	0x4604	; 0x4604 <NewClearUnfinishedBusiness>
	NewSetUnfinishedBusiness(Unfinished_AutoCal20,&Unfinished_Business);
     622:	45 ea       	ldi	r20, 0xA5	; 165
     624:	54 e5       	ldi	r21, 0x54	; 84
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	72 e0       	ldi	r23, 0x02	; 2
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
	NewSetUnfinishedBusiness(Unfinished_Beep,&Unfinished_Business);
     632:	45 ea       	ldi	r20, 0xA5	; 165
     634:	54 e5       	ldi	r21, 0x54	; 84
     636:	68 e0       	ldi	r22, 0x08	; 8
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
	sprintf(string,"ENTR20,%d,%dOHM\r\n",ptr->CalibrationValue20,ptr->StartandRunCalibration);
     642:	d7 01       	movw	r26, r14
     644:	11 96       	adiw	r26, 0x01	; 1
     646:	8c 91       	ld	r24, X
     648:	11 97       	sbiw	r26, 0x01	; 1
     64a:	8f 93       	push	r24
     64c:	8c 91       	ld	r24, X
     64e:	8f 93       	push	r24
     650:	f8 01       	movw	r30, r16
     652:	ee 56       	subi	r30, 0x6E	; 110
     654:	ff 4f       	sbci	r31, 0xFF	; 255
     656:	81 81       	ldd	r24, Z+1	; 0x01
     658:	8f 93       	push	r24
     65a:	80 81       	ld	r24, Z
     65c:	8f 93       	push	r24
     65e:	89 e2       	ldi	r24, 0x29	; 41
     660:	90 e4       	ldi	r25, 0x40	; 64
     662:	9f 93       	push	r25
     664:	8f 93       	push	r24
     666:	8e 01       	movw	r16, r28
     668:	0f 5f       	subi	r16, 0xFF	; 255
     66a:	1f 4f       	sbci	r17, 0xFF	; 255
     66c:	1f 93       	push	r17
     66e:	0f 93       	push	r16
     670:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
	SleepTimer = 0;
     674:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
     678:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
     67c:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
     680:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>
	TransmitADcalData(string,true);
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	c8 01       	movw	r24, r16
     688:	0e 94 7d 17 	call	0x2efa	; 0x2efa <TransmitADcalData>
	NewSetUnfinishedBusiness(Unfinished_AutoCalRetransmit,&Unfinished_Business);			//The output is buffered and retransmitted if the app doesn't respond.
     68c:	45 ea       	ldi	r20, 0xA5	; 165
     68e:	54 e5       	ldi	r21, 0x54	; 84
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	88 e0       	ldi	r24, 0x08	; 8
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
//	USART0_sendString(string);
//	_delay_ms(80);
//	USART0_sendString(string);
}
     69c:	cd bf       	out	0x3d, r28	; 61
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	6e 96       	adiw	r28, 0x1e	; 30
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	08 95       	ret

000006b4 <EnterCalValue69>:
//--------------------------------------------Import Calibration Value for 69k----------------------------------------------------
void EnterCalValue69(struct cal *ptr){
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	6e 97       	sbiw	r28, 0x1e	; 30
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	8c 01       	movw	r16, r24

	char string[30];
	memset(string,0,30*sizeof(char));
     6cc:	fe 01       	movw	r30, r28
     6ce:	31 96       	adiw	r30, 0x01	; 1
     6d0:	8e e1       	ldi	r24, 0x1E	; 30
     6d2:	df 01       	movw	r26, r30
     6d4:	1d 92       	st	X+, r1
     6d6:	8a 95       	dec	r24
     6d8:	e9 f7       	brne	.-6      	; 0x6d4 <EnterCalValue69+0x20>
	SleepTimer = 0;
     6da:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
     6de:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
     6e2:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
     6e6:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>
	if(ptr->StartandRunCalibration & 1)ptr->CalibrationValue69 = MeasureSYBTresistance(&resistance);								// read resistor ADC
     6ea:	f8 01       	movw	r30, r16
     6ec:	e4 57       	subi	r30, 0x74	; 116
     6ee:	ff 4f       	sbci	r31, 0xFF	; 255
     6f0:	80 81       	ld	r24, Z
     6f2:	80 ff       	sbrs	r24, 0
     6f4:	0a c0       	rjmp	.+20     	; 0x70a <EnterCalValue69+0x56>
     6f6:	8e e5       	ldi	r24, 0x5E	; 94
     6f8:	94 e5       	ldi	r25, 0x54	; 84
     6fa:	0e 94 67 29 	call	0x52ce	; 0x52ce <MeasureSYBTresistance>
     6fe:	f8 01       	movw	r30, r16
     700:	ec 56       	subi	r30, 0x6C	; 108
     702:	ff 4f       	sbci	r31, 0xFF	; 255
     704:	80 83       	st	Z, r24
     706:	91 83       	std	Z+1, r25	; 0x01
     708:	10 c0       	rjmp	.+32     	; 0x72a <EnterCalValue69+0x76>
	else if(ptr->StartandRunCalibration & 2)ptr->CalibrationValue69 = MeasureSYBTtemperature(true,(uint32_t*)21,0,&temperature);	// read temperature ADC
     70a:	81 ff       	sbrs	r24, 1
     70c:	0e c0       	rjmp	.+28     	; 0x72a <EnterCalValue69+0x76>
     70e:	21 e6       	ldi	r18, 0x61	; 97
     710:	33 e5       	ldi	r19, 0x53	; 83
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	65 e1       	ldi	r22, 0x15	; 21
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	0e 94 57 2a 	call	0x54ae	; 0x54ae <MeasureSYBTtemperature>
     720:	f8 01       	movw	r30, r16
     722:	ec 56       	subi	r30, 0x6C	; 108
     724:	ff 4f       	sbci	r31, 0xFF	; 255
     726:	80 83       	st	Z, r24
     728:	91 83       	std	Z+1, r25	; 0x01
	ptr->StartandRunCalibration |= 16;
     72a:	78 01       	movw	r14, r16
     72c:	bc e8       	ldi	r27, 0x8C	; 140
     72e:	eb 0e       	add	r14, r27
     730:	f1 1c       	adc	r15, r1
     732:	f7 01       	movw	r30, r14
     734:	80 81       	ld	r24, Z
     736:	91 81       	ldd	r25, Z+1	; 0x01
     738:	80 61       	ori	r24, 0x10	; 16
     73a:	80 83       	st	Z, r24
     73c:	91 83       	std	Z+1, r25	; 0x01
	NewClearUnfinishedBusiness(Clear_AutoCalResistance,&Unfinished_Business);
     73e:	45 ea       	ldi	r20, 0xA5	; 165
     740:	54 e5       	ldi	r21, 0x54	; 84
     742:	60 e8       	ldi	r22, 0x80	; 128
     744:	77 e0       	ldi	r23, 0x07	; 7
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 02 23 	call	0x4604	; 0x4604 <NewClearUnfinishedBusiness>
	NewSetUnfinishedBusiness(Unfinished_AutoCal69,&Unfinished_Business);
     74e:	45 ea       	ldi	r20, 0xA5	; 165
     750:	54 e5       	ldi	r21, 0x54	; 84
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	74 e0       	ldi	r23, 0x04	; 4
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
	NewSetUnfinishedBusiness(Unfinished_Beep,&Unfinished_Business);
     75e:	45 ea       	ldi	r20, 0xA5	; 165
     760:	54 e5       	ldi	r21, 0x54	; 84
     762:	68 e0       	ldi	r22, 0x08	; 8
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
	sprintf(string,"ENTR69,%d,%dOHM\r\n",ptr->CalibrationValue69,ptr->StartandRunCalibration);
     76e:	d7 01       	movw	r26, r14
     770:	11 96       	adiw	r26, 0x01	; 1
     772:	8c 91       	ld	r24, X
     774:	11 97       	sbiw	r26, 0x01	; 1
     776:	8f 93       	push	r24
     778:	8c 91       	ld	r24, X
     77a:	8f 93       	push	r24
     77c:	f8 01       	movw	r30, r16
     77e:	ec 56       	subi	r30, 0x6C	; 108
     780:	ff 4f       	sbci	r31, 0xFF	; 255
     782:	81 81       	ldd	r24, Z+1	; 0x01
     784:	8f 93       	push	r24
     786:	80 81       	ld	r24, Z
     788:	8f 93       	push	r24
     78a:	8b e3       	ldi	r24, 0x3B	; 59
     78c:	90 e4       	ldi	r25, 0x40	; 64
     78e:	9f 93       	push	r25
     790:	8f 93       	push	r24
     792:	8e 01       	movw	r16, r28
     794:	0f 5f       	subi	r16, 0xFF	; 255
     796:	1f 4f       	sbci	r17, 0xFF	; 255
     798:	1f 93       	push	r17
     79a:	0f 93       	push	r16
     79c:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
	SleepTimer = 0;
     7a0:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
     7a4:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
     7a8:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
     7ac:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>
	TransmitADcalData(string,true);
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	c8 01       	movw	r24, r16
     7b4:	0e 94 7d 17 	call	0x2efa	; 0x2efa <TransmitADcalData>
	NewSetUnfinishedBusiness(Unfinished_AutoCalRetransmit,&Unfinished_Business);			//The output is buffered and retransmitted if the app doesn't respond.
     7b8:	45 ea       	ldi	r20, 0xA5	; 165
     7ba:	54 e5       	ldi	r21, 0x54	; 84
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	88 e0       	ldi	r24, 0x08	; 8
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
//	USART0_sendString(string);
//	_delay_ms(80);
//	USART0_sendString(string);
}
     7c8:	cd bf       	out	0x3d, r28	; 61
     7ca:	de bf       	out	0x3e, r29	; 62
     7cc:	6e 96       	adiw	r28, 0x1e	; 30
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	08 95       	ret

000007e0 <RunAutoCalibration>:
//--------------------------------------------Run Auto Calibration Routine--------------------------------------------------------
void RunAutoCalibration(struct cal *ptr){
     7e0:	2f 92       	push	r2
     7e2:	3f 92       	push	r3
     7e4:	4f 92       	push	r4
     7e6:	5f 92       	push	r5
     7e8:	6f 92       	push	r6
     7ea:	7f 92       	push	r7
     7ec:	8f 92       	push	r8
     7ee:	9f 92       	push	r9
     7f0:	af 92       	push	r10
     7f2:	bf 92       	push	r11
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	c2 55       	subi	r28, 0x52	; 82
     80a:	d1 09       	sbc	r29, r1
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	de bf       	out	0x3e, r29	; 62
     810:	8c 01       	movw	r16, r24
	float CalA = 1500;
	float CalB = 800;
	register int CalAiterations = 0;
	register int CalBiterations = 0;
	char string[70];
	memset(string,0,70*sizeof(char));	
     812:	fe 01       	movw	r30, r28
     814:	31 96       	adiw	r30, 0x01	; 1
     816:	86 e4       	ldi	r24, 0x46	; 70
     818:	df 01       	movw	r26, r30
     81a:	1d 92       	st	X+, r1
     81c:	8a 95       	dec	r24
     81e:	e9 f7       	brne	.-6      	; 0x81a <RunAutoCalibration+0x3a>
	register float ResultFor20;
	register float ResultFor66;
	register float ResultFor69;
	float CalA = 1500;
	float CalB = 800;
	register int CalAiterations = 0;
     820:	41 2c       	mov	r4, r1
     822:	51 2c       	mov	r5, r1
	float CalACorrectionStart;
	float CalBCorrectionStart;
	register float ResultFor20;
	register float ResultFor66;
	register float ResultFor69;
	float CalA = 1500;
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e8       	ldi	r25, 0x80	; 128
     828:	ab eb       	ldi	r26, 0xBB	; 187
     82a:	b4 e4       	ldi	r27, 0x44	; 68
     82c:	2f 96       	adiw	r28, 0x0f	; 15
     82e:	8c af       	std	Y+60, r24	; 0x3c
     830:	9d af       	std	Y+61, r25	; 0x3d
     832:	ae af       	std	Y+62, r26	; 0x3e
     834:	bf af       	std	Y+63, r27	; 0x3f
     836:	2f 97       	sbiw	r28, 0x0f	; 15
//	USART0_sendString(string);
}
//--------------------------------------------Run Auto Calibration Routine--------------------------------------------------------
void RunAutoCalibration(struct cal *ptr){
		
	float CalACorrection = 8;
     838:	60 96       	adiw	r28, 0x10	; 16
     83a:	1f ae       	std	Y+63, r1	; 0x3f
     83c:	60 97       	sbiw	r28, 0x10	; 16
     83e:	61 96       	adiw	r28, 0x11	; 17
     840:	1f ae       	std	Y+63, r1	; 0x3f
     842:	61 97       	sbiw	r28, 0x11	; 17
     844:	62 96       	adiw	r28, 0x12	; 18
     846:	1f ae       	std	Y+63, r1	; 0x3f
     848:	62 97       	sbiw	r28, 0x12	; 18
     84a:	91 e4       	ldi	r25, 0x41	; 65
     84c:	63 96       	adiw	r28, 0x13	; 19
     84e:	9f af       	std	Y+63, r25	; 0x3f
     850:	63 97       	sbiw	r28, 0x13	; 19
     852:	0f 2e       	mov	r0, r31
     854:	c1 2c       	mov	r12, r1
     856:	f0 e8       	ldi	r31, 0x80	; 128
     858:	df 2e       	mov	r13, r31
     85a:	fb eb       	ldi	r31, 0xBB	; 187
     85c:	ef 2e       	mov	r14, r31
     85e:	f4 e4       	ldi	r31, 0x44	; 68
     860:	ff 2e       	mov	r15, r31
     862:	f0 2d       	mov	r31, r0
     864:	b1 2c       	mov	r11, r1
     866:	a1 2c       	mov	r10, r1
     868:	91 2c       	mov	r9, r1
     86a:	0f 2e       	mov	r0, r31
     86c:	f1 e4       	ldi	r31, 0x41	; 65
     86e:	8f 2e       	mov	r8, r31
     870:	f0 2d       	mov	r31, r0
//	CalACorrectionStart = (((float)ptr->CalibrationValue20*CalA)/2000 + (float)ptr->CalibrationValue20)/(((float)ptr->CalibrationValue66*CalA)/660 + (float)ptr->CalibrationValue66)-1;
//	CalBCorrectionStart = (2000*(CalB - (float)ptr->CalibrationValue20)/(float)ptr->CalibrationValue20)/(660*(CalB - (float)ptr->CalibrationValue66)/(float)ptr->CalibrationValue66)-1;
	CalACorrectionStart = (((float)cal.CalibrationValue69*CalA)/6890 + (float)cal.CalibrationValue69)/(((float)cal.CalibrationValue66*CalA)/660 + (float)cal.CalibrationValue66)-1;
	CalBCorrectionStart = (6890*(CalB - (float)cal.CalibrationValue69)/(float)cal.CalibrationValue69)/(660*(CalB - (float)cal.CalibrationValue66)/(float)cal.CalibrationValue66)-1;

	while(!((CalACorrection <= 1.001)&&(CalACorrection >= 0.999))){
     872:	87 c0       	rjmp	.+270    	; 0x982 <RunAutoCalibration+0x1a2>
//	while(!((CalACorrection <= 1.00001)&&(CalACorrection >= 0.99999))){
		ResultFor69 = (((float)ptr->CalibrationValue69*CalA)/6890 + (float)ptr->CalibrationValue69);
     874:	f8 01       	movw	r30, r16
     876:	ec 56       	subi	r30, 0x6C	; 108
     878:	ff 4f       	sbci	r31, 0xFF	; 255
     87a:	60 81       	ld	r22, Z
     87c:	71 81       	ldd	r23, Z+1	; 0x01
     87e:	07 2e       	mov	r0, r23
     880:	00 0c       	add	r0, r0
     882:	88 0b       	sbc	r24, r24
     884:	99 0b       	sbc	r25, r25
     886:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
     88a:	2b 96       	adiw	r28, 0x0b	; 11
     88c:	6c af       	std	Y+60, r22	; 0x3c
     88e:	7d af       	std	Y+61, r23	; 0x3d
     890:	8e af       	std	Y+62, r24	; 0x3e
     892:	9f af       	std	Y+63, r25	; 0x3f
     894:	2b 97       	sbiw	r28, 0x0b	; 11
     896:	9b 01       	movw	r18, r22
     898:	ac 01       	movw	r20, r24
     89a:	c7 01       	movw	r24, r14
     89c:	b6 01       	movw	r22, r12
     89e:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e5       	ldi	r19, 0x50	; 80
     8a6:	47 ed       	ldi	r20, 0xD7	; 215
     8a8:	55 e4       	ldi	r21, 0x45	; 69
     8aa:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
     8ae:	9b 01       	movw	r18, r22
     8b0:	ac 01       	movw	r20, r24
     8b2:	2b 96       	adiw	r28, 0x0b	; 11
     8b4:	6c ad       	ldd	r22, Y+60	; 0x3c
     8b6:	7d ad       	ldd	r23, Y+61	; 0x3d
     8b8:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ba:	9f ad       	ldd	r25, Y+63	; 0x3f
     8bc:	2b 97       	sbiw	r28, 0x0b	; 11
     8be:	0e 94 bd 39 	call	0x737a	; 0x737a <__addsf3>
     8c2:	2f 96       	adiw	r28, 0x0f	; 15
     8c4:	6c af       	std	Y+60, r22	; 0x3c
     8c6:	7d af       	std	Y+61, r23	; 0x3d
     8c8:	8e af       	std	Y+62, r24	; 0x3e
     8ca:	9f af       	std	Y+63, r25	; 0x3f
     8cc:	2f 97       	sbiw	r28, 0x0f	; 15
//		ResultFor20 = (((float)ptr->CalibrationValue20*CalA)/2000 + (float)ptr->CalibrationValue20);
		ResultFor66 = (((float)ptr->CalibrationValue66*CalA)/660 + (float)ptr->CalibrationValue66);
     8ce:	f8 01       	movw	r30, r16
     8d0:	e2 57       	subi	r30, 0x72	; 114
     8d2:	ff 4f       	sbci	r31, 0xFF	; 255
     8d4:	60 81       	ld	r22, Z
     8d6:	71 81       	ldd	r23, Z+1	; 0x01
     8d8:	07 2e       	mov	r0, r23
     8da:	00 0c       	add	r0, r0
     8dc:	88 0b       	sbc	r24, r24
     8de:	99 0b       	sbc	r25, r25
     8e0:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
     8e4:	2b 96       	adiw	r28, 0x0b	; 11
     8e6:	6c af       	std	Y+60, r22	; 0x3c
     8e8:	7d af       	std	Y+61, r23	; 0x3d
     8ea:	8e af       	std	Y+62, r24	; 0x3e
     8ec:	9f af       	std	Y+63, r25	; 0x3f
     8ee:	2b 97       	sbiw	r28, 0x0b	; 11
     8f0:	9b 01       	movw	r18, r22
     8f2:	ac 01       	movw	r20, r24
     8f4:	c7 01       	movw	r24, r14
     8f6:	b6 01       	movw	r22, r12
     8f8:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	45 e2       	ldi	r20, 0x25	; 37
     902:	54 e4       	ldi	r21, 0x44	; 68
     904:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
     908:	9b 01       	movw	r18, r22
     90a:	ac 01       	movw	r20, r24
     90c:	2b 96       	adiw	r28, 0x0b	; 11
     90e:	6c ad       	ldd	r22, Y+60	; 0x3c
     910:	7d ad       	ldd	r23, Y+61	; 0x3d
     912:	8e ad       	ldd	r24, Y+62	; 0x3e
     914:	9f ad       	ldd	r25, Y+63	; 0x3f
     916:	2b 97       	sbiw	r28, 0x0b	; 11
     918:	0e 94 bd 39 	call	0x737a	; 0x737a <__addsf3>
     91c:	2b 96       	adiw	r28, 0x0b	; 11
     91e:	6c af       	std	Y+60, r22	; 0x3c
     920:	7d af       	std	Y+61, r23	; 0x3d
     922:	8e af       	std	Y+62, r24	; 0x3e
     924:	9f af       	std	Y+63, r25	; 0x3f
     926:	2b 97       	sbiw	r28, 0x0b	; 11
		if(ResultFor66 == 0);   //skip to next increment
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	a9 01       	movw	r20, r18
     92e:	0e 94 29 3a 	call	0x7452	; 0x7452 <__cmpsf2>
     932:	88 23       	and	r24, r24
     934:	91 f0       	breq	.+36     	; 0x95a <RunAutoCalibration+0x17a>
		else CalACorrection = ResultFor69/ResultFor66;
     936:	2b 96       	adiw	r28, 0x0b	; 11
     938:	2c ad       	ldd	r18, Y+60	; 0x3c
     93a:	3d ad       	ldd	r19, Y+61	; 0x3d
     93c:	4e ad       	ldd	r20, Y+62	; 0x3e
     93e:	5f ad       	ldd	r21, Y+63	; 0x3f
     940:	2b 97       	sbiw	r28, 0x0b	; 11
     942:	2f 96       	adiw	r28, 0x0f	; 15
     944:	6c ad       	ldd	r22, Y+60	; 0x3c
     946:	7d ad       	ldd	r23, Y+61	; 0x3d
     948:	8e ad       	ldd	r24, Y+62	; 0x3e
     94a:	9f ad       	ldd	r25, Y+63	; 0x3f
     94c:	2f 97       	sbiw	r28, 0x0f	; 15
     94e:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
     952:	b6 2e       	mov	r11, r22
     954:	a7 2e       	mov	r10, r23
     956:	98 2e       	mov	r9, r24
     958:	89 2e       	mov	r8, r25
		CalA = CalA +0.2;
     95a:	2d ec       	ldi	r18, 0xCD	; 205
     95c:	3c ec       	ldi	r19, 0xCC	; 204
     95e:	4c e4       	ldi	r20, 0x4C	; 76
     960:	5e e3       	ldi	r21, 0x3E	; 62
     962:	c7 01       	movw	r24, r14
     964:	b6 01       	movw	r22, r12
     966:	0e 94 bd 39 	call	0x737a	; 0x737a <__addsf3>
     96a:	6b 01       	movw	r12, r22
     96c:	7c 01       	movw	r14, r24
		CalAiterations++;
     96e:	af ef       	ldi	r26, 0xFF	; 255
     970:	4a 1a       	sub	r4, r26
     972:	5a 0a       	sbc	r5, r26
		wdt_reset();
     974:	a8 95       	wdr
		if(CalAiterations > 16000)break;
     976:	b1 e8       	ldi	r27, 0x81	; 129
     978:	4b 16       	cp	r4, r27
     97a:	be e3       	ldi	r27, 0x3E	; 62
     97c:	5b 06       	cpc	r5, r27
     97e:	0c f0       	brlt	.+2      	; 0x982 <RunAutoCalibration+0x1a2>
     980:	8f c0       	rjmp	.+286    	; 0xaa0 <RunAutoCalibration+0x2c0>
//	CalACorrectionStart = (((float)ptr->CalibrationValue20*CalA)/2000 + (float)ptr->CalibrationValue20)/(((float)ptr->CalibrationValue66*CalA)/660 + (float)ptr->CalibrationValue66)-1;
//	CalBCorrectionStart = (2000*(CalB - (float)ptr->CalibrationValue20)/(float)ptr->CalibrationValue20)/(660*(CalB - (float)ptr->CalibrationValue66)/(float)ptr->CalibrationValue66)-1;
	CalACorrectionStart = (((float)cal.CalibrationValue69*CalA)/6890 + (float)cal.CalibrationValue69)/(((float)cal.CalibrationValue66*CalA)/660 + (float)cal.CalibrationValue66)-1;
	CalBCorrectionStart = (6890*(CalB - (float)cal.CalibrationValue69)/(float)cal.CalibrationValue69)/(660*(CalB - (float)cal.CalibrationValue66)/(float)cal.CalibrationValue66)-1;

	while(!((CalACorrection <= 1.001)&&(CalACorrection >= 0.999))){
     982:	25 ec       	ldi	r18, 0xC5	; 197
     984:	30 e2       	ldi	r19, 0x20	; 32
     986:	40 e8       	ldi	r20, 0x80	; 128
     988:	5f e3       	ldi	r21, 0x3F	; 63
     98a:	6b 2d       	mov	r22, r11
     98c:	7a 2d       	mov	r23, r10
     98e:	89 2d       	mov	r24, r9
     990:	98 2d       	mov	r25, r8
     992:	0e 94 29 3a 	call	0x7452	; 0x7452 <__cmpsf2>
     996:	18 16       	cp	r1, r24
     998:	0c f4       	brge	.+2      	; 0x99c <RunAutoCalibration+0x1bc>
     99a:	6c cf       	rjmp	.-296    	; 0x874 <RunAutoCalibration+0x94>
     99c:	27 e7       	ldi	r18, 0x77	; 119
     99e:	3e eb       	ldi	r19, 0xBE	; 190
     9a0:	4f e7       	ldi	r20, 0x7F	; 127
     9a2:	5f e3       	ldi	r21, 0x3F	; 63
     9a4:	6b 2d       	mov	r22, r11
     9a6:	7a 2d       	mov	r23, r10
     9a8:	89 2d       	mov	r24, r9
     9aa:	98 2d       	mov	r25, r8
     9ac:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <__gesf2>
     9b0:	88 23       	and	r24, r24
     9b2:	0c f4       	brge	.+2      	; 0x9b6 <RunAutoCalibration+0x1d6>
     9b4:	5f cf       	rjmp	.-322    	; 0x874 <RunAutoCalibration+0x94>
     9b6:	2f 96       	adiw	r28, 0x0f	; 15
     9b8:	cc ae       	std	Y+60, r12	; 0x3c
     9ba:	dd ae       	std	Y+61, r13	; 0x3d
     9bc:	ee ae       	std	Y+62, r14	; 0x3e
     9be:	ff ae       	std	Y+63, r15	; 0x3f
     9c0:	2f 97       	sbiw	r28, 0x0f	; 15
     9c2:	60 96       	adiw	r28, 0x10	; 16
     9c4:	bf ae       	std	Y+63, r11	; 0x3f
     9c6:	60 97       	sbiw	r28, 0x10	; 16
     9c8:	61 96       	adiw	r28, 0x11	; 17
     9ca:	af ae       	std	Y+63, r10	; 0x3f
     9cc:	61 97       	sbiw	r28, 0x11	; 17
     9ce:	62 96       	adiw	r28, 0x12	; 18
     9d0:	9f ae       	std	Y+63, r9	; 0x3f
     9d2:	62 97       	sbiw	r28, 0x12	; 18
     9d4:	63 96       	adiw	r28, 0x13	; 19
     9d6:	8f ae       	std	Y+63, r8	; 0x3f
     9d8:	63 97       	sbiw	r28, 0x13	; 19
     9da:	74 c0       	rjmp	.+232    	; 0xac4 <RunAutoCalibration+0x2e4>
		
	}
	
	while(!((CalBCorrection <= 1.001)&&(CalBCorrection >= 0.999))){		
//	while(!((CalBCorrection <= 1.0001)&&(CalBCorrection >= 0.9999))){
		ResultFor69 = (6890*(CalB - (float)ptr->CalibrationValue69)/(float)ptr->CalibrationValue69);
     9dc:	f8 01       	movw	r30, r16
     9de:	ec 56       	subi	r30, 0x6C	; 108
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	60 81       	ld	r22, Z
     9e4:	71 81       	ldd	r23, Z+1	; 0x01
     9e6:	07 2e       	mov	r0, r23
     9e8:	00 0c       	add	r0, r0
     9ea:	88 0b       	sbc	r24, r24
     9ec:	99 0b       	sbc	r25, r25
     9ee:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
     9f2:	4b 01       	movw	r8, r22
     9f4:	5c 01       	movw	r10, r24
     9f6:	9b 01       	movw	r18, r22
     9f8:	ac 01       	movw	r20, r24
     9fa:	c7 01       	movw	r24, r14
     9fc:	b6 01       	movw	r22, r12
     9fe:	0e 94 bc 39 	call	0x7378	; 0x7378 <__subsf3>
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e5       	ldi	r19, 0x50	; 80
     a06:	47 ed       	ldi	r20, 0xD7	; 215
     a08:	55 e4       	ldi	r21, 0x45	; 69
     a0a:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
     a0e:	a5 01       	movw	r20, r10
     a10:	94 01       	movw	r18, r8
     a12:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
     a16:	2b 96       	adiw	r28, 0x0b	; 11
     a18:	6c af       	std	Y+60, r22	; 0x3c
     a1a:	7d af       	std	Y+61, r23	; 0x3d
     a1c:	8e af       	std	Y+62, r24	; 0x3e
     a1e:	9f af       	std	Y+63, r25	; 0x3f
     a20:	2b 97       	sbiw	r28, 0x0b	; 11
//		ResultFor20 = (2000*(CalB - (float)ptr->CalibrationValue20)/(float)ptr->CalibrationValue20);
		ResultFor66 = (660*(CalB - (float)ptr->CalibrationValue66)/(float)ptr->CalibrationValue66);
     a22:	f8 01       	movw	r30, r16
     a24:	e2 57       	subi	r30, 0x72	; 114
     a26:	ff 4f       	sbci	r31, 0xFF	; 255
     a28:	60 81       	ld	r22, Z
     a2a:	71 81       	ldd	r23, Z+1	; 0x01
     a2c:	07 2e       	mov	r0, r23
     a2e:	00 0c       	add	r0, r0
     a30:	88 0b       	sbc	r24, r24
     a32:	99 0b       	sbc	r25, r25
     a34:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
     a38:	4b 01       	movw	r8, r22
     a3a:	5c 01       	movw	r10, r24
     a3c:	9b 01       	movw	r18, r22
     a3e:	ac 01       	movw	r20, r24
     a40:	c7 01       	movw	r24, r14
     a42:	b6 01       	movw	r22, r12
     a44:	0e 94 bc 39 	call	0x7378	; 0x7378 <__subsf3>
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	45 e2       	ldi	r20, 0x25	; 37
     a4e:	54 e4       	ldi	r21, 0x44	; 68
     a50:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
     a54:	a5 01       	movw	r20, r10
     a56:	94 01       	movw	r18, r8
     a58:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
     a5c:	9b 01       	movw	r18, r22
     a5e:	ac 01       	movw	r20, r24
		if(ResultFor66 == 0);   //skip to next increment
		CalBCorrection = ResultFor69/ResultFor66;
     a60:	2b 96       	adiw	r28, 0x0b	; 11
     a62:	6c ad       	ldd	r22, Y+60	; 0x3c
     a64:	7d ad       	ldd	r23, Y+61	; 0x3d
     a66:	8e ad       	ldd	r24, Y+62	; 0x3e
     a68:	9f ad       	ldd	r25, Y+63	; 0x3f
     a6a:	2b 97       	sbiw	r28, 0x0b	; 11
     a6c:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
     a70:	66 2e       	mov	r6, r22
     a72:	77 2e       	mov	r7, r23
     a74:	88 2e       	mov	r8, r24
     a76:	99 2e       	mov	r9, r25
		CalB = CalB + 0.2;
     a78:	2d ec       	ldi	r18, 0xCD	; 205
     a7a:	3c ec       	ldi	r19, 0xCC	; 204
     a7c:	4c e4       	ldi	r20, 0x4C	; 76
     a7e:	5e e3       	ldi	r21, 0x3E	; 62
     a80:	c7 01       	movw	r24, r14
     a82:	b6 01       	movw	r22, r12
     a84:	0e 94 bd 39 	call	0x737a	; 0x737a <__addsf3>
     a88:	6b 01       	movw	r12, r22
     a8a:	7c 01       	movw	r14, r24
		CalBiterations++;
     a8c:	ef ef       	ldi	r30, 0xFF	; 255
     a8e:	2e 1a       	sub	r2, r30
     a90:	3e 0a       	sbc	r3, r30
		wdt_reset();
     a92:	a8 95       	wdr
		if(CalBiterations > 14000)break;
     a94:	f1 eb       	ldi	r31, 0xB1	; 177
     a96:	2f 16       	cp	r2, r31
     a98:	f6 e3       	ldi	r31, 0x36	; 54
     a9a:	3f 06       	cpc	r3, r31
     a9c:	24 f1       	brlt	.+72     	; 0xae6 <RunAutoCalibration+0x306>
     a9e:	3d c0       	rjmp	.+122    	; 0xb1a <RunAutoCalibration+0x33a>
     aa0:	2f 96       	adiw	r28, 0x0f	; 15
     aa2:	6c af       	std	Y+60, r22	; 0x3c
     aa4:	7d af       	std	Y+61, r23	; 0x3d
     aa6:	8e af       	std	Y+62, r24	; 0x3e
     aa8:	9f af       	std	Y+63, r25	; 0x3f
     aaa:	2f 97       	sbiw	r28, 0x0f	; 15
     aac:	60 96       	adiw	r28, 0x10	; 16
     aae:	bf ae       	std	Y+63, r11	; 0x3f
     ab0:	60 97       	sbiw	r28, 0x10	; 16
     ab2:	61 96       	adiw	r28, 0x11	; 17
     ab4:	af ae       	std	Y+63, r10	; 0x3f
     ab6:	61 97       	sbiw	r28, 0x11	; 17
     ab8:	62 96       	adiw	r28, 0x12	; 18
     aba:	9f ae       	std	Y+63, r9	; 0x3f
     abc:	62 97       	sbiw	r28, 0x12	; 18
     abe:	63 96       	adiw	r28, 0x13	; 19
     ac0:	8f ae       	std	Y+63, r8	; 0x3f
     ac2:	63 97       	sbiw	r28, 0x13	; 19
//	USART0_sendString(string);
}
//--------------------------------------------Run Auto Calibration Routine--------------------------------------------------------
void RunAutoCalibration(struct cal *ptr){
		
	float CalACorrection = 8;
     ac4:	21 2c       	mov	r2, r1
     ac6:	31 2c       	mov	r3, r1
     ac8:	0f 2e       	mov	r0, r31
     aca:	c1 2c       	mov	r12, r1
     acc:	d1 2c       	mov	r13, r1
     ace:	f8 e4       	ldi	r31, 0x48	; 72
     ad0:	ef 2e       	mov	r14, r31
     ad2:	f4 e4       	ldi	r31, 0x44	; 68
     ad4:	ff 2e       	mov	r15, r31
     ad6:	f0 2d       	mov	r31, r0
     ad8:	61 2c       	mov	r6, r1
     ada:	71 2c       	mov	r7, r1
     adc:	81 2c       	mov	r8, r1
     ade:	0f 2e       	mov	r0, r31
     ae0:	f1 e4       	ldi	r31, 0x41	; 65
     ae2:	9f 2e       	mov	r9, r31
     ae4:	f0 2d       	mov	r31, r0
		wdt_reset();
		if(CalAiterations > 16000)break;
		
	}
	
	while(!((CalBCorrection <= 1.001)&&(CalBCorrection >= 0.999))){		
     ae6:	25 ec       	ldi	r18, 0xC5	; 197
     ae8:	30 e2       	ldi	r19, 0x20	; 32
     aea:	40 e8       	ldi	r20, 0x80	; 128
     aec:	5f e3       	ldi	r21, 0x3F	; 63
     aee:	66 2d       	mov	r22, r6
     af0:	77 2d       	mov	r23, r7
     af2:	88 2d       	mov	r24, r8
     af4:	99 2d       	mov	r25, r9
     af6:	0e 94 29 3a 	call	0x7452	; 0x7452 <__cmpsf2>
     afa:	18 16       	cp	r1, r24
     afc:	0c f4       	brge	.+2      	; 0xb00 <RunAutoCalibration+0x320>
     afe:	6e cf       	rjmp	.-292    	; 0x9dc <RunAutoCalibration+0x1fc>
     b00:	27 e7       	ldi	r18, 0x77	; 119
     b02:	3e eb       	ldi	r19, 0xBE	; 190
     b04:	4f e7       	ldi	r20, 0x7F	; 127
     b06:	5f e3       	ldi	r21, 0x3F	; 63
     b08:	66 2d       	mov	r22, r6
     b0a:	77 2d       	mov	r23, r7
     b0c:	88 2d       	mov	r24, r8
     b0e:	99 2d       	mov	r25, r9
     b10:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <__gesf2>
     b14:	88 23       	and	r24, r24
     b16:	0c f4       	brge	.+2      	; 0xb1a <RunAutoCalibration+0x33a>
     b18:	61 cf       	rjmp	.-318    	; 0x9dc <RunAutoCalibration+0x1fc>
		wdt_reset();
		if(CalBiterations > 14000)break;
	}
	
		
	if(ptr->StartandRunCalibration  == 29){		// must see entries for 6.6k, 20k, and 68.9k plus "resistance" button.
     b1a:	f8 01       	movw	r30, r16
     b1c:	e4 57       	subi	r30, 0x74	; 116
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	a0 80       	ld	r10, Z
     b22:	b1 80       	ldd	r11, Z+1	; 0x01
     b24:	8d e1       	ldi	r24, 0x1D	; 29
     b26:	a8 16       	cp	r10, r24
     b28:	b1 04       	cpc	r11, r1
     b2a:	a1 f4       	brne	.+40     	; 0xb54 <RunAutoCalibration+0x374>
		ptr->ResistA_cal = (int)CalA;	
     b2c:	2f 96       	adiw	r28, 0x0f	; 15
     b2e:	6c ad       	ldd	r22, Y+60	; 0x3c
     b30:	7d ad       	ldd	r23, Y+61	; 0x3d
     b32:	8e ad       	ldd	r24, Y+62	; 0x3e
     b34:	9f ad       	ldd	r25, Y+63	; 0x3f
     b36:	2f 97       	sbiw	r28, 0x0f	; 15
     b38:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
     b3c:	d8 01       	movw	r26, r16
     b3e:	1c 96       	adiw	r26, 0x0c	; 12
     b40:	6d 93       	st	X+, r22
     b42:	7c 93       	st	X, r23
     b44:	1d 97       	sbiw	r26, 0x0d	; 13
		ptr->ResistB_cal = (int)CalB;
     b46:	c7 01       	movw	r24, r14
     b48:	b6 01       	movw	r22, r12
     b4a:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
     b4e:	f8 01       	movw	r30, r16
     b50:	66 87       	std	Z+14, r22	; 0x0e
     b52:	77 87       	std	Z+15, r23	; 0x0f
	}
	if(ptr->StartandRunCalibration  == 30){	// must see entries for 6.6k, 20k, and 68.9k plus "temperature" button
     b54:	fe e1       	ldi	r31, 0x1E	; 30
     b56:	af 16       	cp	r10, r31
     b58:	b1 04       	cpc	r11, r1
     b5a:	a1 f4       	brne	.+40     	; 0xb84 <RunAutoCalibration+0x3a4>
		ptr->Therm_ResA_cal = (int)CalA;
     b5c:	2f 96       	adiw	r28, 0x0f	; 15
     b5e:	6c ad       	ldd	r22, Y+60	; 0x3c
     b60:	7d ad       	ldd	r23, Y+61	; 0x3d
     b62:	8e ad       	ldd	r24, Y+62	; 0x3e
     b64:	9f ad       	ldd	r25, Y+63	; 0x3f
     b66:	2f 97       	sbiw	r28, 0x0f	; 15
     b68:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
     b6c:	d8 01       	movw	r26, r16
     b6e:	50 96       	adiw	r26, 0x10	; 16
     b70:	6d 93       	st	X+, r22
     b72:	7c 93       	st	X, r23
     b74:	51 97       	sbiw	r26, 0x11	; 17
		ptr->Therm_ResB_cal = (int)CalB;
     b76:	c7 01       	movw	r24, r14
     b78:	b6 01       	movw	r22, r12
     b7a:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
     b7e:	f8 01       	movw	r30, r16
     b80:	62 8b       	std	Z+18, r22	; 0x12
     b82:	73 8b       	std	Z+19, r23	; 0x13
	}	
	// ten items sent
	sprintf(string,"CAL%d,%d,%f,%f,%d,%d,%d,%d,%d,%dCal\r\n",(int)CalA,(int)CalB,CalACorrection,CalBCorrection,ptr->CalibrationValue66,ptr->CalibrationValue20,ptr->CalibrationValue69,CalAiterations,CalBiterations,ptr->StartandRunCalibration);
     b84:	bf 92       	push	r11
     b86:	af 92       	push	r10
     b88:	3f 92       	push	r3
     b8a:	2f 92       	push	r2
     b8c:	5f 92       	push	r5
     b8e:	4f 92       	push	r4
     b90:	f8 01       	movw	r30, r16
     b92:	ec 56       	subi	r30, 0x6C	; 108
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	8f 93       	push	r24
     b9a:	80 81       	ld	r24, Z
     b9c:	8f 93       	push	r24
     b9e:	32 97       	sbiw	r30, 0x02	; 2
     ba0:	81 81       	ldd	r24, Z+1	; 0x01
     ba2:	8f 93       	push	r24
     ba4:	80 81       	ld	r24, Z
     ba6:	8f 93       	push	r24
     ba8:	34 97       	sbiw	r30, 0x04	; 4
     baa:	81 81       	ldd	r24, Z+1	; 0x01
     bac:	8f 93       	push	r24
     bae:	80 81       	ld	r24, Z
     bb0:	8f 93       	push	r24
     bb2:	9f 92       	push	r9
     bb4:	8f 92       	push	r8
     bb6:	7f 92       	push	r7
     bb8:	6f 92       	push	r6
     bba:	63 96       	adiw	r28, 0x13	; 19
     bbc:	ff ad       	ldd	r31, Y+63	; 0x3f
     bbe:	63 97       	sbiw	r28, 0x13	; 19
     bc0:	ff 93       	push	r31
     bc2:	62 96       	adiw	r28, 0x12	; 18
     bc4:	8f ad       	ldd	r24, Y+63	; 0x3f
     bc6:	62 97       	sbiw	r28, 0x12	; 18
     bc8:	8f 93       	push	r24
     bca:	61 96       	adiw	r28, 0x11	; 17
     bcc:	9f ad       	ldd	r25, Y+63	; 0x3f
     bce:	61 97       	sbiw	r28, 0x11	; 17
     bd0:	9f 93       	push	r25
     bd2:	60 96       	adiw	r28, 0x10	; 16
     bd4:	af ad       	ldd	r26, Y+63	; 0x3f
     bd6:	60 97       	sbiw	r28, 0x10	; 16
     bd8:	af 93       	push	r26
     bda:	c7 01       	movw	r24, r14
     bdc:	b6 01       	movw	r22, r12
     bde:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
     be2:	7f 93       	push	r23
     be4:	6f 93       	push	r22
     be6:	2f 96       	adiw	r28, 0x0f	; 15
     be8:	6c ad       	ldd	r22, Y+60	; 0x3c
     bea:	7d ad       	ldd	r23, Y+61	; 0x3d
     bec:	8e ad       	ldd	r24, Y+62	; 0x3e
     bee:	9f ad       	ldd	r25, Y+63	; 0x3f
     bf0:	2f 97       	sbiw	r28, 0x0f	; 15
     bf2:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
     bf6:	7f 93       	push	r23
     bf8:	6f 93       	push	r22
     bfa:	8d e4       	ldi	r24, 0x4D	; 77
     bfc:	90 e4       	ldi	r25, 0x40	; 64
     bfe:	9f 93       	push	r25
     c00:	8f 93       	push	r24
     c02:	8e 01       	movw	r16, r28
     c04:	0f 5f       	subi	r16, 0xFF	; 255
     c06:	1f 4f       	sbci	r17, 0xFF	; 255
     c08:	1f 93       	push	r17
     c0a:	0f 93       	push	r16
     c0c:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
	//sprintf(string,"CAL,%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%dCal\n",CalA,CalB,CalACorrectionStart,CalBCorrectionStart,CalACorrection,CalBCorrection,calibration.StartandRunCalibration,CalAiterations,CalBiterations,calibration.CalibrationValue66,calibration.CalibrationValue20);
	USART0_sendString(string);
     c10:	c8 01       	movw	r24, r16
     c12:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
	NewSetUnfinishedBusiness(Unfinished_Beep,&Unfinished_Business);
     c16:	45 ea       	ldi	r20, 0xA5	; 165
     c18:	54 e5       	ldi	r21, 0x54	; 84
     c1a:	68 e0       	ldi	r22, 0x08	; 8
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
	NewClearUnfinishedBusiness(Finished_AutoCAl,&Unfinished_Business);
     c26:	45 ea       	ldi	r20, 0xA5	; 165
     c28:	54 e5       	ldi	r21, 0x54	; 84
     c2a:	60 ec       	ldi	r22, 0xC0	; 192
     c2c:	7f e7       	ldi	r23, 0x7F	; 127
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 02 23 	call	0x4604	; 0x4604 <NewClearUnfinishedBusiness>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     c36:	85 b1       	in	r24, 0x05	; 5
     c38:	8f 7d       	andi	r24, 0xDF	; 223
     c3a:	85 b9       	out	0x05, r24	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
     c3c:	81 b3       	in	r24, 0x11	; 17
     c3e:	84 60       	ori	r24, 0x04	; 4
     c40:	81 bb       	out	0x11, r24	; 17
	FT2_set_level(false);																	//Open relay
	BlueLED_set_level(true);	
	return;	 	
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	de bf       	out	0x3e, r29	; 62
}
     c46:	ce 5a       	subi	r28, 0xAE	; 174
     c48:	df 4f       	sbci	r29, 0xFF	; 255
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	bf 90       	pop	r11
     c60:	af 90       	pop	r10
     c62:	9f 90       	pop	r9
     c64:	8f 90       	pop	r8
     c66:	7f 90       	pop	r7
     c68:	6f 90       	pop	r6
     c6a:	5f 90       	pop	r5
     c6c:	4f 90       	pop	r4
     c6e:	3f 90       	pop	r3
     c70:	2f 90       	pop	r2
     c72:	08 95       	ret

00000c74 <SaveAutoCalibration>:
//--------------------------------------------Save Auto Calibration Routine--------------------------------------------------------
void SaveAutoCalibration(struct cal *ptr){			// this mimics received Bluetooth commands so that the same functions for saving data can be used
     c74:	df 92       	push	r13
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	6e 97       	sbiw	r28, 0x1e	; 30
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	8c 01       	movw	r16, r24
	char string[30];
	memset(string,0,30*sizeof(char));
     c8e:	fe 01       	movw	r30, r28
     c90:	31 96       	adiw	r30, 0x01	; 1
     c92:	8e e1       	ldi	r24, 0x1E	; 30
     c94:	df 01       	movw	r26, r30
     c96:	1d 92       	st	X+, r1
     c98:	8a 95       	dec	r24
     c9a:	e9 f7       	brne	.-6      	; 0xc96 <SaveAutoCalibration+0x22>
	if(ptr->StartandRunCalibration  == 29){						// If resistance cal
     c9c:	f8 01       	movw	r30, r16
     c9e:	e4 57       	subi	r30, 0x74	; 116
     ca0:	ff 4f       	sbci	r31, 0xFF	; 255
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	4d 97       	sbiw	r24, 0x1d	; 29
     ca8:	91 f5       	brne	.+100    	; 0xd0e <SaveAutoCalibration+0x9a>
		sprintf(string,"RA1%dY",ptr->ResistA_cal);	
     caa:	f8 01       	movw	r30, r16
     cac:	85 85       	ldd	r24, Z+13	; 0x0d
     cae:	8f 93       	push	r24
     cb0:	84 85       	ldd	r24, Z+12	; 0x0c
     cb2:	8f 93       	push	r24
     cb4:	83 e7       	ldi	r24, 0x73	; 115
     cb6:	90 e4       	ldi	r25, 0x40	; 64
     cb8:	9f 93       	push	r25
     cba:	8f 93       	push	r24
     cbc:	ce 01       	movw	r24, r28
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	7c 01       	movw	r14, r24
     cc2:	9f 93       	push	r25
     cc4:	8f 93       	push	r24
     cc6:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
		OhmmeterCalA(string);
     cca:	c7 01       	movw	r24, r14
     ccc:	0e 94 ed 07 	call	0xfda	; 0xfda <OhmmeterCalA>
		memset(string,0,30*sizeof(char));
     cd0:	8e e1       	ldi	r24, 0x1E	; 30
     cd2:	d7 01       	movw	r26, r14
     cd4:	1d 92       	st	X+, r1
     cd6:	8a 95       	dec	r24
     cd8:	e9 f7       	brne	.-6      	; 0xcd4 <SaveAutoCalibration+0x60>
		sprintf(string,"RA2%dY",ptr->ResistB_cal);
     cda:	f8 01       	movw	r30, r16
     cdc:	87 85       	ldd	r24, Z+15	; 0x0f
     cde:	8f 93       	push	r24
     ce0:	86 85       	ldd	r24, Z+14	; 0x0e
     ce2:	8f 93       	push	r24
     ce4:	8a e7       	ldi	r24, 0x7A	; 122
     ce6:	90 e4       	ldi	r25, 0x40	; 64
     ce8:	9f 93       	push	r25
     cea:	8f 93       	push	r24
     cec:	ff 92       	push	r15
     cee:	ef 92       	push	r14
     cf0:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
		OhmmeterCalB(string);
     cf4:	c7 01       	movw	r24, r14
     cf6:	0e 94 22 08 	call	0x1044	; 0x1044 <OhmmeterCalB>
		NewSetUnfinishedBusiness(Unfinished_Beep,&Unfinished_Business);
     cfa:	45 ea       	ldi	r20, 0xA5	; 165
     cfc:	54 e5       	ldi	r21, 0x54	; 84
     cfe:	68 e0       	ldi	r22, 0x08	; 8
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	de bf       	out	0x3e, r29	; 62
	}
	if(ptr->StartandRunCalibration  == 30){						// If temperature cal
     d0e:	f8 01       	movw	r30, r16
     d10:	e4 57       	subi	r30, 0x74	; 116
     d12:	ff 4f       	sbci	r31, 0xFF	; 255
     d14:	80 81       	ld	r24, Z
     d16:	91 81       	ldd	r25, Z+1	; 0x01
     d18:	4e 97       	sbiw	r24, 0x1e	; 30
     d1a:	09 f0       	breq	.+2      	; 0xd1e <SaveAutoCalibration+0xaa>
     d1c:	43 c0       	rjmp	.+134    	; 0xda4 <SaveAutoCalibration+0x130>
		memset(string,0,30*sizeof(char));
     d1e:	0f 2e       	mov	r0, r31
     d20:	fe e1       	ldi	r31, 0x1E	; 30
     d22:	df 2e       	mov	r13, r31
     d24:	f0 2d       	mov	r31, r0
     d26:	de 01       	movw	r26, r28
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	7d 01       	movw	r14, r26
     d2c:	fd 01       	movw	r30, r26
     d2e:	2d 2d       	mov	r18, r13
     d30:	11 92       	st	Z+, r1
     d32:	2a 95       	dec	r18
     d34:	e9 f7       	brne	.-6      	; 0xd30 <SaveAutoCalibration+0xbc>
		sprintf(string,"TR1%dY",ptr->Therm_ResA_cal);
     d36:	d8 01       	movw	r26, r16
     d38:	51 96       	adiw	r26, 0x11	; 17
     d3a:	8c 91       	ld	r24, X
     d3c:	51 97       	sbiw	r26, 0x11	; 17
     d3e:	8f 93       	push	r24
     d40:	50 96       	adiw	r26, 0x10	; 16
     d42:	8c 91       	ld	r24, X
     d44:	8f 93       	push	r24
     d46:	81 e8       	ldi	r24, 0x81	; 129
     d48:	90 e4       	ldi	r25, 0x40	; 64
     d4a:	9f 93       	push	r25
     d4c:	8f 93       	push	r24
     d4e:	ff 92       	push	r15
     d50:	ef 92       	push	r14
     d52:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
		ThermistorCalA(string);
     d56:	c7 01       	movw	r24, r14
     d58:	0e 94 57 08 	call	0x10ae	; 0x10ae <ThermistorCalA>
		USART0_sendString(string);
     d5c:	c7 01       	movw	r24, r14
     d5e:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
		memset(string,0,30*sizeof(char));
     d62:	f7 01       	movw	r30, r14
     d64:	11 92       	st	Z+, r1
     d66:	da 94       	dec	r13
     d68:	e9 f7       	brne	.-6      	; 0xd64 <SaveAutoCalibration+0xf0>
		sprintf(string,"TR2%dY",ptr->Therm_ResB_cal);
     d6a:	d8 01       	movw	r26, r16
     d6c:	53 96       	adiw	r26, 0x13	; 19
     d6e:	8c 91       	ld	r24, X
     d70:	53 97       	sbiw	r26, 0x13	; 19
     d72:	8f 93       	push	r24
     d74:	52 96       	adiw	r26, 0x12	; 18
     d76:	8c 91       	ld	r24, X
     d78:	8f 93       	push	r24
     d7a:	88 e8       	ldi	r24, 0x88	; 136
     d7c:	90 e4       	ldi	r25, 0x40	; 64
     d7e:	9f 93       	push	r25
     d80:	8f 93       	push	r24
     d82:	ff 92       	push	r15
     d84:	ef 92       	push	r14
     d86:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
		ThermistorCalB(string);
     d8a:	c7 01       	movw	r24, r14
     d8c:	0e 94 8c 08 	call	0x1118	; 0x1118 <ThermistorCalB>
		NewSetUnfinishedBusiness(Unfinished_Beep,&Unfinished_Business);	
     d90:	45 ea       	ldi	r20, 0xA5	; 165
     d92:	54 e5       	ldi	r21, 0x54	; 84
     d94:	68 e0       	ldi	r22, 0x08	; 8
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	de bf       	out	0x3e, r29	; 62
	}	
	ptr->StartandRunCalibration |= 64;
     da4:	78 01       	movw	r14, r16
     da6:	fc e8       	ldi	r31, 0x8C	; 140
     da8:	ef 0e       	add	r14, r31
     daa:	f1 1c       	adc	r15, r1
     dac:	d7 01       	movw	r26, r14
     dae:	8d 91       	ld	r24, X+
     db0:	9c 91       	ld	r25, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	80 64       	ori	r24, 0x40	; 64
     db6:	8d 93       	st	X+, r24
     db8:	9c 93       	st	X, r25
	NewSetUnfinishedBusiness(Unfinished_Beep,&Unfinished_Business);
     dba:	45 ea       	ldi	r20, 0xA5	; 165
     dbc:	54 e5       	ldi	r21, 0x54	; 84
     dbe:	68 e0       	ldi	r22, 0x08	; 8
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
//	sprintf(string,"ENTR99,%d,%dOHM\n",ptr->CalibrationValue20,ptr->StartandRunCalibration);
	sprintf(string,"ENTR99,%d,%dOHM\r\n",ptr->CalibrationValue69,ptr->StartandRunCalibration);
     dca:	f7 01       	movw	r30, r14
     dcc:	81 81       	ldd	r24, Z+1	; 0x01
     dce:	8f 93       	push	r24
     dd0:	80 81       	ld	r24, Z
     dd2:	8f 93       	push	r24
     dd4:	38 96       	adiw	r30, 0x08	; 8
     dd6:	81 81       	ldd	r24, Z+1	; 0x01
     dd8:	8f 93       	push	r24
     dda:	80 81       	ld	r24, Z
     ddc:	8f 93       	push	r24
     dde:	8f e8       	ldi	r24, 0x8F	; 143
     de0:	90 e4       	ldi	r25, 0x40	; 64
     de2:	9f 93       	push	r25
     de4:	8f 93       	push	r24
     de6:	8e 01       	movw	r16, r28
     de8:	0f 5f       	subi	r16, 0xFF	; 255
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	1f 93       	push	r17
     dee:	0f 93       	push	r16
     df0:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
	ptr->StartandRunCalibration = 0;
     df4:	d7 01       	movw	r26, r14
     df6:	1d 92       	st	X+, r1
     df8:	1c 92       	st	X, r1
	USART0_sendString(string);
     dfa:	c8 01       	movw	r24, r16
     dfc:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e00:	bf ef       	ldi	r27, 0xFF	; 255
     e02:	e9 ef       	ldi	r30, 0xF9	; 249
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	b1 50       	subi	r27, 0x01	; 1
     e08:	e0 40       	sbci	r30, 0x00	; 0
     e0a:	f0 40       	sbci	r31, 0x00	; 0
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <SaveAutoCalibration+0x192>
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <SaveAutoCalibration+0x19c>
     e10:	00 00       	nop
	_delay_ms(80);
	USART0_sendString(string);
     e12:	c8 01       	movw	r24, r16
     e14:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
	
	return;
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	de bf       	out	0x3e, r29	; 62
}
     e1c:	6e 96       	adiw	r28, 0x1e	; 30
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	ff 90       	pop	r15
     e2c:	ef 90       	pop	r14
     e2e:	df 90       	pop	r13
     e30:	08 95       	ret

00000e32 <SYBTvoltsADcal>:
void OverrideBluetoothLowBattery(char buffer[30]){       //Temporary override of low battery Bluetooth lockout.  Resets on power off.
	
}
//----------------------------------------------------------------------------------------------------------------------

void ResistorZeroCal(char buffer[30]){		//  Not used 
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	1f 92       	push	r1
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	8c 01       	movw	r16, r24
     e42:	ce 01       	movw	r24, r28
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	9f 93       	push	r25
     e48:	8f 93       	push	r24
     e4a:	81 eb       	ldi	r24, 0xB1	; 177
     e4c:	92 e5       	ldi	r25, 0x52	; 82
     e4e:	9f 93       	push	r25
     e50:	8f 93       	push	r24
     e52:	81 ea       	ldi	r24, 0xA1	; 161
     e54:	90 e4       	ldi	r25, 0x40	; 64
     e56:	9f 93       	push	r25
     e58:	8f 93       	push	r24
     e5a:	1f 93       	push	r17
     e5c:	0f 93       	push	r16
     e5e:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	89 35       	cpi	r24, 0x59	; 89
     e6a:	91 f4       	brne	.+36     	; 0xe90 <SYBTvoltsADcal+0x5e>
     e6c:	b8 01       	movw	r22, r16
     e6e:	6d 5f       	subi	r22, 0xFD	; 253
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	44 e0       	ldi	r20, 0x04	; 4
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	8a e0       	ldi	r24, 0x0A	; 10
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
     e7e:	ed ea       	ldi	r30, 0xAD	; 173
     e80:	f2 e5       	ldi	r31, 0x52	; 82
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	32 e0       	ldi	r19, 0x02	; 2
     e8a:	83 27       	eor	r24, r19
     e8c:	80 83       	st	Z, r24
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	0f 90       	pop	r0
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	08 95       	ret

00000e9c <LoadvoltsADcal>:
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	1f 92       	push	r1
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	8c 01       	movw	r16, r24
     eac:	ce 01       	movw	r24, r28
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	9f 93       	push	r25
     eb2:	8f 93       	push	r24
     eb4:	87 eb       	ldi	r24, 0xB7	; 183
     eb6:	92 e5       	ldi	r25, 0x52	; 82
     eb8:	9f 93       	push	r25
     eba:	8f 93       	push	r24
     ebc:	8a ea       	ldi	r24, 0xAA	; 170
     ebe:	90 e4       	ldi	r25, 0x40	; 64
     ec0:	9f 93       	push	r25
     ec2:	8f 93       	push	r24
     ec4:	1f 93       	push	r17
     ec6:	0f 93       	push	r16
     ec8:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	89 35       	cpi	r24, 0x59	; 89
     ed4:	91 f4       	brne	.+36     	; 0xefa <LoadvoltsADcal+0x5e>
     ed6:	b8 01       	movw	r22, r16
     ed8:	6d 5f       	subi	r22, 0xFD	; 253
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	44 e0       	ldi	r20, 0x04	; 4
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	84 e1       	ldi	r24, 0x14	; 20
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
     ee8:	ed ea       	ldi	r30, 0xAD	; 173
     eea:	f2 e5       	ldi	r31, 0x52	; 82
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	88 60       	ori	r24, 0x08	; 8
     ef2:	38 e0       	ldi	r19, 0x08	; 8
     ef4:	83 27       	eor	r24, r19
     ef6:	80 83       	st	Z, r24
     ef8:	91 83       	std	Z+1, r25	; 0x01
     efa:	0f 90       	pop	r0
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	08 95       	ret

00000f06 <NineVoltBatteryCal>:
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	1f 92       	push	r1
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	8c 01       	movw	r16, r24
     f16:	ce 01       	movw	r24, r28
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	9f 93       	push	r25
     f1c:	8f 93       	push	r24
     f1e:	83 eb       	ldi	r24, 0xB3	; 179
     f20:	92 e5       	ldi	r25, 0x52	; 82
     f22:	9f 93       	push	r25
     f24:	8f 93       	push	r24
     f26:	83 eb       	ldi	r24, 0xB3	; 179
     f28:	90 e4       	ldi	r25, 0x40	; 64
     f2a:	9f 93       	push	r25
     f2c:	8f 93       	push	r24
     f2e:	1f 93       	push	r17
     f30:	0f 93       	push	r16
     f32:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	89 35       	cpi	r24, 0x59	; 89
     f3e:	91 f4       	brne	.+36     	; 0xf64 <NineVoltBatteryCal+0x5e>
     f40:	b8 01       	movw	r22, r16
     f42:	6d 5f       	subi	r22, 0xFD	; 253
     f44:	7f 4f       	sbci	r23, 0xFF	; 255
     f46:	44 e0       	ldi	r20, 0x04	; 4
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	8f e0       	ldi	r24, 0x0F	; 15
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
     f52:	ed ea       	ldi	r30, 0xAD	; 173
     f54:	f2 e5       	ldi	r31, 0x52	; 82
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	84 60       	ori	r24, 0x04	; 4
     f5c:	34 e0       	ldi	r19, 0x04	; 4
     f5e:	83 27       	eor	r24, r19
     f60:	80 83       	st	Z, r24
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	0f 90       	pop	r0
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	08 95       	ret

00000f70 <SixVoltBatteryCal>:
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	1f 92       	push	r1
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	8c 01       	movw	r16, r24
     f80:	ce 01       	movw	r24, r28
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	9f 93       	push	r25
     f86:	8f 93       	push	r24
     f88:	85 eb       	ldi	r24, 0xB5	; 181
     f8a:	92 e5       	ldi	r25, 0x52	; 82
     f8c:	9f 93       	push	r25
     f8e:	8f 93       	push	r24
     f90:	8c eb       	ldi	r24, 0xBC	; 188
     f92:	90 e4       	ldi	r25, 0x40	; 64
     f94:	9f 93       	push	r25
     f96:	8f 93       	push	r24
     f98:	1f 93       	push	r17
     f9a:	0f 93       	push	r16
     f9c:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	89 35       	cpi	r24, 0x59	; 89
     fa8:	91 f4       	brne	.+36     	; 0xfce <SixVoltBatteryCal+0x5e>
     faa:	b8 01       	movw	r22, r16
     fac:	6d 5f       	subi	r22, 0xFD	; 253
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	44 e0       	ldi	r20, 0x04	; 4
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	81 e3       	ldi	r24, 0x31	; 49
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
     fbc:	ed ea       	ldi	r30, 0xAD	; 173
     fbe:	f2 e5       	ldi	r31, 0x52	; 82
     fc0:	82 81       	ldd	r24, Z+2	; 0x02
     fc2:	93 81       	ldd	r25, Z+3	; 0x03
     fc4:	84 60       	ori	r24, 0x04	; 4
     fc6:	34 e0       	ldi	r19, 0x04	; 4
     fc8:	83 27       	eor	r24, r19
     fca:	82 83       	std	Z+2, r24	; 0x02
     fcc:	93 83       	std	Z+3, r25	; 0x03
     fce:	0f 90       	pop	r0
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	08 95       	ret

00000fda <OhmmeterCalA>:
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	1f 92       	push	r1
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	8c 01       	movw	r16, r24
     fea:	ce 01       	movw	r24, r28
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	9f 93       	push	r25
     ff0:	8f 93       	push	r24
     ff2:	89 eb       	ldi	r24, 0xB9	; 185
     ff4:	92 e5       	ldi	r25, 0x52	; 82
     ff6:	9f 93       	push	r25
     ff8:	8f 93       	push	r24
     ffa:	85 ec       	ldi	r24, 0xC5	; 197
     ffc:	90 e4       	ldi	r25, 0x40	; 64
     ffe:	9f 93       	push	r25
    1000:	8f 93       	push	r24
    1002:	1f 93       	push	r17
    1004:	0f 93       	push	r16
    1006:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	89 35       	cpi	r24, 0x59	; 89
    1012:	91 f4       	brne	.+36     	; 0x1038 <OhmmeterCalA+0x5e>
    1014:	b8 01       	movw	r22, r16
    1016:	6d 5f       	subi	r22, 0xFD	; 253
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	44 e0       	ldi	r20, 0x04	; 4
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	89 e1       	ldi	r24, 0x19	; 25
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1026:	ed ea       	ldi	r30, 0xAD	; 173
    1028:	f2 e5       	ldi	r31, 0x52	; 82
    102a:	80 81       	ld	r24, Z
    102c:	91 81       	ldd	r25, Z+1	; 0x01
    102e:	80 61       	ori	r24, 0x10	; 16
    1030:	30 e1       	ldi	r19, 0x10	; 16
    1032:	83 27       	eor	r24, r19
    1034:	80 83       	st	Z, r24
    1036:	91 83       	std	Z+1, r25	; 0x01
    1038:	0f 90       	pop	r0
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	08 95       	ret

00001044 <OhmmeterCalB>:
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	1f 92       	push	r1
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	8c 01       	movw	r16, r24
    1054:	ce 01       	movw	r24, r28
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	9f 93       	push	r25
    105a:	8f 93       	push	r24
    105c:	8b eb       	ldi	r24, 0xBB	; 187
    105e:	92 e5       	ldi	r25, 0x52	; 82
    1060:	9f 93       	push	r25
    1062:	8f 93       	push	r24
    1064:	8e ec       	ldi	r24, 0xCE	; 206
    1066:	90 e4       	ldi	r25, 0x40	; 64
    1068:	9f 93       	push	r25
    106a:	8f 93       	push	r24
    106c:	1f 93       	push	r17
    106e:	0f 93       	push	r16
    1070:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	89 35       	cpi	r24, 0x59	; 89
    107c:	91 f4       	brne	.+36     	; 0x10a2 <OhmmeterCalB+0x5e>
    107e:	b8 01       	movw	r22, r16
    1080:	6d 5f       	subi	r22, 0xFD	; 253
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	44 e0       	ldi	r20, 0x04	; 4
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	8e e1       	ldi	r24, 0x1E	; 30
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1090:	ed ea       	ldi	r30, 0xAD	; 173
    1092:	f2 e5       	ldi	r31, 0x52	; 82
    1094:	80 81       	ld	r24, Z
    1096:	91 81       	ldd	r25, Z+1	; 0x01
    1098:	80 62       	ori	r24, 0x20	; 32
    109a:	30 e2       	ldi	r19, 0x20	; 32
    109c:	83 27       	eor	r24, r19
    109e:	80 83       	st	Z, r24
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	0f 90       	pop	r0
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	08 95       	ret

000010ae <ThermistorCalA>:
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	1f 92       	push	r1
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	8c 01       	movw	r16, r24
    10be:	ce 01       	movw	r24, r28
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	9f 93       	push	r25
    10c4:	8f 93       	push	r24
    10c6:	8d eb       	ldi	r24, 0xBD	; 189
    10c8:	92 e5       	ldi	r25, 0x52	; 82
    10ca:	9f 93       	push	r25
    10cc:	8f 93       	push	r24
    10ce:	87 ed       	ldi	r24, 0xD7	; 215
    10d0:	90 e4       	ldi	r25, 0x40	; 64
    10d2:	9f 93       	push	r25
    10d4:	8f 93       	push	r24
    10d6:	1f 93       	push	r17
    10d8:	0f 93       	push	r16
    10da:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	89 35       	cpi	r24, 0x59	; 89
    10e6:	91 f4       	brne	.+36     	; 0x110c <ThermistorCalA+0x5e>
    10e8:	b8 01       	movw	r22, r16
    10ea:	6d 5f       	subi	r22, 0xFD	; 253
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255
    10ee:	44 e0       	ldi	r20, 0x04	; 4
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	8d e1       	ldi	r24, 0x1D	; 29
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    10fa:	ed ea       	ldi	r30, 0xAD	; 173
    10fc:	f2 e5       	ldi	r31, 0x52	; 82
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	81 60       	ori	r24, 0x01	; 1
    1104:	31 e0       	ldi	r19, 0x01	; 1
    1106:	83 27       	eor	r24, r19
    1108:	82 83       	std	Z+2, r24	; 0x02
    110a:	93 83       	std	Z+3, r25	; 0x03
    110c:	0f 90       	pop	r0
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	08 95       	ret

00001118 <ThermistorCalB>:
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	1f 92       	push	r1
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	8c 01       	movw	r16, r24
    1128:	ce 01       	movw	r24, r28
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	9f 93       	push	r25
    112e:	8f 93       	push	r24
    1130:	8f eb       	ldi	r24, 0xBF	; 191
    1132:	92 e5       	ldi	r25, 0x52	; 82
    1134:	9f 93       	push	r25
    1136:	8f 93       	push	r24
    1138:	80 ee       	ldi	r24, 0xE0	; 224
    113a:	90 e4       	ldi	r25, 0x40	; 64
    113c:	9f 93       	push	r25
    113e:	8f 93       	push	r24
    1140:	1f 93       	push	r17
    1142:	0f 93       	push	r16
    1144:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	89 35       	cpi	r24, 0x59	; 89
    1150:	91 f4       	brne	.+36     	; 0x1176 <ThermistorCalB+0x5e>
    1152:	b8 01       	movw	r22, r16
    1154:	6d 5f       	subi	r22, 0xFD	; 253
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	44 e0       	ldi	r20, 0x04	; 4
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	81 e2       	ldi	r24, 0x21	; 33
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1164:	ed ea       	ldi	r30, 0xAD	; 173
    1166:	f2 e5       	ldi	r31, 0x52	; 82
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	93 81       	ldd	r25, Z+3	; 0x03
    116c:	82 60       	ori	r24, 0x02	; 2
    116e:	32 e0       	ldi	r19, 0x02	; 2
    1170:	83 27       	eor	r24, r19
    1172:	82 83       	std	Z+2, r24	; 0x02
    1174:	93 83       	std	Z+3, r25	; 0x03
    1176:	0f 90       	pop	r0
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	08 95       	ret

00001182 <ThermistorCalOne>:
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	1f 92       	push	r1
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	8c 01       	movw	r16, r24
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	9f 93       	push	r25
    1198:	8f 93       	push	r24
    119a:	81 ec       	ldi	r24, 0xC1	; 193
    119c:	92 e5       	ldi	r25, 0x52	; 82
    119e:	9f 93       	push	r25
    11a0:	8f 93       	push	r24
    11a2:	89 ee       	ldi	r24, 0xE9	; 233
    11a4:	90 e4       	ldi	r25, 0x40	; 64
    11a6:	9f 93       	push	r25
    11a8:	8f 93       	push	r24
    11aa:	1f 93       	push	r17
    11ac:	0f 93       	push	r16
    11ae:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	89 35       	cpi	r24, 0x59	; 89
    11ba:	91 f4       	brne	.+36     	; 0x11e0 <ThermistorCalOne+0x5e>
    11bc:	b8 01       	movw	r22, r16
    11be:	6d 5f       	subi	r22, 0xFD	; 253
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	44 e0       	ldi	r20, 0x04	; 4
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	82 ec       	ldi	r24, 0xC2	; 194
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    11ce:	ed ea       	ldi	r30, 0xAD	; 173
    11d0:	f2 e5       	ldi	r31, 0x52	; 82
    11d2:	80 81       	ld	r24, Z
    11d4:	91 81       	ldd	r25, Z+1	; 0x01
    11d6:	81 60       	ori	r24, 0x01	; 1
    11d8:	31 e0       	ldi	r19, 0x01	; 1
    11da:	83 27       	eor	r24, r19
    11dc:	80 83       	st	Z, r24
    11de:	91 83       	std	Z+1, r25	; 0x01
    11e0:	0f 90       	pop	r0
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	08 95       	ret

000011ec <ThermistorCal2>:
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	25 97       	sbiw	r28, 0x05	; 5
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	8c 01       	movw	r16, r24
    1200:	ce 01       	movw	r24, r28
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	9f 93       	push	r25
    1206:	8f 93       	push	r24
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	9f 93       	push	r25
    120c:	8f 93       	push	r24
    120e:	85 ec       	ldi	r24, 0xC5	; 197
    1210:	92 e5       	ldi	r25, 0x52	; 82
    1212:	9f 93       	push	r25
    1214:	8f 93       	push	r24
    1216:	83 ef       	ldi	r24, 0xF3	; 243
    1218:	90 e4       	ldi	r25, 0x40	; 64
    121a:	9f 93       	push	r25
    121c:	8f 93       	push	r24
    121e:	1f 93       	push	r17
    1220:	0f 93       	push	r16
    1222:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	89 35       	cpi	r24, 0x59	; 89
    122e:	91 f4       	brne	.+36     	; 0x1254 <ThermistorCal2+0x68>
    1230:	b8 01       	movw	r22, r16
    1232:	6d 5f       	subi	r22, 0xFD	; 253
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	44 e0       	ldi	r20, 0x04	; 4
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	86 ed       	ldi	r24, 0xD6	; 214
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1242:	ed ea       	ldi	r30, 0xAD	; 173
    1244:	f2 e5       	ldi	r31, 0x52	; 82
    1246:	80 81       	ld	r24, Z
    1248:	91 81       	ldd	r25, Z+1	; 0x01
    124a:	81 60       	ori	r24, 0x01	; 1
    124c:	31 e0       	ldi	r19, 0x01	; 1
    124e:	83 27       	eor	r24, r19
    1250:	80 83       	st	Z, r24
    1252:	91 83       	std	Z+1, r25	; 0x01
    1254:	25 96       	adiw	r28, 0x05	; 5
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	08 95       	ret

00001264 <ThermistorCal3>:
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	25 97       	sbiw	r28, 0x05	; 5
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	8c 01       	movw	r16, r24
    1278:	8d b1       	in	r24, 0x0d	; 13
    127a:	8f 77       	andi	r24, 0x7F	; 127
    127c:	8d b9       	out	0x0d, r24	; 13
    127e:	ce 01       	movw	r24, r28
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	9f 93       	push	r25
    1284:	8f 93       	push	r24
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	9f 93       	push	r25
    128a:	8f 93       	push	r24
    128c:	89 ec       	ldi	r24, 0xC9	; 201
    128e:	92 e5       	ldi	r25, 0x52	; 82
    1290:	9f 93       	push	r25
    1292:	8f 93       	push	r24
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	91 e4       	ldi	r25, 0x41	; 65
    1298:	9f 93       	push	r25
    129a:	8f 93       	push	r24
    129c:	1f 93       	push	r17
    129e:	0f 93       	push	r16
    12a0:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	89 35       	cpi	r24, 0x59	; 89
    12ac:	91 f4       	brne	.+36     	; 0x12d2 <ThermistorCal3+0x6e>
    12ae:	b8 01       	movw	r22, r16
    12b0:	6d 5f       	subi	r22, 0xFD	; 253
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	44 e0       	ldi	r20, 0x04	; 4
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	8a ee       	ldi	r24, 0xEA	; 234
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    12c0:	ed ea       	ldi	r30, 0xAD	; 173
    12c2:	f2 e5       	ldi	r31, 0x52	; 82
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	81 60       	ori	r24, 0x01	; 1
    12ca:	31 e0       	ldi	r19, 0x01	; 1
    12cc:	83 27       	eor	r24, r19
    12ce:	80 83       	st	Z, r24
    12d0:	91 83       	std	Z+1, r25	; 0x01
    12d2:	25 96       	adiw	r28, 0x05	; 5
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	08 95       	ret

000012e2 <ThermistorOffset>:
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	1f 92       	push	r1
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	8c 01       	movw	r16, r24
    12f2:	ce 01       	movw	r24, r28
    12f4:	01 96       	adiw	r24, 0x01	; 1
    12f6:	9f 93       	push	r25
    12f8:	8f 93       	push	r24
    12fa:	8d ec       	ldi	r24, 0xCD	; 205
    12fc:	92 e5       	ldi	r25, 0x52	; 82
    12fe:	9f 93       	push	r25
    1300:	8f 93       	push	r24
    1302:	81 e1       	ldi	r24, 0x11	; 17
    1304:	91 e4       	ldi	r25, 0x41	; 65
    1306:	9f 93       	push	r25
    1308:	8f 93       	push	r24
    130a:	1f 93       	push	r17
    130c:	0f 93       	push	r16
    130e:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	89 35       	cpi	r24, 0x59	; 89
    131a:	91 f4       	brne	.+36     	; 0x1340 <ThermistorOffset+0x5e>
    131c:	b8 01       	movw	r22, r16
    131e:	6d 5f       	subi	r22, 0xFD	; 253
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	44 e0       	ldi	r20, 0x04	; 4
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	82 e7       	ldi	r24, 0x72	; 114
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    132e:	ed ea       	ldi	r30, 0xAD	; 173
    1330:	f2 e5       	ldi	r31, 0x52	; 82
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	81 60       	ori	r24, 0x01	; 1
    1338:	31 e0       	ldi	r19, 0x01	; 1
    133a:	83 27       	eor	r24, r19
    133c:	80 83       	st	Z, r24
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	0f 90       	pop	r0
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret

0000134c <IntThermistorCalA>:
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	1f 92       	push	r1
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	8c 01       	movw	r16, r24
    135c:	ce 01       	movw	r24, r28
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	9f 93       	push	r25
    1362:	8f 93       	push	r24
    1364:	85 ed       	ldi	r24, 0xD5	; 213
    1366:	92 e5       	ldi	r25, 0x52	; 82
    1368:	9f 93       	push	r25
    136a:	8f 93       	push	r24
    136c:	8a e1       	ldi	r24, 0x1A	; 26
    136e:	91 e4       	ldi	r25, 0x41	; 65
    1370:	9f 93       	push	r25
    1372:	8f 93       	push	r24
    1374:	1f 93       	push	r17
    1376:	0f 93       	push	r16
    1378:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	89 35       	cpi	r24, 0x59	; 89
    1384:	91 f4       	brne	.+36     	; 0x13aa <IntThermistorCalA+0x5e>
    1386:	b8 01       	movw	r22, r16
    1388:	6d 5f       	subi	r22, 0xFD	; 253
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	44 e0       	ldi	r20, 0x04	; 4
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	85 e2       	ldi	r24, 0x25	; 37
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1398:	ed ea       	ldi	r30, 0xAD	; 173
    139a:	f2 e5       	ldi	r31, 0x52	; 82
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	88 60       	ori	r24, 0x08	; 8
    13a2:	38 e0       	ldi	r19, 0x08	; 8
    13a4:	83 27       	eor	r24, r19
    13a6:	82 83       	std	Z+2, r24	; 0x02
    13a8:	93 83       	std	Z+3, r25	; 0x03
    13aa:	0f 90       	pop	r0
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <IntThermistorCalB>:
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	1f 92       	push	r1
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	8c 01       	movw	r16, r24
    13c6:	ce 01       	movw	r24, r28
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	9f 93       	push	r25
    13cc:	8f 93       	push	r24
    13ce:	87 ed       	ldi	r24, 0xD7	; 215
    13d0:	92 e5       	ldi	r25, 0x52	; 82
    13d2:	9f 93       	push	r25
    13d4:	8f 93       	push	r24
    13d6:	83 e2       	ldi	r24, 0x23	; 35
    13d8:	91 e4       	ldi	r25, 0x41	; 65
    13da:	9f 93       	push	r25
    13dc:	8f 93       	push	r24
    13de:	1f 93       	push	r17
    13e0:	0f 93       	push	r16
    13e2:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	89 35       	cpi	r24, 0x59	; 89
    13ee:	91 f4       	brne	.+36     	; 0x1414 <IntThermistorCalB+0x5e>
    13f0:	b8 01       	movw	r22, r16
    13f2:	6d 5f       	subi	r22, 0xFD	; 253
    13f4:	7f 4f       	sbci	r23, 0xFF	; 255
    13f6:	44 e0       	ldi	r20, 0x04	; 4
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	89 e2       	ldi	r24, 0x29	; 41
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1402:	ed ea       	ldi	r30, 0xAD	; 173
    1404:	f2 e5       	ldi	r31, 0x52	; 82
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	80 61       	ori	r24, 0x10	; 16
    140c:	30 e1       	ldi	r19, 0x10	; 16
    140e:	83 27       	eor	r24, r19
    1410:	82 83       	std	Z+2, r24	; 0x02
    1412:	93 83       	std	Z+3, r25	; 0x03
    1414:	0f 90       	pop	r0
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <IntThermistorCalOne>:
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	1f 92       	push	r1
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	8c 01       	movw	r16, r24
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	9f 93       	push	r25
    1436:	8f 93       	push	r24
    1438:	89 ed       	ldi	r24, 0xD9	; 217
    143a:	92 e5       	ldi	r25, 0x52	; 82
    143c:	9f 93       	push	r25
    143e:	8f 93       	push	r24
    1440:	8c e2       	ldi	r24, 0x2C	; 44
    1442:	91 e4       	ldi	r25, 0x41	; 65
    1444:	9f 93       	push	r25
    1446:	8f 93       	push	r24
    1448:	1f 93       	push	r17
    144a:	0f 93       	push	r16
    144c:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	89 35       	cpi	r24, 0x59	; 89
    1458:	91 f4       	brne	.+36     	; 0x147e <IntThermistorCalOne+0x5e>
    145a:	b8 01       	movw	r22, r16
    145c:	6d 5f       	subi	r22, 0xFD	; 253
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	44 e0       	ldi	r20, 0x04	; 4
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	86 e8       	ldi	r24, 0x86	; 134
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    146c:	ed ea       	ldi	r30, 0xAD	; 173
    146e:	f2 e5       	ldi	r31, 0x52	; 82
    1470:	80 81       	ld	r24, Z
    1472:	91 81       	ldd	r25, Z+1	; 0x01
    1474:	81 60       	ori	r24, 0x01	; 1
    1476:	31 e0       	ldi	r19, 0x01	; 1
    1478:	83 27       	eor	r24, r19
    147a:	80 83       	st	Z, r24
    147c:	91 83       	std	Z+1, r25	; 0x01
    147e:	0f 90       	pop	r0
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	08 95       	ret

0000148a <IntThermistorCal2>:
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	25 97       	sbiw	r28, 0x05	; 5
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	8c 01       	movw	r16, r24
    149e:	ce 01       	movw	r24, r28
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	9f 93       	push	r25
    14a4:	8f 93       	push	r24
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	9f 93       	push	r25
    14aa:	8f 93       	push	r24
    14ac:	8d ed       	ldi	r24, 0xDD	; 221
    14ae:	92 e5       	ldi	r25, 0x52	; 82
    14b0:	9f 93       	push	r25
    14b2:	8f 93       	push	r24
    14b4:	86 e3       	ldi	r24, 0x36	; 54
    14b6:	91 e4       	ldi	r25, 0x41	; 65
    14b8:	9f 93       	push	r25
    14ba:	8f 93       	push	r24
    14bc:	1f 93       	push	r17
    14be:	0f 93       	push	r16
    14c0:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	89 35       	cpi	r24, 0x59	; 89
    14cc:	91 f4       	brne	.+36     	; 0x14f2 <IntThermistorCal2+0x68>
    14ce:	b8 01       	movw	r22, r16
    14d0:	6d 5f       	subi	r22, 0xFD	; 253
    14d2:	7f 4f       	sbci	r23, 0xFF	; 255
    14d4:	44 e0       	ldi	r20, 0x04	; 4
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	8a e9       	ldi	r24, 0x9A	; 154
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    14e0:	ed ea       	ldi	r30, 0xAD	; 173
    14e2:	f2 e5       	ldi	r31, 0x52	; 82
    14e4:	80 81       	ld	r24, Z
    14e6:	91 81       	ldd	r25, Z+1	; 0x01
    14e8:	81 60       	ori	r24, 0x01	; 1
    14ea:	31 e0       	ldi	r19, 0x01	; 1
    14ec:	83 27       	eor	r24, r19
    14ee:	80 83       	st	Z, r24
    14f0:	91 83       	std	Z+1, r25	; 0x01
    14f2:	25 96       	adiw	r28, 0x05	; 5
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	08 95       	ret

00001502 <IntThermistorCal3>:
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	25 97       	sbiw	r28, 0x05	; 5
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	8c 01       	movw	r16, r24
    1516:	ce 01       	movw	r24, r28
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	9f 93       	push	r25
    151c:	8f 93       	push	r24
    151e:	01 96       	adiw	r24, 0x01	; 1
    1520:	9f 93       	push	r25
    1522:	8f 93       	push	r24
    1524:	81 ee       	ldi	r24, 0xE1	; 225
    1526:	92 e5       	ldi	r25, 0x52	; 82
    1528:	9f 93       	push	r25
    152a:	8f 93       	push	r24
    152c:	85 e4       	ldi	r24, 0x45	; 69
    152e:	91 e4       	ldi	r25, 0x41	; 65
    1530:	9f 93       	push	r25
    1532:	8f 93       	push	r24
    1534:	1f 93       	push	r17
    1536:	0f 93       	push	r16
    1538:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	89 35       	cpi	r24, 0x59	; 89
    1544:	91 f4       	brne	.+36     	; 0x156a <IntThermistorCal3+0x68>
    1546:	b8 01       	movw	r22, r16
    1548:	6d 5f       	subi	r22, 0xFD	; 253
    154a:	7f 4f       	sbci	r23, 0xFF	; 255
    154c:	44 e0       	ldi	r20, 0x04	; 4
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	8e ea       	ldi	r24, 0xAE	; 174
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1558:	ed ea       	ldi	r30, 0xAD	; 173
    155a:	f2 e5       	ldi	r31, 0x52	; 82
    155c:	80 81       	ld	r24, Z
    155e:	91 81       	ldd	r25, Z+1	; 0x01
    1560:	81 60       	ori	r24, 0x01	; 1
    1562:	31 e0       	ldi	r19, 0x01	; 1
    1564:	83 27       	eor	r24, r19
    1566:	80 83       	st	Z, r24
    1568:	91 83       	std	Z+1, r25	; 0x01
    156a:	25 96       	adiw	r28, 0x05	; 5
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	08 95       	ret

0000157a <IntThermistorOffset>:
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	1f 92       	push	r1
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	8c 01       	movw	r16, r24
    158a:	ce 01       	movw	r24, r28
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	9f 93       	push	r25
    1590:	8f 93       	push	r24
    1592:	85 ee       	ldi	r24, 0xE5	; 229
    1594:	92 e5       	ldi	r25, 0x52	; 82
    1596:	9f 93       	push	r25
    1598:	8f 93       	push	r24
    159a:	84 e5       	ldi	r24, 0x54	; 84
    159c:	91 e4       	ldi	r25, 0x41	; 65
    159e:	9f 93       	push	r25
    15a0:	8f 93       	push	r24
    15a2:	1f 93       	push	r17
    15a4:	0f 93       	push	r16
    15a6:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	89 35       	cpi	r24, 0x59	; 89
    15b2:	91 f4       	brne	.+36     	; 0x15d8 <IntThermistorOffset+0x5e>
    15b4:	b8 01       	movw	r22, r16
    15b6:	6d 5f       	subi	r22, 0xFD	; 253
    15b8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ba:	44 e0       	ldi	r20, 0x04	; 4
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	8c e7       	ldi	r24, 0x7C	; 124
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    15c6:	ed ea       	ldi	r30, 0xAD	; 173
    15c8:	f2 e5       	ldi	r31, 0x52	; 82
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	81 60       	ori	r24, 0x01	; 1
    15d0:	31 e0       	ldi	r19, 0x01	; 1
    15d2:	83 27       	eor	r24, r19
    15d4:	80 83       	st	Z, r24
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	0f 90       	pop	r0
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	08 95       	ret

000015e4 <HSThermistorCalA>:
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	1f 92       	push	r1
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	8c 01       	movw	r16, r24
    15f4:	ce 01       	movw	r24, r28
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	9f 93       	push	r25
    15fa:	8f 93       	push	r24
    15fc:	8d ee       	ldi	r24, 0xED	; 237
    15fe:	92 e5       	ldi	r25, 0x52	; 82
    1600:	9f 93       	push	r25
    1602:	8f 93       	push	r24
    1604:	8d e5       	ldi	r24, 0x5D	; 93
    1606:	91 e4       	ldi	r25, 0x41	; 65
    1608:	9f 93       	push	r25
    160a:	8f 93       	push	r24
    160c:	1f 93       	push	r17
    160e:	0f 93       	push	r16
    1610:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	89 35       	cpi	r24, 0x59	; 89
    161c:	91 f4       	brne	.+36     	; 0x1642 <HSThermistorCalA+0x5e>
    161e:	b8 01       	movw	r22, r16
    1620:	6d 5f       	subi	r22, 0xFD	; 253
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	44 e0       	ldi	r20, 0x04	; 4
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	85 e8       	ldi	r24, 0x85	; 133
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1630:	ed ea       	ldi	r30, 0xAD	; 173
    1632:	f2 e5       	ldi	r31, 0x52	; 82
    1634:	82 81       	ldd	r24, Z+2	; 0x02
    1636:	93 81       	ldd	r25, Z+3	; 0x03
    1638:	80 62       	ori	r24, 0x20	; 32
    163a:	30 e2       	ldi	r19, 0x20	; 32
    163c:	83 27       	eor	r24, r19
    163e:	82 83       	std	Z+2, r24	; 0x02
    1640:	93 83       	std	Z+3, r25	; 0x03
    1642:	0f 90       	pop	r0
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	08 95       	ret

0000164e <HSThermistorCalB>:
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	1f 92       	push	r1
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	8c 01       	movw	r16, r24
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	9f 93       	push	r25
    1664:	8f 93       	push	r24
    1666:	8f ee       	ldi	r24, 0xEF	; 239
    1668:	92 e5       	ldi	r25, 0x52	; 82
    166a:	9f 93       	push	r25
    166c:	8f 93       	push	r24
    166e:	86 e6       	ldi	r24, 0x66	; 102
    1670:	91 e4       	ldi	r25, 0x41	; 65
    1672:	9f 93       	push	r25
    1674:	8f 93       	push	r24
    1676:	1f 93       	push	r17
    1678:	0f 93       	push	r16
    167a:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	89 35       	cpi	r24, 0x59	; 89
    1686:	91 f4       	brne	.+36     	; 0x16ac <HSThermistorCalB+0x5e>
    1688:	b8 01       	movw	r22, r16
    168a:	6d 5f       	subi	r22, 0xFD	; 253
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	44 e0       	ldi	r20, 0x04	; 4
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	89 e8       	ldi	r24, 0x89	; 137
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    169a:	ed ea       	ldi	r30, 0xAD	; 173
    169c:	f2 e5       	ldi	r31, 0x52	; 82
    169e:	82 81       	ldd	r24, Z+2	; 0x02
    16a0:	93 81       	ldd	r25, Z+3	; 0x03
    16a2:	80 64       	ori	r24, 0x40	; 64
    16a4:	30 e4       	ldi	r19, 0x40	; 64
    16a6:	83 27       	eor	r24, r19
    16a8:	82 83       	std	Z+2, r24	; 0x02
    16aa:	93 83       	std	Z+3, r25	; 0x03
    16ac:	0f 90       	pop	r0
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	08 95       	ret

000016b8 <HSThermistorCalOne>:
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	1f 92       	push	r1
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	8c 01       	movw	r16, r24
    16c8:	ce 01       	movw	r24, r28
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	9f 93       	push	r25
    16ce:	8f 93       	push	r24
    16d0:	81 ef       	ldi	r24, 0xF1	; 241
    16d2:	92 e5       	ldi	r25, 0x52	; 82
    16d4:	9f 93       	push	r25
    16d6:	8f 93       	push	r24
    16d8:	8f e6       	ldi	r24, 0x6F	; 111
    16da:	91 e4       	ldi	r25, 0x41	; 65
    16dc:	9f 93       	push	r25
    16de:	8f 93       	push	r24
    16e0:	1f 93       	push	r17
    16e2:	0f 93       	push	r16
    16e4:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	89 35       	cpi	r24, 0x59	; 89
    16f0:	91 f4       	brne	.+36     	; 0x1716 <HSThermistorCalOne+0x5e>
    16f2:	b8 01       	movw	r22, r16
    16f4:	6d 5f       	subi	r22, 0xFD	; 253
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	44 e0       	ldi	r20, 0x04	; 4
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	8d e4       	ldi	r24, 0x4D	; 77
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1704:	ed ea       	ldi	r30, 0xAD	; 173
    1706:	f2 e5       	ldi	r31, 0x52	; 82
    1708:	80 81       	ld	r24, Z
    170a:	91 81       	ldd	r25, Z+1	; 0x01
    170c:	81 60       	ori	r24, 0x01	; 1
    170e:	31 e0       	ldi	r19, 0x01	; 1
    1710:	83 27       	eor	r24, r19
    1712:	80 83       	st	Z, r24
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	0f 90       	pop	r0
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	08 95       	ret

00001722 <HSThermistorCal2>:
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	25 97       	sbiw	r28, 0x05	; 5
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	8c 01       	movw	r16, r24
    1736:	ce 01       	movw	r24, r28
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	9f 93       	push	r25
    173c:	8f 93       	push	r24
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	9f 93       	push	r25
    1742:	8f 93       	push	r24
    1744:	85 ef       	ldi	r24, 0xF5	; 245
    1746:	92 e5       	ldi	r25, 0x52	; 82
    1748:	9f 93       	push	r25
    174a:	8f 93       	push	r24
    174c:	89 e7       	ldi	r24, 0x79	; 121
    174e:	91 e4       	ldi	r25, 0x41	; 65
    1750:	9f 93       	push	r25
    1752:	8f 93       	push	r24
    1754:	1f 93       	push	r17
    1756:	0f 93       	push	r16
    1758:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	89 35       	cpi	r24, 0x59	; 89
    1764:	91 f4       	brne	.+36     	; 0x178a <HSThermistorCal2+0x68>
    1766:	b8 01       	movw	r22, r16
    1768:	6d 5f       	subi	r22, 0xFD	; 253
    176a:	7f 4f       	sbci	r23, 0xFF	; 255
    176c:	44 e0       	ldi	r20, 0x04	; 4
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	81 e6       	ldi	r24, 0x61	; 97
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1778:	ed ea       	ldi	r30, 0xAD	; 173
    177a:	f2 e5       	ldi	r31, 0x52	; 82
    177c:	80 81       	ld	r24, Z
    177e:	91 81       	ldd	r25, Z+1	; 0x01
    1780:	81 60       	ori	r24, 0x01	; 1
    1782:	31 e0       	ldi	r19, 0x01	; 1
    1784:	83 27       	eor	r24, r19
    1786:	80 83       	st	Z, r24
    1788:	91 83       	std	Z+1, r25	; 0x01
    178a:	25 96       	adiw	r28, 0x05	; 5
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	08 95       	ret

0000179a <HSThermistorCal3>:
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	25 97       	sbiw	r28, 0x05	; 5
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	8c 01       	movw	r16, r24
    17ae:	ce 01       	movw	r24, r28
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	9f 93       	push	r25
    17b4:	8f 93       	push	r24
    17b6:	01 96       	adiw	r24, 0x01	; 1
    17b8:	9f 93       	push	r25
    17ba:	8f 93       	push	r24
    17bc:	89 ef       	ldi	r24, 0xF9	; 249
    17be:	92 e5       	ldi	r25, 0x52	; 82
    17c0:	9f 93       	push	r25
    17c2:	8f 93       	push	r24
    17c4:	88 e8       	ldi	r24, 0x88	; 136
    17c6:	91 e4       	ldi	r25, 0x41	; 65
    17c8:	9f 93       	push	r25
    17ca:	8f 93       	push	r24
    17cc:	1f 93       	push	r17
    17ce:	0f 93       	push	r16
    17d0:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	89 35       	cpi	r24, 0x59	; 89
    17dc:	91 f4       	brne	.+36     	; 0x1802 <HSThermistorCal3+0x68>
    17de:	b8 01       	movw	r22, r16
    17e0:	6d 5f       	subi	r22, 0xFD	; 253
    17e2:	7f 4f       	sbci	r23, 0xFF	; 255
    17e4:	44 e0       	ldi	r20, 0x04	; 4
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	85 e7       	ldi	r24, 0x75	; 117
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    17f0:	ed ea       	ldi	r30, 0xAD	; 173
    17f2:	f2 e5       	ldi	r31, 0x52	; 82
    17f4:	80 81       	ld	r24, Z
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	81 60       	ori	r24, 0x01	; 1
    17fa:	31 e0       	ldi	r19, 0x01	; 1
    17fc:	83 27       	eor	r24, r19
    17fe:	80 83       	st	Z, r24
    1800:	91 83       	std	Z+1, r25	; 0x01
    1802:	25 96       	adiw	r28, 0x05	; 5
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	08 95       	ret

00001812 <HSThermistorOffset>:
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	1f 92       	push	r1
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	8c 01       	movw	r16, r24
    1822:	ce 01       	movw	r24, r28
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	9f 93       	push	r25
    1828:	8f 93       	push	r24
    182a:	8d ef       	ldi	r24, 0xFD	; 253
    182c:	92 e5       	ldi	r25, 0x52	; 82
    182e:	9f 93       	push	r25
    1830:	8f 93       	push	r24
    1832:	87 e9       	ldi	r24, 0x97	; 151
    1834:	91 e4       	ldi	r25, 0x41	; 65
    1836:	9f 93       	push	r25
    1838:	8f 93       	push	r24
    183a:	1f 93       	push	r17
    183c:	0f 93       	push	r16
    183e:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	89 35       	cpi	r24, 0x59	; 89
    184a:	91 f4       	brne	.+36     	; 0x1870 <HSThermistorOffset+0x5e>
    184c:	b8 01       	movw	r22, r16
    184e:	6d 5f       	subi	r22, 0xFD	; 253
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	44 e0       	ldi	r20, 0x04	; 4
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	83 e4       	ldi	r24, 0x43	; 67
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    185e:	ed ea       	ldi	r30, 0xAD	; 173
    1860:	f2 e5       	ldi	r31, 0x52	; 82
    1862:	80 81       	ld	r24, Z
    1864:	91 81       	ldd	r25, Z+1	; 0x01
    1866:	81 60       	ori	r24, 0x01	; 1
    1868:	31 e0       	ldi	r19, 0x01	; 1
    186a:	83 27       	eor	r24, r19
    186c:	80 83       	st	Z, r24
    186e:	91 83       	std	Z+1, r25	; 0x01
    1870:	0f 90       	pop	r0
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <FarenheitOrCentigrade>:
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	1f 92       	push	r1
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	06 2f       	mov	r16, r22
    188c:	17 2f       	mov	r17, r23
    188e:	9e 01       	movw	r18, r28
    1890:	2f 5f       	subi	r18, 0xFF	; 255
    1892:	3f 4f       	sbci	r19, 0xFF	; 255
    1894:	3f 93       	push	r19
    1896:	2f 93       	push	r18
    1898:	7f 93       	push	r23
    189a:	6f 93       	push	r22
    189c:	20 ea       	ldi	r18, 0xA0	; 160
    189e:	31 e4       	ldi	r19, 0x41	; 65
    18a0:	3f 93       	push	r19
    18a2:	2f 93       	push	r18
    18a4:	9f 93       	push	r25
    18a6:	8f 93       	push	r24
    18a8:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    18ac:	44 e0       	ldi	r20, 0x04	; 4
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	6a ea       	ldi	r22, 0xAA	; 170
    18b2:	71 e4       	ldi	r23, 0x41	; 65
    18b4:	80 2f       	mov	r24, r16
    18b6:	91 2f       	mov	r25, r17
    18b8:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <strncmp>
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	89 2b       	or	r24, r25
    18c2:	51 f0       	breq	.+20     	; 0x18d8 <FarenheitOrCentigrade+0x5c>
    18c4:	e5 e0       	ldi	r30, 0x05	; 5
    18c6:	f3 e5       	ldi	r31, 0x53	; 83
    18c8:	80 81       	ld	r24, Z
    18ca:	91 81       	ldd	r25, Z+1	; 0x01
    18cc:	81 60       	ori	r24, 0x01	; 1
    18ce:	31 e0       	ldi	r19, 0x01	; 1
    18d0:	83 27       	eor	r24, r19
    18d2:	80 83       	st	Z, r24
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	11 c0       	rjmp	.+34     	; 0x18fa <FarenheitOrCentigrade+0x7e>
    18d8:	44 e0       	ldi	r20, 0x04	; 4
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	6f ea       	ldi	r22, 0xAF	; 175
    18de:	71 e4       	ldi	r23, 0x41	; 65
    18e0:	80 2f       	mov	r24, r16
    18e2:	91 2f       	mov	r25, r17
    18e4:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <strncmp>
    18e8:	89 2b       	or	r24, r25
    18ea:	39 f0       	breq	.+14     	; 0x18fa <FarenheitOrCentigrade+0x7e>
    18ec:	e5 e0       	ldi	r30, 0x05	; 5
    18ee:	f3 e5       	ldi	r31, 0x53	; 83
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	81 60       	ori	r24, 0x01	; 1
    18f6:	80 83       	st	Z, r24
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	89 35       	cpi	r24, 0x59	; 89
    18fe:	a1 f4       	brne	.+40     	; 0x1928 <FarenheitOrCentigrade+0xac>
    1900:	8d b1       	in	r24, 0x0d	; 13
    1902:	8f 77       	andi	r24, 0x7F	; 127
    1904:	8d b9       	out	0x0d, r24	; 13
    1906:	0d ea       	ldi	r16, 0xAD	; 173
    1908:	12 e5       	ldi	r17, 0x52	; 82
    190a:	60 91 05 53 	lds	r22, 0x5305	; 0x805305 <cal+0x58>
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 4d 34 	call	0x689a	; 0x689a <FLASH_0_write_eeprom_byte>
    1916:	f8 01       	movw	r30, r16
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	81 60       	ori	r24, 0x01	; 1
    191e:	f1 e0       	ldi	r31, 0x01	; 1
    1920:	8f 27       	eor	r24, r31
    1922:	f8 01       	movw	r30, r16
    1924:	80 83       	st	Z, r24
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	0f 90       	pop	r0
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	1f 91       	pop	r17
    1930:	0f 91       	pop	r16
    1932:	08 95       	ret

00001934 <TemperatureOrResistance>:
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	1f 92       	push	r1
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	06 2f       	mov	r16, r22
    1944:	17 2f       	mov	r17, r23
    1946:	9e 01       	movw	r18, r28
    1948:	2f 5f       	subi	r18, 0xFF	; 255
    194a:	3f 4f       	sbci	r19, 0xFF	; 255
    194c:	3f 93       	push	r19
    194e:	2f 93       	push	r18
    1950:	7f 93       	push	r23
    1952:	6f 93       	push	r22
    1954:	24 eb       	ldi	r18, 0xB4	; 180
    1956:	31 e4       	ldi	r19, 0x41	; 65
    1958:	3f 93       	push	r19
    195a:	2f 93       	push	r18
    195c:	9f 93       	push	r25
    195e:	8f 93       	push	r24
    1960:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1964:	44 e0       	ldi	r20, 0x04	; 4
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	6e eb       	ldi	r22, 0xBE	; 190
    196a:	71 e4       	ldi	r23, 0x41	; 65
    196c:	80 2f       	mov	r24, r16
    196e:	91 2f       	mov	r25, r17
    1970:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <strncmp>
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	89 2b       	or	r24, r25
    197a:	51 f0       	breq	.+20     	; 0x1990 <TemperatureOrResistance+0x5c>
    197c:	e5 e0       	ldi	r30, 0x05	; 5
    197e:	f3 e5       	ldi	r31, 0x53	; 83
    1980:	80 81       	ld	r24, Z
    1982:	91 81       	ldd	r25, Z+1	; 0x01
    1984:	84 60       	ori	r24, 0x04	; 4
    1986:	34 e0       	ldi	r19, 0x04	; 4
    1988:	83 27       	eor	r24, r19
    198a:	80 83       	st	Z, r24
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	11 c0       	rjmp	.+34     	; 0x19b2 <TemperatureOrResistance+0x7e>
    1990:	44 e0       	ldi	r20, 0x04	; 4
    1992:	50 e0       	ldi	r21, 0x00	; 0
    1994:	63 ec       	ldi	r22, 0xC3	; 195
    1996:	71 e4       	ldi	r23, 0x41	; 65
    1998:	80 2f       	mov	r24, r16
    199a:	91 2f       	mov	r25, r17
    199c:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <strncmp>
    19a0:	89 2b       	or	r24, r25
    19a2:	39 f0       	breq	.+14     	; 0x19b2 <TemperatureOrResistance+0x7e>
    19a4:	e5 e0       	ldi	r30, 0x05	; 5
    19a6:	f3 e5       	ldi	r31, 0x53	; 83
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	84 60       	ori	r24, 0x04	; 4
    19ae:	80 83       	st	Z, r24
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	89 35       	cpi	r24, 0x59	; 89
    19b6:	a1 f4       	brne	.+40     	; 0x19e0 <TemperatureOrResistance+0xac>
    19b8:	8d b1       	in	r24, 0x0d	; 13
    19ba:	8f 77       	andi	r24, 0x7F	; 127
    19bc:	8d b9       	out	0x0d, r24	; 13
    19be:	0d ea       	ldi	r16, 0xAD	; 173
    19c0:	12 e5       	ldi	r17, 0x52	; 82
    19c2:	60 91 05 53 	lds	r22, 0x5305	; 0x805305 <cal+0x58>
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 4d 34 	call	0x689a	; 0x689a <FLASH_0_write_eeprom_byte>
    19ce:	f8 01       	movw	r30, r16
    19d0:	80 81       	ld	r24, Z
    19d2:	91 81       	ldd	r25, Z+1	; 0x01
    19d4:	81 60       	ori	r24, 0x01	; 1
    19d6:	f1 e0       	ldi	r31, 0x01	; 1
    19d8:	8f 27       	eor	r24, r31
    19da:	f8 01       	movw	r30, r16
    19dc:	80 83       	st	Z, r24
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	0f 90       	pop	r0
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	08 95       	ret

000019ec <TypeOrResistance>:
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	1f 92       	push	r1
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	06 2f       	mov	r16, r22
    19fc:	17 2f       	mov	r17, r23
    19fe:	9e 01       	movw	r18, r28
    1a00:	2f 5f       	subi	r18, 0xFF	; 255
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	3f 93       	push	r19
    1a06:	2f 93       	push	r18
    1a08:	7f 93       	push	r23
    1a0a:	6f 93       	push	r22
    1a0c:	28 ec       	ldi	r18, 0xC8	; 200
    1a0e:	31 e4       	ldi	r19, 0x41	; 65
    1a10:	3f 93       	push	r19
    1a12:	2f 93       	push	r18
    1a14:	9f 93       	push	r25
    1a16:	8f 93       	push	r24
    1a18:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1a1c:	44 e0       	ldi	r20, 0x04	; 4
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	62 ed       	ldi	r22, 0xD2	; 210
    1a22:	71 e4       	ldi	r23, 0x41	; 65
    1a24:	80 2f       	mov	r24, r16
    1a26:	91 2f       	mov	r25, r17
    1a28:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <strncmp>
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	89 2b       	or	r24, r25
    1a32:	51 f0       	breq	.+20     	; 0x1a48 <TypeOrResistance+0x5c>
    1a34:	e5 e0       	ldi	r30, 0x05	; 5
    1a36:	f3 e5       	ldi	r31, 0x53	; 83
    1a38:	80 81       	ld	r24, Z
    1a3a:	91 81       	ldd	r25, Z+1	; 0x01
    1a3c:	82 60       	ori	r24, 0x02	; 2
    1a3e:	32 e0       	ldi	r19, 0x02	; 2
    1a40:	83 27       	eor	r24, r19
    1a42:	80 83       	st	Z, r24
    1a44:	91 83       	std	Z+1, r25	; 0x01
    1a46:	11 c0       	rjmp	.+34     	; 0x1a6a <TypeOrResistance+0x7e>
    1a48:	44 e0       	ldi	r20, 0x04	; 4
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	67 ed       	ldi	r22, 0xD7	; 215
    1a4e:	71 e4       	ldi	r23, 0x41	; 65
    1a50:	80 2f       	mov	r24, r16
    1a52:	91 2f       	mov	r25, r17
    1a54:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <strncmp>
    1a58:	89 2b       	or	r24, r25
    1a5a:	39 f0       	breq	.+14     	; 0x1a6a <TypeOrResistance+0x7e>
    1a5c:	e5 e0       	ldi	r30, 0x05	; 5
    1a5e:	f3 e5       	ldi	r31, 0x53	; 83
    1a60:	80 81       	ld	r24, Z
    1a62:	91 81       	ldd	r25, Z+1	; 0x01
    1a64:	82 60       	ori	r24, 0x02	; 2
    1a66:	80 83       	st	Z, r24
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	89 35       	cpi	r24, 0x59	; 89
    1a6e:	a1 f4       	brne	.+40     	; 0x1a98 <TypeOrResistance+0xac>
    1a70:	8d b1       	in	r24, 0x0d	; 13
    1a72:	8f 77       	andi	r24, 0x7F	; 127
    1a74:	8d b9       	out	0x0d, r24	; 13
    1a76:	0d ea       	ldi	r16, 0xAD	; 173
    1a78:	12 e5       	ldi	r17, 0x52	; 82
    1a7a:	60 91 05 53 	lds	r22, 0x5305	; 0x805305 <cal+0x58>
    1a7e:	83 e0       	ldi	r24, 0x03	; 3
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 4d 34 	call	0x689a	; 0x689a <FLASH_0_write_eeprom_byte>
    1a86:	f8 01       	movw	r30, r16
    1a88:	80 81       	ld	r24, Z
    1a8a:	91 81       	ldd	r25, Z+1	; 0x01
    1a8c:	81 60       	ori	r24, 0x01	; 1
    1a8e:	f1 e0       	ldi	r31, 0x01	; 1
    1a90:	8f 27       	eor	r24, r31
    1a92:	f8 01       	movw	r30, r16
    1a94:	80 83       	st	Z, r24
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	0f 90       	pop	r0
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	08 95       	ret

00001aa4 <AutoOnOff>:
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	1f 92       	push	r1
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	06 2f       	mov	r16, r22
    1ab4:	17 2f       	mov	r17, r23
    1ab6:	9e 01       	movw	r18, r28
    1ab8:	2f 5f       	subi	r18, 0xFF	; 255
    1aba:	3f 4f       	sbci	r19, 0xFF	; 255
    1abc:	3f 93       	push	r19
    1abe:	2f 93       	push	r18
    1ac0:	7f 93       	push	r23
    1ac2:	6f 93       	push	r22
    1ac4:	2c ed       	ldi	r18, 0xDC	; 220
    1ac6:	31 e4       	ldi	r19, 0x41	; 65
    1ac8:	3f 93       	push	r19
    1aca:	2f 93       	push	r18
    1acc:	9f 93       	push	r25
    1ace:	8f 93       	push	r24
    1ad0:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1ad4:	44 e0       	ldi	r20, 0x04	; 4
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	66 ee       	ldi	r22, 0xE6	; 230
    1ada:	71 e4       	ldi	r23, 0x41	; 65
    1adc:	80 2f       	mov	r24, r16
    1ade:	91 2f       	mov	r25, r17
    1ae0:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <strncmp>
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	89 2b       	or	r24, r25
    1aea:	51 f0       	breq	.+20     	; 0x1b00 <AutoOnOff+0x5c>
    1aec:	e5 e0       	ldi	r30, 0x05	; 5
    1aee:	f3 e5       	ldi	r31, 0x53	; 83
    1af0:	80 81       	ld	r24, Z
    1af2:	91 81       	ldd	r25, Z+1	; 0x01
    1af4:	88 60       	ori	r24, 0x08	; 8
    1af6:	38 e0       	ldi	r19, 0x08	; 8
    1af8:	83 27       	eor	r24, r19
    1afa:	80 83       	st	Z, r24
    1afc:	91 83       	std	Z+1, r25	; 0x01
    1afe:	11 c0       	rjmp	.+34     	; 0x1b22 <AutoOnOff+0x7e>
    1b00:	44 e0       	ldi	r20, 0x04	; 4
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	6b ee       	ldi	r22, 0xEB	; 235
    1b06:	71 e4       	ldi	r23, 0x41	; 65
    1b08:	80 2f       	mov	r24, r16
    1b0a:	91 2f       	mov	r25, r17
    1b0c:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <strncmp>
    1b10:	89 2b       	or	r24, r25
    1b12:	39 f0       	breq	.+14     	; 0x1b22 <AutoOnOff+0x7e>
    1b14:	e5 e0       	ldi	r30, 0x05	; 5
    1b16:	f3 e5       	ldi	r31, 0x53	; 83
    1b18:	80 81       	ld	r24, Z
    1b1a:	91 81       	ldd	r25, Z+1	; 0x01
    1b1c:	88 60       	ori	r24, 0x08	; 8
    1b1e:	80 83       	st	Z, r24
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	89 35       	cpi	r24, 0x59	; 89
    1b26:	a1 f4       	brne	.+40     	; 0x1b50 <AutoOnOff+0xac>
    1b28:	8d b1       	in	r24, 0x0d	; 13
    1b2a:	8f 77       	andi	r24, 0x7F	; 127
    1b2c:	8d b9       	out	0x0d, r24	; 13
    1b2e:	0d ea       	ldi	r16, 0xAD	; 173
    1b30:	12 e5       	ldi	r17, 0x52	; 82
    1b32:	60 91 05 53 	lds	r22, 0x5305	; 0x805305 <cal+0x58>
    1b36:	83 e0       	ldi	r24, 0x03	; 3
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	0e 94 4d 34 	call	0x689a	; 0x689a <FLASH_0_write_eeprom_byte>
    1b3e:	f8 01       	movw	r30, r16
    1b40:	80 81       	ld	r24, Z
    1b42:	91 81       	ldd	r25, Z+1	; 0x01
    1b44:	81 60       	ori	r24, 0x01	; 1
    1b46:	f1 e0       	ldi	r31, 0x01	; 1
    1b48:	8f 27       	eor	r24, r31
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	80 83       	st	Z, r24
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	0f 90       	pop	r0
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	08 95       	ret

00001b5c <SYBTflavorOne>:
    1b5c:	cf 92       	push	r12
    1b5e:	df 92       	push	r13
    1b60:	ef 92       	push	r14
    1b62:	ff 92       	push	r15
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	1f 92       	push	r1
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	7c 01       	movw	r14, r24
    1b74:	c6 2e       	mov	r12, r22
    1b76:	d7 2e       	mov	r13, r23
    1b78:	ce 01       	movw	r24, r28
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	9f 93       	push	r25
    1b7e:	8f 93       	push	r24
    1b80:	0b e0       	ldi	r16, 0x0B	; 11
    1b82:	13 e5       	ldi	r17, 0x53	; 83
    1b84:	1f 93       	push	r17
    1b86:	0f 93       	push	r16
    1b88:	87 e0       	ldi	r24, 0x07	; 7
    1b8a:	93 e5       	ldi	r25, 0x53	; 83
    1b8c:	9f 93       	push	r25
    1b8e:	8f 93       	push	r24
    1b90:	80 ef       	ldi	r24, 0xF0	; 240
    1b92:	91 e4       	ldi	r25, 0x41	; 65
    1b94:	9f 93       	push	r25
    1b96:	8f 93       	push	r24
    1b98:	ff 92       	push	r15
    1b9a:	ef 92       	push	r14
    1b9c:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	83 81       	ldd	r24, Z+3	; 0x03
    1ba4:	8f 93       	push	r24
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	8f 93       	push	r24
    1baa:	81 81       	ldd	r24, Z+1	; 0x01
    1bac:	8f 93       	push	r24
    1bae:	80 81       	ld	r24, Z
    1bb0:	8f 93       	push	r24
    1bb2:	84 e0       	ldi	r24, 0x04	; 4
    1bb4:	92 e4       	ldi	r25, 0x42	; 66
    1bb6:	9f 93       	push	r25
    1bb8:	8f 93       	push	r24
    1bba:	df 92       	push	r13
    1bbc:	cf 92       	push	r12
    1bbe:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	89 35       	cpi	r24, 0x59	; 89
    1bca:	a1 f4       	brne	.+40     	; 0x1bf4 <SYBTflavorOne+0x98>
    1bcc:	8d b1       	in	r24, 0x0d	; 13
    1bce:	8f 77       	andi	r24, 0x7F	; 127
    1bd0:	8d b9       	out	0x0d, r24	; 13
    1bd2:	b7 01       	movw	r22, r14
    1bd4:	6d 5f       	subi	r22, 0xFD	; 253
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	44 e0       	ldi	r20, 0x04	; 4
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	86 e4       	ldi	r24, 0x46	; 70
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1be4:	45 e0       	ldi	r20, 0x05	; 5
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	6c 2d       	mov	r22, r12
    1bea:	7d 2d       	mov	r23, r13
    1bec:	8b e4       	ldi	r24, 0x4B	; 75
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1bf4:	0f 90       	pop	r0
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	08 95       	ret

00001c08 <SYBTflavorTwo>:
    1c08:	cf 92       	push	r12
    1c0a:	df 92       	push	r13
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	1f 92       	push	r1
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	7c 01       	movw	r14, r24
    1c20:	c6 2e       	mov	r12, r22
    1c22:	d7 2e       	mov	r13, r23
    1c24:	ce 01       	movw	r24, r28
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	9f 93       	push	r25
    1c2a:	8f 93       	push	r24
    1c2c:	03 e1       	ldi	r16, 0x13	; 19
    1c2e:	13 e5       	ldi	r17, 0x53	; 83
    1c30:	1f 93       	push	r17
    1c32:	0f 93       	push	r16
    1c34:	8f e0       	ldi	r24, 0x0F	; 15
    1c36:	93 e5       	ldi	r25, 0x53	; 83
    1c38:	9f 93       	push	r25
    1c3a:	8f 93       	push	r24
    1c3c:	89 e0       	ldi	r24, 0x09	; 9
    1c3e:	92 e4       	ldi	r25, 0x42	; 66
    1c40:	9f 93       	push	r25
    1c42:	8f 93       	push	r24
    1c44:	ff 92       	push	r15
    1c46:	ef 92       	push	r14
    1c48:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1c4c:	f8 01       	movw	r30, r16
    1c4e:	83 81       	ldd	r24, Z+3	; 0x03
    1c50:	8f 93       	push	r24
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	8f 93       	push	r24
    1c56:	81 81       	ldd	r24, Z+1	; 0x01
    1c58:	8f 93       	push	r24
    1c5a:	80 81       	ld	r24, Z
    1c5c:	8f 93       	push	r24
    1c5e:	84 e0       	ldi	r24, 0x04	; 4
    1c60:	92 e4       	ldi	r25, 0x42	; 66
    1c62:	9f 93       	push	r25
    1c64:	8f 93       	push	r24
    1c66:	df 92       	push	r13
    1c68:	cf 92       	push	r12
    1c6a:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	89 35       	cpi	r24, 0x59	; 89
    1c76:	a1 f4       	brne	.+40     	; 0x1ca0 <SYBTflavorTwo+0x98>
    1c78:	8d b1       	in	r24, 0x0d	; 13
    1c7a:	8f 77       	andi	r24, 0x7F	; 127
    1c7c:	8d b9       	out	0x0d, r24	; 13
    1c7e:	b7 01       	movw	r22, r14
    1c80:	6d 5f       	subi	r22, 0xFD	; 253
    1c82:	7f 4f       	sbci	r23, 0xFF	; 255
    1c84:	44 e0       	ldi	r20, 0x04	; 4
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	81 e5       	ldi	r24, 0x51	; 81
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1c90:	45 e0       	ldi	r20, 0x05	; 5
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	6c 2d       	mov	r22, r12
    1c96:	7d 2d       	mov	r23, r13
    1c98:	86 e5       	ldi	r24, 0x56	; 86
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1ca0:	0f 90       	pop	r0
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	ff 90       	pop	r15
    1cac:	ef 90       	pop	r14
    1cae:	df 90       	pop	r13
    1cb0:	cf 90       	pop	r12
    1cb2:	08 95       	ret

00001cb4 <SYBTflavorThree>:
    1cb4:	cf 92       	push	r12
    1cb6:	df 92       	push	r13
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	1f 92       	push	r1
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	7c 01       	movw	r14, r24
    1ccc:	c6 2e       	mov	r12, r22
    1cce:	d7 2e       	mov	r13, r23
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	9f 93       	push	r25
    1cd6:	8f 93       	push	r24
    1cd8:	0b e1       	ldi	r16, 0x1B	; 27
    1cda:	13 e5       	ldi	r17, 0x53	; 83
    1cdc:	1f 93       	push	r17
    1cde:	0f 93       	push	r16
    1ce0:	87 e1       	ldi	r24, 0x17	; 23
    1ce2:	93 e5       	ldi	r25, 0x53	; 83
    1ce4:	9f 93       	push	r25
    1ce6:	8f 93       	push	r24
    1ce8:	8d e1       	ldi	r24, 0x1D	; 29
    1cea:	92 e4       	ldi	r25, 0x42	; 66
    1cec:	9f 93       	push	r25
    1cee:	8f 93       	push	r24
    1cf0:	ff 92       	push	r15
    1cf2:	ef 92       	push	r14
    1cf4:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	83 81       	ldd	r24, Z+3	; 0x03
    1cfc:	8f 93       	push	r24
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	8f 93       	push	r24
    1d02:	81 81       	ldd	r24, Z+1	; 0x01
    1d04:	8f 93       	push	r24
    1d06:	80 81       	ld	r24, Z
    1d08:	8f 93       	push	r24
    1d0a:	84 e0       	ldi	r24, 0x04	; 4
    1d0c:	92 e4       	ldi	r25, 0x42	; 66
    1d0e:	9f 93       	push	r25
    1d10:	8f 93       	push	r24
    1d12:	df 92       	push	r13
    1d14:	cf 92       	push	r12
    1d16:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	89 35       	cpi	r24, 0x59	; 89
    1d22:	a1 f4       	brne	.+40     	; 0x1d4c <SYBTflavorThree+0x98>
    1d24:	8d b1       	in	r24, 0x0d	; 13
    1d26:	8f 77       	andi	r24, 0x7F	; 127
    1d28:	8d b9       	out	0x0d, r24	; 13
    1d2a:	b7 01       	movw	r22, r14
    1d2c:	6d 5f       	subi	r22, 0xFD	; 253
    1d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d30:	44 e0       	ldi	r20, 0x04	; 4
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	8c e5       	ldi	r24, 0x5C	; 92
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1d3c:	45 e0       	ldi	r20, 0x05	; 5
    1d3e:	50 e0       	ldi	r21, 0x00	; 0
    1d40:	6c 2d       	mov	r22, r12
    1d42:	7d 2d       	mov	r23, r13
    1d44:	81 e6       	ldi	r24, 0x61	; 97
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1d4c:	0f 90       	pop	r0
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	ff 90       	pop	r15
    1d58:	ef 90       	pop	r14
    1d5a:	df 90       	pop	r13
    1d5c:	cf 90       	pop	r12
    1d5e:	08 95       	ret

00001d60 <SYBTflavorFour>:
    1d60:	cf 92       	push	r12
    1d62:	df 92       	push	r13
    1d64:	ef 92       	push	r14
    1d66:	ff 92       	push	r15
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	1f 92       	push	r1
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	7c 01       	movw	r14, r24
    1d78:	c6 2e       	mov	r12, r22
    1d7a:	d7 2e       	mov	r13, r23
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	01 96       	adiw	r24, 0x01	; 1
    1d80:	9f 93       	push	r25
    1d82:	8f 93       	push	r24
    1d84:	03 e2       	ldi	r16, 0x23	; 35
    1d86:	13 e5       	ldi	r17, 0x53	; 83
    1d88:	1f 93       	push	r17
    1d8a:	0f 93       	push	r16
    1d8c:	8f e1       	ldi	r24, 0x1F	; 31
    1d8e:	93 e5       	ldi	r25, 0x53	; 83
    1d90:	9f 93       	push	r25
    1d92:	8f 93       	push	r24
    1d94:	81 e3       	ldi	r24, 0x31	; 49
    1d96:	92 e4       	ldi	r25, 0x42	; 66
    1d98:	9f 93       	push	r25
    1d9a:	8f 93       	push	r24
    1d9c:	ff 92       	push	r15
    1d9e:	ef 92       	push	r14
    1da0:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1da4:	f8 01       	movw	r30, r16
    1da6:	83 81       	ldd	r24, Z+3	; 0x03
    1da8:	8f 93       	push	r24
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	8f 93       	push	r24
    1dae:	81 81       	ldd	r24, Z+1	; 0x01
    1db0:	8f 93       	push	r24
    1db2:	80 81       	ld	r24, Z
    1db4:	8f 93       	push	r24
    1db6:	84 e0       	ldi	r24, 0x04	; 4
    1db8:	92 e4       	ldi	r25, 0x42	; 66
    1dba:	9f 93       	push	r25
    1dbc:	8f 93       	push	r24
    1dbe:	df 92       	push	r13
    1dc0:	cf 92       	push	r12
    1dc2:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	89 35       	cpi	r24, 0x59	; 89
    1dce:	a1 f4       	brne	.+40     	; 0x1df8 <SYBTflavorFour+0x98>
    1dd0:	8d b1       	in	r24, 0x0d	; 13
    1dd2:	8f 77       	andi	r24, 0x7F	; 127
    1dd4:	8d b9       	out	0x0d, r24	; 13
    1dd6:	b7 01       	movw	r22, r14
    1dd8:	6d 5f       	subi	r22, 0xFD	; 253
    1dda:	7f 4f       	sbci	r23, 0xFF	; 255
    1ddc:	44 e0       	ldi	r20, 0x04	; 4
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	87 e6       	ldi	r24, 0x67	; 103
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1de8:	45 e0       	ldi	r20, 0x05	; 5
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	6c 2d       	mov	r22, r12
    1dee:	7d 2d       	mov	r23, r13
    1df0:	8c e6       	ldi	r24, 0x6C	; 108
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1df8:	0f 90       	pop	r0
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	ff 90       	pop	r15
    1e04:	ef 90       	pop	r14
    1e06:	df 90       	pop	r13
    1e08:	cf 90       	pop	r12
    1e0a:	08 95       	ret

00001e0c <RestoreSafeMode>:
    1e0c:	10 92 a2 54 	sts	0x54A2, r1	; 0x8054a2 <OverrideSafeties>
    1e10:	89 b1       	in	r24, 0x09	; 9
    1e12:	80 61       	ori	r24, 0x10	; 16
    1e14:	89 b9       	out	0x09, r24	; 9
    1e16:	2f ef       	ldi	r18, 0xFF	; 255
    1e18:	89 ef       	ldi	r24, 0xF9	; 249
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	21 50       	subi	r18, 0x01	; 1
    1e1e:	80 40       	sbci	r24, 0x00	; 0
    1e20:	90 40       	sbci	r25, 0x00	; 0
    1e22:	e1 f7       	brne	.-8      	; 0x1e1c <RestoreSafeMode+0x10>
    1e24:	00 c0       	rjmp	.+0      	; 0x1e26 <RestoreSafeMode+0x1a>
    1e26:	00 00       	nop
    1e28:	89 b1       	in	r24, 0x09	; 9
    1e2a:	8f 7e       	andi	r24, 0xEF	; 239
    1e2c:	89 b9       	out	0x09, r24	; 9
    1e2e:	8d b1       	in	r24, 0x0d	; 13
    1e30:	80 68       	ori	r24, 0x80	; 128
    1e32:	8d b9       	out	0x0d, r24	; 13
    1e34:	08 95       	ret

00001e36 <ExitSafeMode>:
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	80 93 a2 54 	sts	0x54A2, r24	; 0x8054a2 <OverrideSafeties>
    1e3c:	89 b1       	in	r24, 0x09	; 9
    1e3e:	80 61       	ori	r24, 0x10	; 16
    1e40:	89 b9       	out	0x09, r24	; 9
    1e42:	2f ef       	ldi	r18, 0xFF	; 255
    1e44:	89 ef       	ldi	r24, 0xF9	; 249
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	21 50       	subi	r18, 0x01	; 1
    1e4a:	80 40       	sbci	r24, 0x00	; 0
    1e4c:	90 40       	sbci	r25, 0x00	; 0
    1e4e:	e1 f7       	brne	.-8      	; 0x1e48 <ExitSafeMode+0x12>
    1e50:	00 c0       	rjmp	.+0      	; 0x1e52 <ExitSafeMode+0x1c>
    1e52:	00 00       	nop
    1e54:	89 b1       	in	r24, 0x09	; 9
    1e56:	8f 7e       	andi	r24, 0xEF	; 239
    1e58:	89 b9       	out	0x09, r24	; 9
    1e5a:	2f ef       	ldi	r18, 0xFF	; 255
    1e5c:	89 ef       	ldi	r24, 0xF9	; 249
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	21 50       	subi	r18, 0x01	; 1
    1e62:	80 40       	sbci	r24, 0x00	; 0
    1e64:	90 40       	sbci	r25, 0x00	; 0
    1e66:	e1 f7       	brne	.-8      	; 0x1e60 <ExitSafeMode+0x2a>
    1e68:	00 c0       	rjmp	.+0      	; 0x1e6a <ExitSafeMode+0x34>
    1e6a:	00 00       	nop
    1e6c:	89 b1       	in	r24, 0x09	; 9
    1e6e:	80 61       	ori	r24, 0x10	; 16
    1e70:	89 b9       	out	0x09, r24	; 9
    1e72:	2f ef       	ldi	r18, 0xFF	; 255
    1e74:	89 ef       	ldi	r24, 0xF9	; 249
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	21 50       	subi	r18, 0x01	; 1
    1e7a:	80 40       	sbci	r24, 0x00	; 0
    1e7c:	90 40       	sbci	r25, 0x00	; 0
    1e7e:	e1 f7       	brne	.-8      	; 0x1e78 <ExitSafeMode+0x42>
    1e80:	00 c0       	rjmp	.+0      	; 0x1e82 <ExitSafeMode+0x4c>
    1e82:	00 00       	nop
    1e84:	89 b1       	in	r24, 0x09	; 9
    1e86:	8f 7e       	andi	r24, 0xEF	; 239
    1e88:	89 b9       	out	0x09, r24	; 9
    1e8a:	08 95       	ret

00001e8c <SleepTimeOne>:
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	1f 92       	push	r1
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	7c 01       	movw	r14, r24
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	9f 93       	push	r25
    1ea6:	8f 93       	push	r24
    1ea8:	07 e2       	ldi	r16, 0x27	; 39
    1eaa:	13 e5       	ldi	r17, 0x53	; 83
    1eac:	1f 93       	push	r17
    1eae:	0f 93       	push	r16
    1eb0:	85 e4       	ldi	r24, 0x45	; 69
    1eb2:	92 e4       	ldi	r25, 0x42	; 66
    1eb4:	9f 93       	push	r25
    1eb6:	8f 93       	push	r24
    1eb8:	ff 92       	push	r15
    1eba:	ef 92       	push	r14
    1ebc:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1ec0:	f8 01       	movw	r30, r16
    1ec2:	20 81       	ld	r18, Z
    1ec4:	31 81       	ldd	r19, Z+1	; 0x01
    1ec6:	42 81       	ldd	r20, Z+2	; 0x02
    1ec8:	53 81       	ldd	r21, Z+3	; 0x03
    1eca:	a0 e1       	ldi	r26, 0x10	; 16
    1ecc:	b7 e2       	ldi	r27, 0x27	; 39
    1ece:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__muluhisi3>
    1ed2:	60 83       	st	Z, r22
    1ed4:	71 83       	std	Z+1, r23	; 0x01
    1ed6:	82 83       	std	Z+2, r24	; 0x02
    1ed8:	93 83       	std	Z+3, r25	; 0x03
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	89 35       	cpi	r24, 0x59	; 89
    1ee2:	49 f4       	brne	.+18     	; 0x1ef6 <SleepTimeOne+0x6a>
    1ee4:	b7 01       	movw	r22, r14
    1ee6:	6d 5f       	subi	r22, 0xFD	; 253
    1ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eea:	42 e0       	ldi	r20, 0x02	; 2
    1eec:	50 e0       	ldi	r21, 0x00	; 0
    1eee:	84 e3       	ldi	r24, 0x34	; 52
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1ef6:	0f 90       	pop	r0
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	1f 91       	pop	r17
    1efe:	0f 91       	pop	r16
    1f00:	ff 90       	pop	r15
    1f02:	ef 90       	pop	r14
    1f04:	08 95       	ret

00001f06 <SleepTimeTwo>:
    1f06:	ef 92       	push	r14
    1f08:	ff 92       	push	r15
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	1f 92       	push	r1
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	7c 01       	movw	r14, r24
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	9f 93       	push	r25
    1f20:	8f 93       	push	r24
    1f22:	0b e2       	ldi	r16, 0x2B	; 43
    1f24:	13 e5       	ldi	r17, 0x53	; 83
    1f26:	1f 93       	push	r17
    1f28:	0f 93       	push	r16
    1f2a:	8f e4       	ldi	r24, 0x4F	; 79
    1f2c:	92 e4       	ldi	r25, 0x42	; 66
    1f2e:	9f 93       	push	r25
    1f30:	8f 93       	push	r24
    1f32:	ff 92       	push	r15
    1f34:	ef 92       	push	r14
    1f36:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	20 81       	ld	r18, Z
    1f3e:	31 81       	ldd	r19, Z+1	; 0x01
    1f40:	42 81       	ldd	r20, Z+2	; 0x02
    1f42:	53 81       	ldd	r21, Z+3	; 0x03
    1f44:	a0 e1       	ldi	r26, 0x10	; 16
    1f46:	b7 e2       	ldi	r27, 0x27	; 39
    1f48:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__muluhisi3>
    1f4c:	60 83       	st	Z, r22
    1f4e:	71 83       	std	Z+1, r23	; 0x01
    1f50:	82 83       	std	Z+2, r24	; 0x02
    1f52:	93 83       	std	Z+3, r25	; 0x03
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	89 35       	cpi	r24, 0x59	; 89
    1f5c:	49 f4       	brne	.+18     	; 0x1f70 <SleepTimeTwo+0x6a>
    1f5e:	b7 01       	movw	r22, r14
    1f60:	6d 5f       	subi	r22, 0xFD	; 253
    1f62:	7f 4f       	sbci	r23, 0xFF	; 255
    1f64:	42 e0       	ldi	r20, 0x02	; 2
    1f66:	50 e0       	ldi	r21, 0x00	; 0
    1f68:	87 e3       	ldi	r24, 0x37	; 55
    1f6a:	91 e0       	ldi	r25, 0x01	; 1
    1f6c:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1f70:	0f 90       	pop	r0
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	ff 90       	pop	r15
    1f7c:	ef 90       	pop	r14
    1f7e:	08 95       	ret

00001f80 <SleepTimeThree>:
    1f80:	ef 92       	push	r14
    1f82:	ff 92       	push	r15
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	1f 92       	push	r1
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	7c 01       	movw	r14, r24
    1f94:	ce 01       	movw	r24, r28
    1f96:	01 96       	adiw	r24, 0x01	; 1
    1f98:	9f 93       	push	r25
    1f9a:	8f 93       	push	r24
    1f9c:	0f e2       	ldi	r16, 0x2F	; 47
    1f9e:	13 e5       	ldi	r17, 0x53	; 83
    1fa0:	1f 93       	push	r17
    1fa2:	0f 93       	push	r16
    1fa4:	89 e5       	ldi	r24, 0x59	; 89
    1fa6:	92 e4       	ldi	r25, 0x42	; 66
    1fa8:	9f 93       	push	r25
    1faa:	8f 93       	push	r24
    1fac:	ff 92       	push	r15
    1fae:	ef 92       	push	r14
    1fb0:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    1fb4:	f8 01       	movw	r30, r16
    1fb6:	20 81       	ld	r18, Z
    1fb8:	31 81       	ldd	r19, Z+1	; 0x01
    1fba:	42 81       	ldd	r20, Z+2	; 0x02
    1fbc:	53 81       	ldd	r21, Z+3	; 0x03
    1fbe:	a0 e1       	ldi	r26, 0x10	; 16
    1fc0:	b7 e2       	ldi	r27, 0x27	; 39
    1fc2:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__muluhisi3>
    1fc6:	60 83       	st	Z, r22
    1fc8:	71 83       	std	Z+1, r23	; 0x01
    1fca:	82 83       	std	Z+2, r24	; 0x02
    1fcc:	93 83       	std	Z+3, r25	; 0x03
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	89 35       	cpi	r24, 0x59	; 89
    1fd6:	49 f4       	brne	.+18     	; 0x1fea <SleepTimeThree+0x6a>
    1fd8:	b7 01       	movw	r22, r14
    1fda:	6d 5f       	subi	r22, 0xFD	; 253
    1fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fde:	42 e0       	ldi	r20, 0x02	; 2
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	88 e1       	ldi	r24, 0x18	; 24
    1fe4:	91 e0       	ldi	r25, 0x01	; 1
    1fe6:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    1fea:	0f 90       	pop	r0
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	ff 90       	pop	r15
    1ff6:	ef 90       	pop	r14
    1ff8:	08 95       	ret

00001ffa <SleepDisable>:
    1ffa:	45 ea       	ldi	r20, 0xA5	; 165
    1ffc:	54 e5       	ldi	r21, 0x54	; 84
    1ffe:	60 e2       	ldi	r22, 0x20	; 32
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
    200a:	45 ea       	ldi	r20, 0xA5	; 165
    200c:	54 e5       	ldi	r21, 0x54	; 84
    200e:	68 e0       	ldi	r22, 0x08	; 8
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
    201a:	08 95       	ret

0000201c <SleepRestore>:
    201c:	45 ea       	ldi	r20, 0xA5	; 165
    201e:	54 e5       	ldi	r21, 0x54	; 84
    2020:	60 e2       	ldi	r22, 0x20	; 32
    2022:	70 e0       	ldi	r23, 0x00	; 0
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 02 23 	call	0x4604	; 0x4604 <NewClearUnfinishedBusiness>
    202c:	45 ea       	ldi	r20, 0xA5	; 165
    202e:	54 e5       	ldi	r21, 0x54	; 84
    2030:	68 e0       	ldi	r22, 0x08	; 8
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
    203c:	08 95       	ret

0000203e <EnterDemoMode>:
    203e:	45 ea       	ldi	r20, 0xA5	; 165
    2040:	54 e5       	ldi	r21, 0x54	; 84
    2042:	60 e1       	ldi	r22, 0x10	; 16
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
    204e:	45 ea       	ldi	r20, 0xA5	; 165
    2050:	54 e5       	ldi	r21, 0x54	; 84
    2052:	68 e0       	ldi	r22, 0x08	; 8
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
    205e:	85 b1       	in	r24, 0x05	; 5
    2060:	80 61       	ori	r24, 0x10	; 16
    2062:	85 b9       	out	0x05, r24	; 5
    2064:	85 b1       	in	r24, 0x05	; 5
    2066:	80 62       	ori	r24, 0x20	; 32
    2068:	85 b9       	out	0x05, r24	; 5
    206a:	08 95       	ret

0000206c <ExitDemoMode>:
    206c:	45 ea       	ldi	r20, 0xA5	; 165
    206e:	54 e5       	ldi	r21, 0x54	; 84
    2070:	68 e0       	ldi	r22, 0x08	; 8
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
    207c:	45 ea       	ldi	r20, 0xA5	; 165
    207e:	54 e5       	ldi	r21, 0x54	; 84
    2080:	60 e1       	ldi	r22, 0x10	; 16
    2082:	70 e0       	ldi	r23, 0x00	; 0
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	0e 94 02 23 	call	0x4604	; 0x4604 <NewClearUnfinishedBusiness>
    208c:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <RestoreSleepSettings>
    2090:	08 95       	ret

00002092 <SendCalDataToApp>:
    2092:	45 ea       	ldi	r20, 0xA5	; 165
    2094:	54 e5       	ldi	r21, 0x54	; 84
    2096:	62 e0       	ldi	r22, 0x02	; 2
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
    20a2:	08 95       	ret

000020a4 <ReceiveBeepCommand>:
    20a4:	45 ea       	ldi	r20, 0xA5	; 165
    20a6:	54 e5       	ldi	r21, 0x54	; 84
    20a8:	68 e0       	ldi	r22, 0x08	; 8
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
    20b4:	08 95       	ret

000020b6 <SetBluetoothName>:
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	ec 01       	movw	r28, r24
    20c0:	8b 01       	movw	r16, r22
    20c2:	87 e8       	ldi	r24, 0x87	; 135
    20c4:	94 e5       	ldi	r25, 0x54	; 84
    20c6:	9f 93       	push	r25
    20c8:	8f 93       	push	r24
    20ca:	83 e6       	ldi	r24, 0x63	; 99
    20cc:	92 e4       	ldi	r25, 0x42	; 66
    20ce:	9f 93       	push	r25
    20d0:	8f 93       	push	r24
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    20da:	67 e8       	ldi	r22, 0x87	; 135
    20dc:	74 e5       	ldi	r23, 0x54	; 84
    20de:	c8 01       	movw	r24, r16
    20e0:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <strcpy>
    20e4:	be 01       	movw	r22, r28
    20e6:	6d 5f       	subi	r22, 0xFD	; 253
    20e8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ea:	49 e1       	ldi	r20, 0x19	; 25
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	83 e2       	ldi	r24, 0x23	; 35
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    20f6:	61 e3       	ldi	r22, 0x31	; 49
    20f8:	84 e4       	ldi	r24, 0x44	; 68
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 4d 34 	call	0x689a	; 0x689a <FLASH_0_write_eeprom_byte>
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	08 95       	ret

00002116 <SetSYBTidentTolerance>:
    2116:	0f 93       	push	r16
    2118:	1f 93       	push	r17
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	1f 92       	push	r1
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	8c 01       	movw	r16, r24
    2126:	ce 01       	movw	r24, r28
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	9f 93       	push	r25
    212c:	8f 93       	push	r24
    212e:	83 e3       	ldi	r24, 0x33	; 51
    2130:	93 e5       	ldi	r25, 0x53	; 83
    2132:	9f 93       	push	r25
    2134:	8f 93       	push	r24
    2136:	8b e6       	ldi	r24, 0x6B	; 107
    2138:	92 e4       	ldi	r25, 0x42	; 66
    213a:	9f 93       	push	r25
    213c:	8f 93       	push	r24
    213e:	1f 93       	push	r17
    2140:	0f 93       	push	r16
    2142:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	89 35       	cpi	r24, 0x59	; 89
    214e:	49 f4       	brne	.+18     	; 0x2162 <SetSYBTidentTolerance+0x4c>
    2150:	b8 01       	movw	r22, r16
    2152:	6d 5f       	subi	r22, 0xFD	; 253
    2154:	7f 4f       	sbci	r23, 0xFF	; 255
    2156:	42 e0       	ldi	r20, 0x02	; 2
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	8a e3       	ldi	r24, 0x3A	; 58
    215c:	91 e0       	ldi	r25, 0x01	; 1
    215e:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    2162:	0f 90       	pop	r0
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	1f 91       	pop	r17
    216a:	0f 91       	pop	r16
    216c:	08 95       	ret

0000216e <EraseEEPROM>:
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	2a 97       	sbiw	r28, 0x0a	; 10
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	4a e0       	ldi	r20, 0x0A	; 10
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	6f ef       	ldi	r22, 0xFF	; 255
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	ce 01       	movw	r24, r28
    2186:	01 96       	adiw	r24, 0x01	; 1
    2188:	0e 94 3f 3d 	call	0x7a7e	; 0x7a7e <memset>
    218c:	47 e0       	ldi	r20, 0x07	; 7
    218e:	50 e0       	ldi	r21, 0x00	; 0
    2190:	be 01       	movw	r22, r28
    2192:	6f 5f       	subi	r22, 0xFF	; 255
    2194:	7f 4f       	sbci	r23, 0xFF	; 255
    2196:	84 e3       	ldi	r24, 0x34	; 52
    2198:	91 e0       	ldi	r25, 0x01	; 1
    219a:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    219e:	44 e0       	ldi	r20, 0x04	; 4
    21a0:	50 e0       	ldi	r21, 0x00	; 0
    21a2:	be 01       	movw	r22, r28
    21a4:	6f 5f       	subi	r22, 0xFF	; 255
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	88 e1       	ldi	r24, 0x18	; 24
    21aa:	91 e0       	ldi	r25, 0x01	; 1
    21ac:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    21b0:	2a 96       	adiw	r28, 0x0a	; 10
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	08 95       	ret

000021bc <SetLoadTestToleranceA>:
    21bc:	0f 93       	push	r16
    21be:	1f 93       	push	r17
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	1f 92       	push	r1
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	8c 01       	movw	r16, r24
    21cc:	ce 01       	movw	r24, r28
    21ce:	01 96       	adiw	r24, 0x01	; 1
    21d0:	9f 93       	push	r25
    21d2:	8f 93       	push	r24
    21d4:	85 e3       	ldi	r24, 0x35	; 53
    21d6:	93 e5       	ldi	r25, 0x53	; 83
    21d8:	9f 93       	push	r25
    21da:	8f 93       	push	r24
    21dc:	85 e7       	ldi	r24, 0x75	; 117
    21de:	92 e4       	ldi	r25, 0x42	; 66
    21e0:	9f 93       	push	r25
    21e2:	8f 93       	push	r24
    21e4:	1f 93       	push	r17
    21e6:	0f 93       	push	r16
    21e8:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	89 35       	cpi	r24, 0x59	; 89
    21f4:	49 f4       	brne	.+18     	; 0x2208 <SetLoadTestToleranceA+0x4c>
    21f6:	b8 01       	movw	r22, r16
    21f8:	6d 5f       	subi	r22, 0xFD	; 253
    21fa:	7f 4f       	sbci	r23, 0xFF	; 255
    21fc:	43 e0       	ldi	r20, 0x03	; 3
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	8d e3       	ldi	r24, 0x3D	; 61
    2202:	91 e0       	ldi	r25, 0x01	; 1
    2204:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    2208:	0f 90       	pop	r0
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	1f 91       	pop	r17
    2210:	0f 91       	pop	r16
    2212:	08 95       	ret

00002214 <SetLoadTestToleranceB>:
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	1f 92       	push	r1
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	8c 01       	movw	r16, r24
    2224:	ce 01       	movw	r24, r28
    2226:	01 96       	adiw	r24, 0x01	; 1
    2228:	9f 93       	push	r25
    222a:	8f 93       	push	r24
    222c:	87 e3       	ldi	r24, 0x37	; 55
    222e:	93 e5       	ldi	r25, 0x53	; 83
    2230:	9f 93       	push	r25
    2232:	8f 93       	push	r24
    2234:	8f e7       	ldi	r24, 0x7F	; 127
    2236:	92 e4       	ldi	r25, 0x42	; 66
    2238:	9f 93       	push	r25
    223a:	8f 93       	push	r24
    223c:	1f 93       	push	r17
    223e:	0f 93       	push	r16
    2240:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	89 35       	cpi	r24, 0x59	; 89
    224c:	49 f4       	brne	.+18     	; 0x2260 <SetLoadTestToleranceB+0x4c>
    224e:	b8 01       	movw	r22, r16
    2250:	6d 5f       	subi	r22, 0xFD	; 253
    2252:	7f 4f       	sbci	r23, 0xFF	; 255
    2254:	42 e0       	ldi	r20, 0x02	; 2
    2256:	50 e0       	ldi	r21, 0x00	; 0
    2258:	80 e4       	ldi	r24, 0x40	; 64
    225a:	91 e0       	ldi	r25, 0x01	; 1
    225c:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
    2260:	0f 90       	pop	r0
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	1f 91       	pop	r17
    2268:	0f 91       	pop	r16
    226a:	08 95       	ret

0000226c <EchoOne>:
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	1f 92       	push	r1
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	9e 01       	movw	r18, r28
    2278:	2f 5f       	subi	r18, 0xFF	; 255
    227a:	3f 4f       	sbci	r19, 0xFF	; 255
    227c:	3f 93       	push	r19
    227e:	2f 93       	push	r18
    2280:	29 e8       	ldi	r18, 0x89	; 137
    2282:	32 e4       	ldi	r19, 0x42	; 66
    2284:	3f 93       	push	r19
    2286:	2f 93       	push	r18
    2288:	9f 93       	push	r25
    228a:	8f 93       	push	r24
    228c:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	89 35       	cpi	r24, 0x59	; 89
    22a0:	41 f4       	brne	.+16     	; 0x22b2 <EchoOne+0x46>
    22a2:	45 ea       	ldi	r20, 0xA5	; 165
    22a4:	54 e5       	ldi	r21, 0x54	; 84
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	0e 94 02 23 	call	0x4604	; 0x4604 <NewClearUnfinishedBusiness>
    22b2:	0f 90       	pop	r0
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	08 95       	ret

000022ba <EchoTwo>:
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	1f 92       	push	r1
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	9e 01       	movw	r18, r28
    22c6:	2f 5f       	subi	r18, 0xFF	; 255
    22c8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ca:	3f 93       	push	r19
    22cc:	2f 93       	push	r18
    22ce:	2f e8       	ldi	r18, 0x8F	; 143
    22d0:	32 e4       	ldi	r19, 0x42	; 66
    22d2:	3f 93       	push	r19
    22d4:	2f 93       	push	r18
    22d6:	9f 93       	push	r25
    22d8:	8f 93       	push	r24
    22da:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	89 35       	cpi	r24, 0x59	; 89
    22ee:	41 f4       	brne	.+16     	; 0x2300 <EchoTwo+0x46>
    22f0:	45 ea       	ldi	r20, 0xA5	; 165
    22f2:	54 e5       	ldi	r21, 0x54	; 84
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	70 e0       	ldi	r23, 0x00	; 0
    22f8:	88 e0       	ldi	r24, 0x08	; 8
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	0e 94 02 23 	call	0x4604	; 0x4604 <NewClearUnfinishedBusiness>
    2300:	0f 90       	pop	r0
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	08 95       	ret

00002308 <EchoThree>:
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	1f 92       	push	r1
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	9e 01       	movw	r18, r28
    2314:	2f 5f       	subi	r18, 0xFF	; 255
    2316:	3f 4f       	sbci	r19, 0xFF	; 255
    2318:	3f 93       	push	r19
    231a:	2f 93       	push	r18
    231c:	25 e9       	ldi	r18, 0x95	; 149
    231e:	32 e4       	ldi	r19, 0x42	; 66
    2320:	3f 93       	push	r19
    2322:	2f 93       	push	r18
    2324:	9f 93       	push	r25
    2326:	8f 93       	push	r24
    2328:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	08 95       	ret

00002340 <LXvoltageCal>:
	//char YesOrNo;
	//sscanf(buffer,"CA5%d %c",&cal.Nine_V_ad_cal,&YesOrNo);
	//if(YesOrNo == ASCII_Y )FLASH_0_write_eeprom_block(EEPROM_LXbattery_AD_Cal,buffer+3,2);
}
//----------------------------------------------------------------------------------------------------------------------
void LXvoltageCal(char buffer[30]){	
    2340:	0f 93       	push	r16
    2342:	1f 93       	push	r17
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	1f 92       	push	r1
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	8c 01       	movw	r16, r24
	char YesOrNo;
	sscanf(buffer,"LXB%d %c",&cal.LXvoltage_cal,&YesOrNo);
    2350:	ce 01       	movw	r24, r28
    2352:	01 96       	adiw	r24, 0x01	; 1
    2354:	9f 93       	push	r25
    2356:	8f 93       	push	r24
    2358:	83 e4       	ldi	r24, 0x43	; 67
    235a:	93 e5       	ldi	r25, 0x53	; 83
    235c:	9f 93       	push	r25
    235e:	8f 93       	push	r24
    2360:	8d ea       	ldi	r24, 0xAD	; 173
    2362:	92 e4       	ldi	r25, 0x42	; 66
    2364:	9f 93       	push	r25
    2366:	8f 93       	push	r24
    2368:	1f 93       	push	r17
    236a:	0f 93       	push	r16
    236c:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	if(YesOrNo == ASCII_Y )FLASH_0_write_eeprom_block(EEPROM_LXbattery_AD_Cal,buffer+3,4);
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	89 35       	cpi	r24, 0x59	; 89
    2378:	49 f4       	brne	.+18     	; 0x238c <LXvoltageCal+0x4c>
    237a:	b8 01       	movw	r22, r16
    237c:	6d 5f       	subi	r22, 0xFD	; 253
    237e:	7f 4f       	sbci	r23, 0xFF	; 255
    2380:	44 e0       	ldi	r20, 0x04	; 4
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	8a ee       	ldi	r24, 0xEA	; 234
    2386:	91 e0       	ldi	r25, 0x01	; 1
    2388:	0e 94 70 34 	call	0x68e0	; 0x68e0 <FLASH_0_write_eeprom_block>
}
    238c:	0f 90       	pop	r0
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	1f 91       	pop	r17
    2394:	0f 91       	pop	r16
    2396:	08 95       	ret

00002398 <LightLoadOn>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    2398:	85 b1       	in	r24, 0x05	; 5
    239a:	80 62       	ori	r24, 0x20	; 32
    239c:	85 b9       	out	0x05, r24	; 5
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
    239e:	8d b1       	in	r24, 0x0d	; 13
    23a0:	8f 77       	andi	r24, 0x7F	; 127
    23a2:	8d b9       	out	0x0d, r24	; 13
    23a4:	08 95       	ret

000023a6 <LightLoadOff>:
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    23a6:	85 b1       	in	r24, 0x05	; 5
    23a8:	8f 7d       	andi	r24, 0xDF	; 223
    23aa:	85 b9       	out	0x05, r24	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
    23ac:	8d b1       	in	r24, 0x0d	; 13
    23ae:	80 68       	ori	r24, 0x80	; 128
    23b0:	8d b9       	out	0x0d, r24	; 13
    23b2:	08 95       	ret

000023b4 <identify_commands>:
identify_commands(blue_buffer);	//see if the received characters match one of the 3 letter commands below
//BlueLED_set_level(true);
return;
}
//-----------------------------------------------------------------------------------------------------------------------------
void identify_commands(uint8_t buffer[30]){
    23b4:	ef 92       	push	r14
    23b6:	ff 92       	push	r15
    23b8:	0f 93       	push	r16
    23ba:	1f 93       	push	r17
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	6e 97       	sbiw	r28, 0x1e	; 30
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	8c 01       	movw	r16, r24
	char string[30];
	memset(string,0,30*sizeof(char));
    23cc:	fe 01       	movw	r30, r28
    23ce:	31 96       	adiw	r30, 0x01	; 1
    23d0:	8e e1       	ldi	r24, 0x1E	; 30
    23d2:	df 01       	movw	r26, r30
    23d4:	1d 92       	st	X+, r1
    23d6:	8a 95       	dec	r24
    23d8:	e9 f7       	brne	.-6      	; 0x23d4 <identify_commands+0x20>
//.1.........................................LED test on--------------------------------------------Looks for "RLY"-------------
	if (buffer[0] == ASCII_R && buffer[1] == ASCII_L && buffer[2] == ASCII_Y) ATTINY_PA6_set_level(true);
    23da:	f8 01       	movw	r30, r16
    23dc:	80 81       	ld	r24, Z
    23de:	82 35       	cpi	r24, 0x52	; 82
    23e0:	49 f4       	brne	.+18     	; 0x23f4 <identify_commands+0x40>
    23e2:	81 81       	ldd	r24, Z+1	; 0x01
    23e4:	8c 34       	cpi	r24, 0x4C	; 76
    23e6:	31 f4       	brne	.+12     	; 0x23f4 <identify_commands+0x40>
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	89 35       	cpi	r24, 0x59	; 89
    23ec:	19 f4       	brne	.+6      	; 0x23f4 <identify_commands+0x40>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    23ee:	81 b1       	in	r24, 0x01	; 1
    23f0:	80 64       	ori	r24, 0x40	; 64
    23f2:	81 b9       	out	0x01, r24	; 1
//.1a.........................................LED test on--------------------------------------------Looks for "RLN"-------------
if (buffer[0] == ASCII_R && buffer[1] == ASCII_L && buffer[2] == ASCII_N) ATTINY_PA6_set_level(false);	
    23f4:	d8 01       	movw	r26, r16
    23f6:	8c 91       	ld	r24, X
    23f8:	82 35       	cpi	r24, 0x52	; 82
    23fa:	69 f4       	brne	.+26     	; 0x2416 <identify_commands+0x62>
    23fc:	11 96       	adiw	r26, 0x01	; 1
    23fe:	9c 91       	ld	r25, X
    2400:	11 97       	sbiw	r26, 0x01	; 1
    2402:	9c 34       	cpi	r25, 0x4C	; 76
    2404:	41 f4       	brne	.+16     	; 0x2416 <identify_commands+0x62>
    2406:	12 96       	adiw	r26, 0x02	; 2
    2408:	9c 91       	ld	r25, X
    240a:	9e 34       	cpi	r25, 0x4E	; 78
    240c:	21 f4       	brne	.+8      	; 0x2416 <identify_commands+0x62>
	} else {
		VPORTA.OUT &= ~(1 << pin);
    240e:	81 b1       	in	r24, 0x01	; 1
    2410:	8f 7b       	andi	r24, 0xBF	; 191
    2412:	81 b9       	out	0x01, r24	; 1
    2414:	86 c4       	rjmp	.+2316   	; 0x2d22 <identify_commands+0x96e>
//.2.........................................Blank Display On----------------------------------------Looks for "CPY"-------------
else if (buffer[0] == ASCII_C && buffer[1] == ASCII_P && buffer[2] == ASCII_Y){
    2416:	83 34       	cpi	r24, 0x43	; 67
    2418:	71 f4       	brne	.+28     	; 0x2436 <identify_commands+0x82>
    241a:	f8 01       	movw	r30, r16
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	90 35       	cpi	r25, 0x50	; 80
    2420:	51 f4       	brne	.+20     	; 0x2436 <identify_commands+0x82>
    2422:	92 81       	ldd	r25, Z+2	; 0x02
    2424:	99 35       	cpi	r25, 0x59	; 89
    2426:	39 f4       	brne	.+14     	; 0x2436 <identify_commands+0x82>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    2428:	81 b1       	in	r24, 0x01	; 1
    242a:	80 61       	ori	r24, 0x10	; 16
    242c:	81 b9       	out	0x01, r24	; 1
    242e:	81 b1       	in	r24, 0x01	; 1
    2430:	80 62       	ori	r24, 0x20	; 32
    2432:	81 b9       	out	0x01, r24	; 1
    2434:	76 c4       	rjmp	.+2284   	; 0x2d22 <identify_commands+0x96e>
	MarchingAnts_set_level(true);
	ReverseMarchingAnts_set_level(true);
}
//.2.........................................Blank Display Off---------------------------------------Looks for "CPN"-------------
	else if (buffer[0] == ASCII_C && buffer[1] == ASCII_P && buffer[2] == ASCII_N){
    2436:	83 34       	cpi	r24, 0x43	; 67
    2438:	89 f4       	brne	.+34     	; 0x245c <identify_commands+0xa8>
    243a:	d8 01       	movw	r26, r16
    243c:	11 96       	adiw	r26, 0x01	; 1
    243e:	9c 91       	ld	r25, X
    2440:	11 97       	sbiw	r26, 0x01	; 1
    2442:	90 35       	cpi	r25, 0x50	; 80
    2444:	59 f4       	brne	.+22     	; 0x245c <identify_commands+0xa8>
    2446:	12 96       	adiw	r26, 0x02	; 2
    2448:	9c 91       	ld	r25, X
    244a:	9e 34       	cpi	r25, 0x4E	; 78
    244c:	39 f4       	brne	.+14     	; 0x245c <identify_commands+0xa8>
	} else {
		VPORTA.OUT &= ~(1 << pin);
    244e:	81 b1       	in	r24, 0x01	; 1
    2450:	8f 7e       	andi	r24, 0xEF	; 239
    2452:	81 b9       	out	0x01, r24	; 1
    2454:	81 b1       	in	r24, 0x01	; 1
    2456:	8f 7d       	andi	r24, 0xDF	; 223
    2458:	81 b9       	out	0x01, r24	; 1
    245a:	63 c4       	rjmp	.+2246   	; 0x2d22 <identify_commands+0x96e>
	MarchingAnts_set_level(false);
	ReverseMarchingAnts_set_level(false);	
}
//.3.........................................Sets SYBT voltage AD calibration------------------------Looks for "CA1"-------------
	else if (buffer[0] == ASCII_C && buffer[1] == ASCII_A && buffer[2] == ASCII_1) SYBTvoltsADcal(buffer);	
    245c:	83 34       	cpi	r24, 0x43	; 67
    245e:	59 f4       	brne	.+22     	; 0x2476 <identify_commands+0xc2>
    2460:	f8 01       	movw	r30, r16
    2462:	91 81       	ldd	r25, Z+1	; 0x01
    2464:	91 34       	cpi	r25, 0x41	; 65
    2466:	39 f4       	brne	.+14     	; 0x2476 <identify_commands+0xc2>
    2468:	92 81       	ldd	r25, Z+2	; 0x02
    246a:	91 33       	cpi	r25, 0x31	; 49
    246c:	21 f4       	brne	.+8      	; 0x2476 <identify_commands+0xc2>
    246e:	c8 01       	movw	r24, r16
    2470:	0e 94 19 07 	call	0xe32	; 0xe32 <SYBTvoltsADcal>
    2474:	56 c4       	rjmp	.+2220   	; 0x2d22 <identify_commands+0x96e>
//.4.........................................Sets Load voltage AD calibration------------------------Looks for "CA2"-------------
	else if (buffer[0] == ASCII_C && buffer[1] == ASCII_A && buffer[2] == ASCII_2) LoadvoltsADcal(buffer);			
    2476:	83 34       	cpi	r24, 0x43	; 67
    2478:	71 f4       	brne	.+28     	; 0x2496 <identify_commands+0xe2>
    247a:	d8 01       	movw	r26, r16
    247c:	11 96       	adiw	r26, 0x01	; 1
    247e:	9c 91       	ld	r25, X
    2480:	11 97       	sbiw	r26, 0x01	; 1
    2482:	91 34       	cpi	r25, 0x41	; 65
    2484:	41 f4       	brne	.+16     	; 0x2496 <identify_commands+0xe2>
    2486:	12 96       	adiw	r26, 0x02	; 2
    2488:	9c 91       	ld	r25, X
    248a:	92 33       	cpi	r25, 0x32	; 50
    248c:	21 f4       	brne	.+8      	; 0x2496 <identify_commands+0xe2>
    248e:	c8 01       	movw	r24, r16
    2490:	0e 94 4e 07 	call	0xe9c	; 0xe9c <LoadvoltsADcal>
    2494:	46 c4       	rjmp	.+2188   	; 0x2d22 <identify_commands+0x96e>
//.5..........................................Sets 9 Volt battery calibration------------------------Looks for "CA3"-------------
	else if (buffer[0] == ASCII_C && buffer[1] == ASCII_A && buffer[2] == ASCII_3) NineVoltBatteryCal(buffer);		
    2496:	83 34       	cpi	r24, 0x43	; 67
    2498:	59 f4       	brne	.+22     	; 0x24b0 <identify_commands+0xfc>
    249a:	f8 01       	movw	r30, r16
    249c:	91 81       	ldd	r25, Z+1	; 0x01
    249e:	91 34       	cpi	r25, 0x41	; 65
    24a0:	39 f4       	brne	.+14     	; 0x24b0 <identify_commands+0xfc>
    24a2:	92 81       	ldd	r25, Z+2	; 0x02
    24a4:	93 33       	cpi	r25, 0x33	; 51
    24a6:	21 f4       	brne	.+8      	; 0x24b0 <identify_commands+0xfc>
    24a8:	c8 01       	movw	r24, r16
    24aa:	0e 94 83 07 	call	0xf06	; 0xf06 <NineVoltBatteryCal>
    24ae:	39 c4       	rjmp	.+2162   	; 0x2d22 <identify_commands+0x96e>
//.6..........................................Sets 6 Volt battery calibration------------------------Looks for "CA4"-------------
	else if (buffer[0] == ASCII_C && buffer[1] == ASCII_A && buffer[2] == ASCII_4) SixVoltBatteryCal(buffer);		
    24b0:	83 34       	cpi	r24, 0x43	; 67
    24b2:	71 f4       	brne	.+28     	; 0x24d0 <identify_commands+0x11c>
    24b4:	d8 01       	movw	r26, r16
    24b6:	11 96       	adiw	r26, 0x01	; 1
    24b8:	9c 91       	ld	r25, X
    24ba:	11 97       	sbiw	r26, 0x01	; 1
    24bc:	91 34       	cpi	r25, 0x41	; 65
    24be:	41 f4       	brne	.+16     	; 0x24d0 <identify_commands+0x11c>
    24c0:	12 96       	adiw	r26, 0x02	; 2
    24c2:	9c 91       	ld	r25, X
    24c4:	94 33       	cpi	r25, 0x34	; 52
    24c6:	21 f4       	brne	.+8      	; 0x24d0 <identify_commands+0x11c>
    24c8:	c8 01       	movw	r24, r16
    24ca:	0e 94 b8 07 	call	0xf70	; 0xf70 <SixVoltBatteryCal>
    24ce:	29 c4       	rjmp	.+2130   	; 0x2d22 <identify_commands+0x96e>
//.7..........................................Sets ohmmeter calibration A----------------------------Looks for "RA1"-------------
	else if (buffer[0] == ASCII_R && buffer[1] == ASCII_A && buffer[2] == ASCII_1) OhmmeterCalA(buffer);		
    24d0:	82 35       	cpi	r24, 0x52	; 82
    24d2:	59 f4       	brne	.+22     	; 0x24ea <identify_commands+0x136>
    24d4:	f8 01       	movw	r30, r16
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	91 34       	cpi	r25, 0x41	; 65
    24da:	39 f4       	brne	.+14     	; 0x24ea <identify_commands+0x136>
    24dc:	92 81       	ldd	r25, Z+2	; 0x02
    24de:	91 33       	cpi	r25, 0x31	; 49
    24e0:	21 f4       	brne	.+8      	; 0x24ea <identify_commands+0x136>
    24e2:	c8 01       	movw	r24, r16
    24e4:	0e 94 ed 07 	call	0xfda	; 0xfda <OhmmeterCalA>
    24e8:	1c c4       	rjmp	.+2104   	; 0x2d22 <identify_commands+0x96e>
//.8..........................................Sets ohmmeter calibration B----------------------------Looks for "RA2"-------------
	else if (buffer[0] == ASCII_R && buffer[1] == ASCII_A && buffer[2] == ASCII_2) OhmmeterCalB(buffer);
    24ea:	82 35       	cpi	r24, 0x52	; 82
    24ec:	71 f4       	brne	.+28     	; 0x250a <identify_commands+0x156>
    24ee:	d8 01       	movw	r26, r16
    24f0:	11 96       	adiw	r26, 0x01	; 1
    24f2:	9c 91       	ld	r25, X
    24f4:	11 97       	sbiw	r26, 0x01	; 1
    24f6:	91 34       	cpi	r25, 0x41	; 65
    24f8:	41 f4       	brne	.+16     	; 0x250a <identify_commands+0x156>
    24fa:	12 96       	adiw	r26, 0x02	; 2
    24fc:	9c 91       	ld	r25, X
    24fe:	92 33       	cpi	r25, 0x32	; 50
    2500:	21 f4       	brne	.+8      	; 0x250a <identify_commands+0x156>
    2502:	c8 01       	movw	r24, r16
    2504:	0e 94 22 08 	call	0x1044	; 0x1044 <OhmmeterCalB>
    2508:	0c c4       	rjmp	.+2072   	; 0x2d22 <identify_commands+0x96e>
//.9..........................................Sets SYBT thermistor resistor calibration A------------Looks for "TR1"-------------
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_R && buffer[2] == ASCII_1) ThermistorCalA(buffer);	
    250a:	84 35       	cpi	r24, 0x54	; 84
    250c:	59 f4       	brne	.+22     	; 0x2524 <identify_commands+0x170>
    250e:	f8 01       	movw	r30, r16
    2510:	91 81       	ldd	r25, Z+1	; 0x01
    2512:	92 35       	cpi	r25, 0x52	; 82
    2514:	39 f4       	brne	.+14     	; 0x2524 <identify_commands+0x170>
    2516:	92 81       	ldd	r25, Z+2	; 0x02
    2518:	91 33       	cpi	r25, 0x31	; 49
    251a:	21 f4       	brne	.+8      	; 0x2524 <identify_commands+0x170>
    251c:	c8 01       	movw	r24, r16
    251e:	0e 94 57 08 	call	0x10ae	; 0x10ae <ThermistorCalA>
    2522:	ff c3       	rjmp	.+2046   	; 0x2d22 <identify_commands+0x96e>
//.10..........................................Sets SYBT thermistor resistor calibration B------------Looks for "TR2"-------------
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_R && buffer[2] == ASCII_2) ThermistorCalB(buffer);
    2524:	84 35       	cpi	r24, 0x54	; 84
    2526:	71 f4       	brne	.+28     	; 0x2544 <identify_commands+0x190>
    2528:	d8 01       	movw	r26, r16
    252a:	11 96       	adiw	r26, 0x01	; 1
    252c:	9c 91       	ld	r25, X
    252e:	11 97       	sbiw	r26, 0x01	; 1
    2530:	92 35       	cpi	r25, 0x52	; 82
    2532:	41 f4       	brne	.+16     	; 0x2544 <identify_commands+0x190>
    2534:	12 96       	adiw	r26, 0x02	; 2
    2536:	9c 91       	ld	r25, X
    2538:	92 33       	cpi	r25, 0x32	; 50
    253a:	21 f4       	brne	.+8      	; 0x2544 <identify_commands+0x190>
    253c:	c8 01       	movw	r24, r16
    253e:	0e 94 8c 08 	call	0x1118	; 0x1118 <ThermistorCalB>
    2542:	ef c3       	rjmp	.+2014   	; 0x2d22 <identify_commands+0x96e>
//.11..........................................Sets SYBT thermistor calibration 1---------------------Looks for "TH1"-------------
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_H && buffer[2] == ASCII_1) ThermistorCalOne(buffer);	
    2544:	84 35       	cpi	r24, 0x54	; 84
    2546:	59 f4       	brne	.+22     	; 0x255e <identify_commands+0x1aa>
    2548:	f8 01       	movw	r30, r16
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	98 34       	cpi	r25, 0x48	; 72
    254e:	39 f4       	brne	.+14     	; 0x255e <identify_commands+0x1aa>
    2550:	92 81       	ldd	r25, Z+2	; 0x02
    2552:	91 33       	cpi	r25, 0x31	; 49
    2554:	21 f4       	brne	.+8      	; 0x255e <identify_commands+0x1aa>
    2556:	c8 01       	movw	r24, r16
    2558:	0e 94 c1 08 	call	0x1182	; 0x1182 <ThermistorCalOne>
    255c:	e2 c3       	rjmp	.+1988   	; 0x2d22 <identify_commands+0x96e>
//.12..........................................Sets SYBT thermistor calibration 2.........Looks for "TH2".......These need work if they are ever implemented
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_H && buffer[2] == ASCII_2) ThermistorCal2(buffer);
    255e:	84 35       	cpi	r24, 0x54	; 84
    2560:	71 f4       	brne	.+28     	; 0x257e <identify_commands+0x1ca>
    2562:	d8 01       	movw	r26, r16
    2564:	11 96       	adiw	r26, 0x01	; 1
    2566:	9c 91       	ld	r25, X
    2568:	11 97       	sbiw	r26, 0x01	; 1
    256a:	98 34       	cpi	r25, 0x48	; 72
    256c:	41 f4       	brne	.+16     	; 0x257e <identify_commands+0x1ca>
    256e:	12 96       	adiw	r26, 0x02	; 2
    2570:	9c 91       	ld	r25, X
    2572:	92 33       	cpi	r25, 0x32	; 50
    2574:	21 f4       	brne	.+8      	; 0x257e <identify_commands+0x1ca>
    2576:	c8 01       	movw	r24, r16
    2578:	0e 94 f6 08 	call	0x11ec	; 0x11ec <ThermistorCal2>
    257c:	d2 c3       	rjmp	.+1956   	; 0x2d22 <identify_commands+0x96e>
//.13..........................................Sets SYBT thermistor calibration 3.......Looks for "TH3".........Currently none of the thermistor cal factors are used
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_H && buffer[2] == ASCII_3) ThermistorCal3(buffer);		
    257e:	84 35       	cpi	r24, 0x54	; 84
    2580:	59 f4       	brne	.+22     	; 0x2598 <identify_commands+0x1e4>
    2582:	f8 01       	movw	r30, r16
    2584:	91 81       	ldd	r25, Z+1	; 0x01
    2586:	98 34       	cpi	r25, 0x48	; 72
    2588:	39 f4       	brne	.+14     	; 0x2598 <identify_commands+0x1e4>
    258a:	92 81       	ldd	r25, Z+2	; 0x02
    258c:	93 33       	cpi	r25, 0x33	; 51
    258e:	21 f4       	brne	.+8      	; 0x2598 <identify_commands+0x1e4>
    2590:	c8 01       	movw	r24, r16
    2592:	0e 94 32 09 	call	0x1264	; 0x1264 <ThermistorCal3>
    2596:	c5 c3       	rjmp	.+1930   	; 0x2d22 <identify_commands+0x96e>
//.14..........................................Sets SYBT thermistor offset.........Looks for "TH4"..this should be changed to be consistent with other code formats for saving data
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_H && buffer[2] == ASCII_4) ThermistorOffset(buffer);			
    2598:	84 35       	cpi	r24, 0x54	; 84
    259a:	71 f4       	brne	.+28     	; 0x25b8 <identify_commands+0x204>
    259c:	d8 01       	movw	r26, r16
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	9c 91       	ld	r25, X
    25a2:	11 97       	sbiw	r26, 0x01	; 1
    25a4:	98 34       	cpi	r25, 0x48	; 72
    25a6:	41 f4       	brne	.+16     	; 0x25b8 <identify_commands+0x204>
    25a8:	12 96       	adiw	r26, 0x02	; 2
    25aa:	9c 91       	ld	r25, X
    25ac:	94 33       	cpi	r25, 0x34	; 52
    25ae:	21 f4       	brne	.+8      	; 0x25b8 <identify_commands+0x204>
    25b0:	c8 01       	movw	r24, r16
    25b2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ThermistorOffset>
    25b6:	b5 c3       	rjmp	.+1898   	; 0x2d22 <identify_commands+0x96e>
//.15..........................................Sets Int thermistor calibration 1-----------------------Looks for "TH5"--------------
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_H && buffer[2] == ASCII_5) IntThermistorCalOne(buffer);					
    25b8:	84 35       	cpi	r24, 0x54	; 84
    25ba:	59 f4       	brne	.+22     	; 0x25d2 <identify_commands+0x21e>
    25bc:	f8 01       	movw	r30, r16
    25be:	91 81       	ldd	r25, Z+1	; 0x01
    25c0:	98 34       	cpi	r25, 0x48	; 72
    25c2:	39 f4       	brne	.+14     	; 0x25d2 <identify_commands+0x21e>
    25c4:	92 81       	ldd	r25, Z+2	; 0x02
    25c6:	95 33       	cpi	r25, 0x35	; 53
    25c8:	21 f4       	brne	.+8      	; 0x25d2 <identify_commands+0x21e>
    25ca:	c8 01       	movw	r24, r16
    25cc:	0e 94 10 0a 	call	0x1420	; 0x1420 <IntThermistorCalOne>
    25d0:	a8 c3       	rjmp	.+1872   	; 0x2d22 <identify_commands+0x96e>
//.16..........................................Sets Int thermistor calibration 2-----------------------Looks for "TH6"--------------
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_H && buffer[2] == ASCII_6) IntThermistorCal2(buffer);	
    25d2:	84 35       	cpi	r24, 0x54	; 84
    25d4:	71 f4       	brne	.+28     	; 0x25f2 <identify_commands+0x23e>
    25d6:	d8 01       	movw	r26, r16
    25d8:	11 96       	adiw	r26, 0x01	; 1
    25da:	9c 91       	ld	r25, X
    25dc:	11 97       	sbiw	r26, 0x01	; 1
    25de:	98 34       	cpi	r25, 0x48	; 72
    25e0:	41 f4       	brne	.+16     	; 0x25f2 <identify_commands+0x23e>
    25e2:	12 96       	adiw	r26, 0x02	; 2
    25e4:	9c 91       	ld	r25, X
    25e6:	96 33       	cpi	r25, 0x36	; 54
    25e8:	21 f4       	brne	.+8      	; 0x25f2 <identify_commands+0x23e>
    25ea:	c8 01       	movw	r24, r16
    25ec:	0e 94 45 0a 	call	0x148a	; 0x148a <IntThermistorCal2>
    25f0:	98 c3       	rjmp	.+1840   	; 0x2d22 <identify_commands+0x96e>
//.17..........................................Sets Int thermistor calibration 3------Looks for "TH7"..Currently none of the thermistor cal factors are used
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_H && buffer[2] == ASCII_7) IntThermistorCal3(buffer);				
    25f2:	84 35       	cpi	r24, 0x54	; 84
    25f4:	59 f4       	brne	.+22     	; 0x260c <identify_commands+0x258>
    25f6:	f8 01       	movw	r30, r16
    25f8:	91 81       	ldd	r25, Z+1	; 0x01
    25fa:	98 34       	cpi	r25, 0x48	; 72
    25fc:	39 f4       	brne	.+14     	; 0x260c <identify_commands+0x258>
    25fe:	92 81       	ldd	r25, Z+2	; 0x02
    2600:	97 33       	cpi	r25, 0x37	; 55
    2602:	21 f4       	brne	.+8      	; 0x260c <identify_commands+0x258>
    2604:	c8 01       	movw	r24, r16
    2606:	0e 94 81 0a 	call	0x1502	; 0x1502 <IntThermistorCal3>
    260a:	8b c3       	rjmp	.+1814   	; 0x2d22 <identify_commands+0x96e>
//.18..........................................Sets Int thermistor offset...........Looks for "TH8"..should be changed to be consistent with other data saving formats.but works ok
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_H && buffer[2] == ASCII_8) IntThermistorOffset(buffer);	
    260c:	84 35       	cpi	r24, 0x54	; 84
    260e:	71 f4       	brne	.+28     	; 0x262c <identify_commands+0x278>
    2610:	d8 01       	movw	r26, r16
    2612:	11 96       	adiw	r26, 0x01	; 1
    2614:	9c 91       	ld	r25, X
    2616:	11 97       	sbiw	r26, 0x01	; 1
    2618:	98 34       	cpi	r25, 0x48	; 72
    261a:	41 f4       	brne	.+16     	; 0x262c <identify_commands+0x278>
    261c:	12 96       	adiw	r26, 0x02	; 2
    261e:	9c 91       	ld	r25, X
    2620:	98 33       	cpi	r25, 0x38	; 56
    2622:	21 f4       	brne	.+8      	; 0x262c <identify_commands+0x278>
    2624:	c8 01       	movw	r24, r16
    2626:	0e 94 bd 0a 	call	0x157a	; 0x157a <IntThermistorOffset>
    262a:	7b c3       	rjmp	.+1782   	; 0x2d22 <identify_commands+0x96e>
//.19..........................................Sets internal thermistor resistor calibration A------------Looks for "TN1"-----------
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_N && buffer[2] == ASCII_1) IntThermistorCalA(buffer);
    262c:	84 35       	cpi	r24, 0x54	; 84
    262e:	59 f4       	brne	.+22     	; 0x2646 <identify_commands+0x292>
    2630:	f8 01       	movw	r30, r16
    2632:	91 81       	ldd	r25, Z+1	; 0x01
    2634:	9e 34       	cpi	r25, 0x4E	; 78
    2636:	39 f4       	brne	.+14     	; 0x2646 <identify_commands+0x292>
    2638:	92 81       	ldd	r25, Z+2	; 0x02
    263a:	91 33       	cpi	r25, 0x31	; 49
    263c:	21 f4       	brne	.+8      	; 0x2646 <identify_commands+0x292>
    263e:	c8 01       	movw	r24, r16
    2640:	0e 94 a6 09 	call	0x134c	; 0x134c <IntThermistorCalA>
    2644:	6e c3       	rjmp	.+1756   	; 0x2d22 <identify_commands+0x96e>
//.20..........................................Sets internal thermistor resistor calibration B------------Looks for "TN2"-----------
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_N && buffer[2] == ASCII_2) IntThermistorCalB(buffer);					
    2646:	84 35       	cpi	r24, 0x54	; 84
    2648:	71 f4       	brne	.+28     	; 0x2666 <identify_commands+0x2b2>
    264a:	d8 01       	movw	r26, r16
    264c:	11 96       	adiw	r26, 0x01	; 1
    264e:	9c 91       	ld	r25, X
    2650:	11 97       	sbiw	r26, 0x01	; 1
    2652:	9e 34       	cpi	r25, 0x4E	; 78
    2654:	41 f4       	brne	.+16     	; 0x2666 <identify_commands+0x2b2>
    2656:	12 96       	adiw	r26, 0x02	; 2
    2658:	9c 91       	ld	r25, X
    265a:	92 33       	cpi	r25, 0x32	; 50
    265c:	21 f4       	brne	.+8      	; 0x2666 <identify_commands+0x2b2>
    265e:	c8 01       	movw	r24, r16
    2660:	0e 94 db 09 	call	0x13b6	; 0x13b6 <IntThermistorCalB>
    2664:	5e c3       	rjmp	.+1724   	; 0x2d22 <identify_commands+0x96e>
//.21..........................................Sets F or C preference-------------------------------------Looks for "FOC"-----------
	else if (buffer[0] == ASCII_F && buffer[1] == ASCII_O && buffer[2] == ASCII_C) FarenheitOrCentigrade(buffer,string);
    2666:	86 34       	cpi	r24, 0x46	; 70
    2668:	71 f4       	brne	.+28     	; 0x2686 <identify_commands+0x2d2>
    266a:	f8 01       	movw	r30, r16
    266c:	91 81       	ldd	r25, Z+1	; 0x01
    266e:	9f 34       	cpi	r25, 0x4F	; 79
    2670:	51 f4       	brne	.+20     	; 0x2686 <identify_commands+0x2d2>
    2672:	92 81       	ldd	r25, Z+2	; 0x02
    2674:	93 34       	cpi	r25, 0x43	; 67
    2676:	39 f4       	brne	.+14     	; 0x2686 <identify_commands+0x2d2>
    2678:	be 01       	movw	r22, r28
    267a:	6f 5f       	subi	r22, 0xFF	; 255
    267c:	7f 4f       	sbci	r23, 0xFF	; 255
    267e:	c8 01       	movw	r24, r16
    2680:	0e 94 3e 0c 	call	0x187c	; 0x187c <FarenheitOrCentigrade>
    2684:	4e c3       	rjmp	.+1692   	; 0x2d22 <identify_commands+0x96e>
//.22..........................................Sets Temp or Resistance preference-------------------------Looks for "TOR"-----------
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_O && buffer[2] == ASCII_R) TemperatureOrResistance(buffer,string);
    2686:	84 35       	cpi	r24, 0x54	; 84
    2688:	89 f4       	brne	.+34     	; 0x26ac <identify_commands+0x2f8>
    268a:	d8 01       	movw	r26, r16
    268c:	11 96       	adiw	r26, 0x01	; 1
    268e:	9c 91       	ld	r25, X
    2690:	11 97       	sbiw	r26, 0x01	; 1
    2692:	9f 34       	cpi	r25, 0x4F	; 79
    2694:	59 f4       	brne	.+22     	; 0x26ac <identify_commands+0x2f8>
    2696:	12 96       	adiw	r26, 0x02	; 2
    2698:	9c 91       	ld	r25, X
    269a:	92 35       	cpi	r25, 0x52	; 82
    269c:	39 f4       	brne	.+14     	; 0x26ac <identify_commands+0x2f8>
    269e:	be 01       	movw	r22, r28
    26a0:	6f 5f       	subi	r22, 0xFF	; 255
    26a2:	7f 4f       	sbci	r23, 0xFF	; 255
    26a4:	c8 01       	movw	r24, r16
    26a6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <TemperatureOrResistance>
    26aa:	3b c3       	rjmp	.+1654   	; 0x2d22 <identify_commands+0x96e>
//.23..........................................Sets SYBT type or resistance preference--------------------Looks for "SOR"-----------
	else if (buffer[0] == ASCII_S && buffer[1] == ASCII_O && buffer[2] == ASCII_R) TypeOrResistance(buffer,string);		
    26ac:	83 35       	cpi	r24, 0x53	; 83
    26ae:	71 f4       	brne	.+28     	; 0x26cc <identify_commands+0x318>
    26b0:	f8 01       	movw	r30, r16
    26b2:	91 81       	ldd	r25, Z+1	; 0x01
    26b4:	9f 34       	cpi	r25, 0x4F	; 79
    26b6:	51 f4       	brne	.+20     	; 0x26cc <identify_commands+0x318>
    26b8:	92 81       	ldd	r25, Z+2	; 0x02
    26ba:	92 35       	cpi	r25, 0x52	; 82
    26bc:	39 f4       	brne	.+14     	; 0x26cc <identify_commands+0x318>
    26be:	be 01       	movw	r22, r28
    26c0:	6f 5f       	subi	r22, 0xFF	; 255
    26c2:	7f 4f       	sbci	r23, 0xFF	; 255
    26c4:	c8 01       	movw	r24, r16
    26c6:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <TypeOrResistance>
    26ca:	2b c3       	rjmp	.+1622   	; 0x2d22 <identify_commands+0x96e>
//.24..........................................Sets AutoMeasaurement On or Off preference-----------------Looks for "AOF"-----------
	else if (buffer[0] == ASCII_A && buffer[1] == ASCII_O && buffer[2] == ASCII_F) AutoOnOff(buffer,string);		
    26cc:	81 34       	cpi	r24, 0x41	; 65
    26ce:	89 f4       	brne	.+34     	; 0x26f2 <identify_commands+0x33e>
    26d0:	d8 01       	movw	r26, r16
    26d2:	11 96       	adiw	r26, 0x01	; 1
    26d4:	9c 91       	ld	r25, X
    26d6:	11 97       	sbiw	r26, 0x01	; 1
    26d8:	9f 34       	cpi	r25, 0x4F	; 79
    26da:	59 f4       	brne	.+22     	; 0x26f2 <identify_commands+0x33e>
    26dc:	12 96       	adiw	r26, 0x02	; 2
    26de:	9c 91       	ld	r25, X
    26e0:	96 34       	cpi	r25, 0x46	; 70
    26e2:	39 f4       	brne	.+14     	; 0x26f2 <identify_commands+0x33e>
    26e4:	be 01       	movw	r22, r28
    26e6:	6f 5f       	subi	r22, 0xFF	; 255
    26e8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ea:	c8 01       	movw	r24, r16
    26ec:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <AutoOnOff>
    26f0:	18 c3       	rjmp	.+1584   	; 0x2d22 <identify_commands+0x96e>
//.25..........................................Adds new SYBT flavor.1----------------Looks for "FL1"..should be changed to be consistent with other data save code, but works OK
	else if (buffer[0] == ASCII_F && buffer[1] == ASCII_L && buffer[2] == ASCII_1) SYBTflavorOne(buffer,string);		
    26f2:	86 34       	cpi	r24, 0x46	; 70
    26f4:	71 f4       	brne	.+28     	; 0x2712 <identify_commands+0x35e>
    26f6:	f8 01       	movw	r30, r16
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	9c 34       	cpi	r25, 0x4C	; 76
    26fc:	51 f4       	brne	.+20     	; 0x2712 <identify_commands+0x35e>
    26fe:	92 81       	ldd	r25, Z+2	; 0x02
    2700:	91 33       	cpi	r25, 0x31	; 49
    2702:	39 f4       	brne	.+14     	; 0x2712 <identify_commands+0x35e>
    2704:	be 01       	movw	r22, r28
    2706:	6f 5f       	subi	r22, 0xFF	; 255
    2708:	7f 4f       	sbci	r23, 0xFF	; 255
    270a:	c8 01       	movw	r24, r16
    270c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <SYBTflavorOne>
    2710:	08 c3       	rjmp	.+1552   	; 0x2d22 <identify_commands+0x96e>
//.26..........................................Adds new SYBT flavor.2-------------------------------------Looks for "FL2"-----------
	else if (buffer[0] == ASCII_F && buffer[1] == ASCII_L && buffer[2] == ASCII_2)  SYBTflavorTwo(buffer,string);	
    2712:	86 34       	cpi	r24, 0x46	; 70
    2714:	89 f4       	brne	.+34     	; 0x2738 <identify_commands+0x384>
    2716:	d8 01       	movw	r26, r16
    2718:	11 96       	adiw	r26, 0x01	; 1
    271a:	9c 91       	ld	r25, X
    271c:	11 97       	sbiw	r26, 0x01	; 1
    271e:	9c 34       	cpi	r25, 0x4C	; 76
    2720:	59 f4       	brne	.+22     	; 0x2738 <identify_commands+0x384>
    2722:	12 96       	adiw	r26, 0x02	; 2
    2724:	9c 91       	ld	r25, X
    2726:	92 33       	cpi	r25, 0x32	; 50
    2728:	39 f4       	brne	.+14     	; 0x2738 <identify_commands+0x384>
    272a:	be 01       	movw	r22, r28
    272c:	6f 5f       	subi	r22, 0xFF	; 255
    272e:	7f 4f       	sbci	r23, 0xFF	; 255
    2730:	c8 01       	movw	r24, r16
    2732:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <SYBTflavorTwo>
    2736:	f5 c2       	rjmp	.+1514   	; 0x2d22 <identify_commands+0x96e>
//.27..........................................Adds new SYBT flavor.3--------------------------------------Looks for "FL3"----------
	else if (buffer[0] == ASCII_F && buffer[1] == ASCII_L && buffer[2] == ASCII_3)  SYBTflavorThree(buffer,string);		
    2738:	86 34       	cpi	r24, 0x46	; 70
    273a:	71 f4       	brne	.+28     	; 0x2758 <identify_commands+0x3a4>
    273c:	f8 01       	movw	r30, r16
    273e:	91 81       	ldd	r25, Z+1	; 0x01
    2740:	9c 34       	cpi	r25, 0x4C	; 76
    2742:	51 f4       	brne	.+20     	; 0x2758 <identify_commands+0x3a4>
    2744:	92 81       	ldd	r25, Z+2	; 0x02
    2746:	93 33       	cpi	r25, 0x33	; 51
    2748:	39 f4       	brne	.+14     	; 0x2758 <identify_commands+0x3a4>
    274a:	be 01       	movw	r22, r28
    274c:	6f 5f       	subi	r22, 0xFF	; 255
    274e:	7f 4f       	sbci	r23, 0xFF	; 255
    2750:	c8 01       	movw	r24, r16
    2752:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <SYBTflavorThree>
    2756:	e5 c2       	rjmp	.+1482   	; 0x2d22 <identify_commands+0x96e>
//-28--------------------------------------------Adds new SYBT flavor.4------------------------------------Looks for "FL4"----------
	else if (buffer[0] == ASCII_F && buffer[1] == ASCII_L && buffer[2] == ASCII_4)  SYBTflavorFour(buffer,string);
    2758:	86 34       	cpi	r24, 0x46	; 70
    275a:	89 f4       	brne	.+34     	; 0x277e <identify_commands+0x3ca>
    275c:	d8 01       	movw	r26, r16
    275e:	11 96       	adiw	r26, 0x01	; 1
    2760:	9c 91       	ld	r25, X
    2762:	11 97       	sbiw	r26, 0x01	; 1
    2764:	9c 34       	cpi	r25, 0x4C	; 76
    2766:	59 f4       	brne	.+22     	; 0x277e <identify_commands+0x3ca>
    2768:	12 96       	adiw	r26, 0x02	; 2
    276a:	9c 91       	ld	r25, X
    276c:	94 33       	cpi	r25, 0x34	; 52
    276e:	39 f4       	brne	.+14     	; 0x277e <identify_commands+0x3ca>
    2770:	be 01       	movw	r22, r28
    2772:	6f 5f       	subi	r22, 0xFF	; 255
    2774:	7f 4f       	sbci	r23, 0xFF	; 255
    2776:	c8 01       	movw	r24, r16
    2778:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <SYBTflavorFour>
    277c:	d2 c2       	rjmp	.+1444   	; 0x2d22 <identify_commands+0x96e>
//-29-----------------------------------------------------Restore safety features--------------------------Looks for "SAF"----------
	else if (buffer[0] == ASCII_S && buffer[1] == ASCII_A && buffer[2] == ASCII_F) RestoreSafeMode();
    277e:	83 35       	cpi	r24, 0x53	; 83
    2780:	51 f4       	brne	.+20     	; 0x2796 <identify_commands+0x3e2>
    2782:	f8 01       	movw	r30, r16
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	91 34       	cpi	r25, 0x41	; 65
    2788:	31 f4       	brne	.+12     	; 0x2796 <identify_commands+0x3e2>
    278a:	92 81       	ldd	r25, Z+2	; 0x02
    278c:	96 34       	cpi	r25, 0x46	; 70
    278e:	19 f4       	brne	.+6      	; 0x2796 <identify_commands+0x3e2>
    2790:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <RestoreSafeMode>
    2794:	c6 c2       	rjmp	.+1420   	; 0x2d22 <identify_commands+0x96e>
//-30-----------------------------------------------------Override test safety features--------------------Looks for "OVR"----------
	else if (buffer[0] == ASCII_O && buffer[1] == ASCII_V && buffer[2] == ASCII_R) ExitSafeMode();	
    2796:	8f 34       	cpi	r24, 0x4F	; 79
    2798:	69 f4       	brne	.+26     	; 0x27b4 <identify_commands+0x400>
    279a:	d8 01       	movw	r26, r16
    279c:	11 96       	adiw	r26, 0x01	; 1
    279e:	9c 91       	ld	r25, X
    27a0:	11 97       	sbiw	r26, 0x01	; 1
    27a2:	96 35       	cpi	r25, 0x56	; 86
    27a4:	39 f4       	brne	.+14     	; 0x27b4 <identify_commands+0x400>
    27a6:	12 96       	adiw	r26, 0x02	; 2
    27a8:	9c 91       	ld	r25, X
    27aa:	92 35       	cpi	r25, 0x52	; 82
    27ac:	19 f4       	brne	.+6      	; 0x27b4 <identify_commands+0x400>
    27ae:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <ExitSafeMode>
    27b2:	b7 c2       	rjmp	.+1390   	; 0x2d22 <identify_commands+0x96e>
//-31--------------------------------------Sleep Mode Time 1------------------------------------------------SLT---------------------
	else if (buffer[0] == ASCII_S && buffer[1] == ASCII_L && buffer[2] == ASCII_T) SleepTimeOne(buffer);	
    27b4:	83 35       	cpi	r24, 0x53	; 83
    27b6:	59 f4       	brne	.+22     	; 0x27ce <identify_commands+0x41a>
    27b8:	f8 01       	movw	r30, r16
    27ba:	91 81       	ldd	r25, Z+1	; 0x01
    27bc:	9c 34       	cpi	r25, 0x4C	; 76
    27be:	39 f4       	brne	.+14     	; 0x27ce <identify_commands+0x41a>
    27c0:	92 81       	ldd	r25, Z+2	; 0x02
    27c2:	94 35       	cpi	r25, 0x54	; 84
    27c4:	21 f4       	brne	.+8      	; 0x27ce <identify_commands+0x41a>
    27c6:	c8 01       	movw	r24, r16
    27c8:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <SleepTimeOne>
    27cc:	aa c2       	rjmp	.+1364   	; 0x2d22 <identify_commands+0x96e>
//-32--------------------------------------Sleep Mode Time 2------------------------------------------------SLQ---------------------
	else if (buffer[0] == ASCII_S && buffer[1] == ASCII_L && buffer[2] == ASCII_Q) SleepTimeTwo(buffer);
    27ce:	83 35       	cpi	r24, 0x53	; 83
    27d0:	71 f4       	brne	.+28     	; 0x27ee <identify_commands+0x43a>
    27d2:	d8 01       	movw	r26, r16
    27d4:	11 96       	adiw	r26, 0x01	; 1
    27d6:	9c 91       	ld	r25, X
    27d8:	11 97       	sbiw	r26, 0x01	; 1
    27da:	9c 34       	cpi	r25, 0x4C	; 76
    27dc:	41 f4       	brne	.+16     	; 0x27ee <identify_commands+0x43a>
    27de:	12 96       	adiw	r26, 0x02	; 2
    27e0:	9c 91       	ld	r25, X
    27e2:	91 35       	cpi	r25, 0x51	; 81
    27e4:	21 f4       	brne	.+8      	; 0x27ee <identify_commands+0x43a>
    27e6:	c8 01       	movw	r24, r16
    27e8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <SleepTimeTwo>
    27ec:	9a c2       	rjmp	.+1332   	; 0x2d22 <identify_commands+0x96e>
//-33--------------------------------------Sleep Mode Time 3------------------------------------------------SLZ---------------------
	else if (buffer[0] == ASCII_S && buffer[1] == ASCII_L && buffer[2] == ASCII_Z) SleepTimeThree(buffer);												
    27ee:	83 35       	cpi	r24, 0x53	; 83
    27f0:	59 f4       	brne	.+22     	; 0x2808 <identify_commands+0x454>
    27f2:	f8 01       	movw	r30, r16
    27f4:	91 81       	ldd	r25, Z+1	; 0x01
    27f6:	9c 34       	cpi	r25, 0x4C	; 76
    27f8:	39 f4       	brne	.+14     	; 0x2808 <identify_commands+0x454>
    27fa:	92 81       	ldd	r25, Z+2	; 0x02
    27fc:	9a 35       	cpi	r25, 0x5A	; 90
    27fe:	21 f4       	brne	.+8      	; 0x2808 <identify_commands+0x454>
    2800:	c8 01       	movw	r24, r16
    2802:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <SleepTimeThree>
    2806:	8d c2       	rjmp	.+1306   	; 0x2d22 <identify_commands+0x96e>
//-34--------------------------------------Disable Sleep Mode-----------------------------------------------SLP---------------------
	else if (buffer[0] == ASCII_S && buffer[1] == ASCII_L && buffer[2] == ASCII_P) SleepDisable();
    2808:	83 35       	cpi	r24, 0x53	; 83
    280a:	69 f4       	brne	.+26     	; 0x2826 <identify_commands+0x472>
    280c:	d8 01       	movw	r26, r16
    280e:	11 96       	adiw	r26, 0x01	; 1
    2810:	9c 91       	ld	r25, X
    2812:	11 97       	sbiw	r26, 0x01	; 1
    2814:	9c 34       	cpi	r25, 0x4C	; 76
    2816:	39 f4       	brne	.+14     	; 0x2826 <identify_commands+0x472>
    2818:	12 96       	adiw	r26, 0x02	; 2
    281a:	9c 91       	ld	r25, X
    281c:	90 35       	cpi	r25, 0x50	; 80
    281e:	19 f4       	brne	.+6      	; 0x2826 <identify_commands+0x472>
    2820:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <SleepDisable>
    2824:	7e c2       	rjmp	.+1276   	; 0x2d22 <identify_commands+0x96e>
//-35--------------------------------------Restore Sleep Mode-----------------------------------------------SLX---------------------
	else if (buffer[0] == ASCII_S && buffer[1] == ASCII_L && buffer[2] == ASCII_X) SleepRestore();
    2826:	83 35       	cpi	r24, 0x53	; 83
    2828:	51 f4       	brne	.+20     	; 0x283e <identify_commands+0x48a>
    282a:	f8 01       	movw	r30, r16
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	9c 34       	cpi	r25, 0x4C	; 76
    2830:	31 f4       	brne	.+12     	; 0x283e <identify_commands+0x48a>
    2832:	92 81       	ldd	r25, Z+2	; 0x02
    2834:	98 35       	cpi	r25, 0x58	; 88
    2836:	19 f4       	brne	.+6      	; 0x283e <identify_commands+0x48a>
    2838:	0e 94 0e 10 	call	0x201c	; 0x201c <SleepRestore>
    283c:	72 c2       	rjmp	.+1252   	; 0x2d22 <identify_commands+0x96e>
//-36--------------------------------------enter Demo Mode--------------------------------------------------DMO---------------------
	else if (buffer[0] == ASCII_D && buffer[1] == ASCII_M && buffer[2] == ASCII_O) EnterDemoMode();		
    283e:	84 34       	cpi	r24, 0x44	; 68
    2840:	69 f4       	brne	.+26     	; 0x285c <identify_commands+0x4a8>
    2842:	d8 01       	movw	r26, r16
    2844:	11 96       	adiw	r26, 0x01	; 1
    2846:	9c 91       	ld	r25, X
    2848:	11 97       	sbiw	r26, 0x01	; 1
    284a:	9d 34       	cpi	r25, 0x4D	; 77
    284c:	39 f4       	brne	.+14     	; 0x285c <identify_commands+0x4a8>
    284e:	12 96       	adiw	r26, 0x02	; 2
    2850:	9c 91       	ld	r25, X
    2852:	9f 34       	cpi	r25, 0x4F	; 79
    2854:	19 f4       	brne	.+6      	; 0x285c <identify_commands+0x4a8>
    2856:	0e 94 1f 10 	call	0x203e	; 0x203e <EnterDemoMode>
    285a:	63 c2       	rjmp	.+1222   	; 0x2d22 <identify_commands+0x96e>
//-37--------------------------------------exit Demo Mode---------------------------------------------------DMX---------------------
	else if (buffer[0] == ASCII_D && buffer[1] == ASCII_M && buffer[2] == ASCII_X) ExitDemoMode();	
    285c:	84 34       	cpi	r24, 0x44	; 68
    285e:	51 f4       	brne	.+20     	; 0x2874 <identify_commands+0x4c0>
    2860:	f8 01       	movw	r30, r16
    2862:	91 81       	ldd	r25, Z+1	; 0x01
    2864:	9d 34       	cpi	r25, 0x4D	; 77
    2866:	31 f4       	brne	.+12     	; 0x2874 <identify_commands+0x4c0>
    2868:	92 81       	ldd	r25, Z+2	; 0x02
    286a:	98 35       	cpi	r25, 0x58	; 88
    286c:	19 f4       	brne	.+6      	; 0x2874 <identify_commands+0x4c0>
    286e:	0e 94 36 10 	call	0x206c	; 0x206c <ExitDemoMode>
    2872:	57 c2       	rjmp	.+1198   	; 0x2d22 <identify_commands+0x96e>
//-38--------------------------------------send flavor data to app------------------------------------------FLV---------------------
	else if (buffer[0] == ASCII_F && buffer[1] == ASCII_L && buffer[2] == ASCII_V) GatherSYBTflavorData();	
    2874:	86 34       	cpi	r24, 0x46	; 70
    2876:	69 f4       	brne	.+26     	; 0x2892 <identify_commands+0x4de>
    2878:	d8 01       	movw	r26, r16
    287a:	11 96       	adiw	r26, 0x01	; 1
    287c:	9c 91       	ld	r25, X
    287e:	11 97       	sbiw	r26, 0x01	; 1
    2880:	9c 34       	cpi	r25, 0x4C	; 76
    2882:	39 f4       	brne	.+14     	; 0x2892 <identify_commands+0x4de>
    2884:	12 96       	adiw	r26, 0x02	; 2
    2886:	9c 91       	ld	r25, X
    2888:	96 35       	cpi	r25, 0x56	; 86
    288a:	19 f4       	brne	.+6      	; 0x2892 <identify_commands+0x4de>
    288c:	0e 94 64 23 	call	0x46c8	; 0x46c8 <GatherSYBTflavorData>
    2890:	48 c2       	rjmp	.+1168   	; 0x2d22 <identify_commands+0x96e>
//-39--------------------------------------send thermistor cal data to app----------------------------------TCY---------------------
	else if (buffer[0] == ASCII_T && buffer[1] == ASCII_C && buffer[2] == ASCII_Y) SendCalDataToApp();
    2892:	84 35       	cpi	r24, 0x54	; 84
    2894:	51 f4       	brne	.+20     	; 0x28aa <identify_commands+0x4f6>
    2896:	f8 01       	movw	r30, r16
    2898:	91 81       	ldd	r25, Z+1	; 0x01
    289a:	93 34       	cpi	r25, 0x43	; 67
    289c:	31 f4       	brne	.+12     	; 0x28aa <identify_commands+0x4f6>
    289e:	92 81       	ldd	r25, Z+2	; 0x02
    28a0:	99 35       	cpi	r25, 0x59	; 89
    28a2:	19 f4       	brne	.+6      	; 0x28aa <identify_commands+0x4f6>
    28a4:	0e 94 49 10 	call	0x2092	; 0x2092 <SendCalDataToApp>
    28a8:	3c c2       	rjmp	.+1144   	; 0x2d22 <identify_commands+0x96e>
//-40--------------------------------------send preferences to app------------------------------------------PRF---------------------
	else if (buffer[0] == ASCII_P && buffer[1] == ASCII_R && buffer[2] == ASCII_F) GatherPreferenceData();
    28aa:	80 35       	cpi	r24, 0x50	; 80
    28ac:	69 f4       	brne	.+26     	; 0x28c8 <identify_commands+0x514>
    28ae:	d8 01       	movw	r26, r16
    28b0:	11 96       	adiw	r26, 0x01	; 1
    28b2:	9c 91       	ld	r25, X
    28b4:	11 97       	sbiw	r26, 0x01	; 1
    28b6:	92 35       	cpi	r25, 0x52	; 82
    28b8:	39 f4       	brne	.+14     	; 0x28c8 <identify_commands+0x514>
    28ba:	12 96       	adiw	r26, 0x02	; 2
    28bc:	9c 91       	ld	r25, X
    28be:	96 34       	cpi	r25, 0x46	; 70
    28c0:	19 f4       	brne	.+6      	; 0x28c8 <identify_commands+0x514>
    28c2:	0e 94 f7 18 	call	0x31ee	; 0x31ee <GatherPreferenceData>
    28c6:	2d c2       	rjmp	.+1114   	; 0x2d22 <identify_commands+0x96e>
//-41--------------------------------------Receive Beep command---------------------------------------------BEE---------------------
	else if (buffer[0] == ASCII_B && buffer[1] == ASCII_E && buffer[2] == ASCII_E) ReceiveBeepCommand();				
    28c8:	82 34       	cpi	r24, 0x42	; 66
    28ca:	51 f4       	brne	.+20     	; 0x28e0 <identify_commands+0x52c>
    28cc:	f8 01       	movw	r30, r16
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	95 34       	cpi	r25, 0x45	; 69
    28d2:	31 f4       	brne	.+12     	; 0x28e0 <identify_commands+0x52c>
    28d4:	92 81       	ldd	r25, Z+2	; 0x02
    28d6:	95 34       	cpi	r25, 0x45	; 69
    28d8:	19 f4       	brne	.+6      	; 0x28e0 <identify_commands+0x52c>
    28da:	0e 94 52 10 	call	0x20a4	; 0x20a4 <ReceiveBeepCommand>
    28de:	21 c2       	rjmp	.+1090   	; 0x2d22 <identify_commands+0x96e>
//-42--------------------------------------Set Bluetooth name-----------------------------------------------Looks for "BLU"---------
	else if (buffer[0] == ASCII_B && buffer[1] == ASCII_L && buffer[2] == ASCII_U) SetBluetoothName(buffer,string);
    28e0:	82 34       	cpi	r24, 0x42	; 66
    28e2:	89 f4       	brne	.+34     	; 0x2906 <identify_commands+0x552>
    28e4:	d8 01       	movw	r26, r16
    28e6:	11 96       	adiw	r26, 0x01	; 1
    28e8:	9c 91       	ld	r25, X
    28ea:	11 97       	sbiw	r26, 0x01	; 1
    28ec:	9c 34       	cpi	r25, 0x4C	; 76
    28ee:	59 f4       	brne	.+22     	; 0x2906 <identify_commands+0x552>
    28f0:	12 96       	adiw	r26, 0x02	; 2
    28f2:	9c 91       	ld	r25, X
    28f4:	95 35       	cpi	r25, 0x55	; 85
    28f6:	39 f4       	brne	.+14     	; 0x2906 <identify_commands+0x552>
    28f8:	be 01       	movw	r22, r28
    28fa:	6f 5f       	subi	r22, 0xFF	; 255
    28fc:	7f 4f       	sbci	r23, 0xFF	; 255
    28fe:	c8 01       	movw	r24, r16
    2900:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <SetBluetoothName>
    2904:	0e c2       	rjmp	.+1052   	; 0x2d22 <identify_commands+0x96e>
//-43--------------------------------------Read Bluetooth name.---------------------------------------------Looks for "OKs" Does nothing
	else if (buffer[0] == ASCII_O && buffer[1] == ASCII_K && buffer[2] == ASCII_s){}
    2906:	8f 34       	cpi	r24, 0x4F	; 79
    2908:	41 f4       	brne	.+16     	; 0x291a <identify_commands+0x566>
    290a:	f8 01       	movw	r30, r16
    290c:	91 81       	ldd	r25, Z+1	; 0x01
    290e:	9b 34       	cpi	r25, 0x4B	; 75
    2910:	21 f4       	brne	.+8      	; 0x291a <identify_commands+0x566>
    2912:	92 81       	ldd	r25, Z+2	; 0x02
    2914:	93 37       	cpi	r25, 0x73	; 115
    2916:	09 f4       	brne	.+2      	; 0x291a <identify_commands+0x566>
    2918:	04 c2       	rjmp	.+1032   	; 0x2d22 <identify_commands+0x96e>
//-44-------------------------------------------------------------------------------------------------------Looks for "MEY"---------	
	else if (buffer[0] == ASCII_M && buffer[1] == ASCII_E && buffer[2] == ASCII_Y){Take_Measurements=true;FLASH_0_write_eeprom_byte(1,57);}
    291a:	8d 34       	cpi	r24, 0x4D	; 77
    291c:	99 f4       	brne	.+38     	; 0x2944 <identify_commands+0x590>
    291e:	d8 01       	movw	r26, r16
    2920:	11 96       	adiw	r26, 0x01	; 1
    2922:	9c 91       	ld	r25, X
    2924:	11 97       	sbiw	r26, 0x01	; 1
    2926:	95 34       	cpi	r25, 0x45	; 69
    2928:	69 f4       	brne	.+26     	; 0x2944 <identify_commands+0x590>
    292a:	12 96       	adiw	r26, 0x02	; 2
    292c:	9c 91       	ld	r25, X
    292e:	99 35       	cpi	r25, 0x59	; 89
    2930:	49 f4       	brne	.+18     	; 0x2944 <identify_commands+0x590>
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	80 93 f5 53 	sts	0x53F5, r24	; 0x8053f5 <Take_Measurements>
    2938:	69 e3       	ldi	r22, 0x39	; 57
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	0e 94 4d 34 	call	0x689a	; 0x689a <FLASH_0_write_eeprom_byte>
    2942:	ef c1       	rjmp	.+990    	; 0x2d22 <identify_commands+0x96e>
//-45-------------------------------------------------------------------------------------------------------Looks for "NOM"----------------------
	else if (buffer[0] == ASCII_N && buffer[1] == ASCII_O && buffer[2] == ASCII_M){Take_Measurements=false;FLASH_0_write_eeprom_byte(1,83);}
    2944:	8e 34       	cpi	r24, 0x4E	; 78
    2946:	79 f4       	brne	.+30     	; 0x2966 <identify_commands+0x5b2>
    2948:	f8 01       	movw	r30, r16
    294a:	91 81       	ldd	r25, Z+1	; 0x01
    294c:	9f 34       	cpi	r25, 0x4F	; 79
    294e:	59 f4       	brne	.+22     	; 0x2966 <identify_commands+0x5b2>
    2950:	92 81       	ldd	r25, Z+2	; 0x02
    2952:	9d 34       	cpi	r25, 0x4D	; 77
    2954:	41 f4       	brne	.+16     	; 0x2966 <identify_commands+0x5b2>
    2956:	10 92 f5 53 	sts	0x53F5, r1	; 0x8053f5 <Take_Measurements>
    295a:	63 e5       	ldi	r22, 0x53	; 83
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	0e 94 4d 34 	call	0x689a	; 0x689a <FLASH_0_write_eeprom_byte>
    2964:	de c1       	rjmp	.+956    	; 0x2d22 <identify_commands+0x96e>
//-46-------------------------------------------------------------------------------------------------------Looks for "OFF"-----------------------		
	else if (buffer[0] == ASCII_O && buffer[1] == ASCII_F && buffer[2] == ASCII_F){
    2966:	8f 34       	cpi	r24, 0x4F	; 79
    2968:	59 f4       	brne	.+22     	; 0x2980 <identify_commands+0x5cc>
    296a:	d8 01       	movw	r26, r16
    296c:	11 96       	adiw	r26, 0x01	; 1
    296e:	9c 91       	ld	r25, X
    2970:	11 97       	sbiw	r26, 0x01	; 1
    2972:	96 34       	cpi	r25, 0x46	; 70
    2974:	29 f4       	brne	.+10     	; 0x2980 <identify_commands+0x5cc>
    2976:	12 96       	adiw	r26, 0x02	; 2
    2978:	9c 91       	ld	r25, X
    297a:	96 34       	cpi	r25, 0x46	; 70
    297c:	09 f4       	brne	.+2      	; 0x2980 <identify_commands+0x5cc>
    297e:	d1 c1       	rjmp	.+930    	; 0x2d22 <identify_commands+0x96e>
			//	V_Regulators_set_level(false);  // turn off 3.3v regulators for logic and LEDs;
	}
//-47--------------------------------------Set SYBT ID tolerance--------------------------------------------Looks for "SIT"---------
	else if (buffer[0] == ASCII_S && buffer[1] == ASCII_I && buffer[2] == ASCII_T) SetSYBTidentTolerance(buffer);
    2980:	83 35       	cpi	r24, 0x53	; 83
    2982:	59 f4       	brne	.+22     	; 0x299a <identify_commands+0x5e6>
    2984:	f8 01       	movw	r30, r16
    2986:	91 81       	ldd	r25, Z+1	; 0x01
    2988:	99 34       	cpi	r25, 0x49	; 73
    298a:	39 f4       	brne	.+14     	; 0x299a <identify_commands+0x5e6>
    298c:	92 81       	ldd	r25, Z+2	; 0x02
    298e:	94 35       	cpi	r25, 0x54	; 84
    2990:	21 f4       	brne	.+8      	; 0x299a <identify_commands+0x5e6>
    2992:	c8 01       	movw	r24, r16
    2994:	0e 94 8b 10 	call	0x2116	; 0x2116 <SetSYBTidentTolerance>
    2998:	c4 c1       	rjmp	.+904    	; 0x2d22 <identify_commands+0x96e>
//-48--------------------------------------Erase EPROM------------------------------------------------------Looks for "ERA"---------
	else if (buffer[0] == ASCII_E && buffer[1] == ASCII_R && buffer[2] == ASCII_A) EraseEEPROM();
    299a:	85 34       	cpi	r24, 0x45	; 69
    299c:	69 f4       	brne	.+26     	; 0x29b8 <identify_commands+0x604>
    299e:	d8 01       	movw	r26, r16
    29a0:	11 96       	adiw	r26, 0x01	; 1
    29a2:	9c 91       	ld	r25, X
    29a4:	11 97       	sbiw	r26, 0x01	; 1
    29a6:	92 35       	cpi	r25, 0x52	; 82
    29a8:	39 f4       	brne	.+14     	; 0x29b8 <identify_commands+0x604>
    29aa:	12 96       	adiw	r26, 0x02	; 2
    29ac:	9c 91       	ld	r25, X
    29ae:	91 34       	cpi	r25, 0x41	; 65
    29b0:	19 f4       	brne	.+6      	; 0x29b8 <identify_commands+0x604>
    29b2:	0e 94 b7 10 	call	0x216e	; 0x216e <EraseEEPROM>
    29b6:	b5 c1       	rjmp	.+874    	; 0x2d22 <identify_commands+0x96e>
//-49--------------------------------------Load Test Tolerance A--------------------------------------------Looks for "LDA"---------
	else if (buffer[0] == ASCII_L && buffer[1] == ASCII_D && buffer[2] == ASCII_A) SetLoadTestToleranceA(buffer);
    29b8:	8c 34       	cpi	r24, 0x4C	; 76
    29ba:	59 f4       	brne	.+22     	; 0x29d2 <identify_commands+0x61e>
    29bc:	f8 01       	movw	r30, r16
    29be:	91 81       	ldd	r25, Z+1	; 0x01
    29c0:	94 34       	cpi	r25, 0x44	; 68
    29c2:	39 f4       	brne	.+14     	; 0x29d2 <identify_commands+0x61e>
    29c4:	92 81       	ldd	r25, Z+2	; 0x02
    29c6:	91 34       	cpi	r25, 0x41	; 65
    29c8:	21 f4       	brne	.+8      	; 0x29d2 <identify_commands+0x61e>
    29ca:	c8 01       	movw	r24, r16
    29cc:	0e 94 de 10 	call	0x21bc	; 0x21bc <SetLoadTestToleranceA>
    29d0:	a8 c1       	rjmp	.+848    	; 0x2d22 <identify_commands+0x96e>
//-50--------------------------------------Load Test Tolerance B--------------------------------------------Looks for "LDB"---------
	else if (buffer[0] == ASCII_L && buffer[1] == ASCII_D && buffer[2] == ASCII_B) SetLoadTestToleranceB(buffer);
    29d2:	8c 34       	cpi	r24, 0x4C	; 76
    29d4:	71 f4       	brne	.+28     	; 0x29f2 <identify_commands+0x63e>
    29d6:	d8 01       	movw	r26, r16
    29d8:	11 96       	adiw	r26, 0x01	; 1
    29da:	9c 91       	ld	r25, X
    29dc:	11 97       	sbiw	r26, 0x01	; 1
    29de:	94 34       	cpi	r25, 0x44	; 68
    29e0:	41 f4       	brne	.+16     	; 0x29f2 <identify_commands+0x63e>
    29e2:	12 96       	adiw	r26, 0x02	; 2
    29e4:	9c 91       	ld	r25, X
    29e6:	92 34       	cpi	r25, 0x42	; 66
    29e8:	21 f4       	brne	.+8      	; 0x29f2 <identify_commands+0x63e>
    29ea:	c8 01       	movw	r24, r16
    29ec:	0e 94 0a 11 	call	0x2214	; 0x2214 <SetLoadTestToleranceB>
    29f0:	98 c1       	rjmp	.+816    	; 0x2d22 <identify_commands+0x96e>
//-51--------------------------------------Start Auto Cal---------------------------------------------------Looks for "CL1"---------
	else if (buffer[0] == ASCII_C && buffer[1] == ASCII_L && buffer[2] == ASCII_1) BeginAutoCalibration(&cal,buffer);
    29f2:	83 34       	cpi	r24, 0x43	; 67
    29f4:	69 f4       	brne	.+26     	; 0x2a10 <identify_commands+0x65c>
    29f6:	f8 01       	movw	r30, r16
    29f8:	91 81       	ldd	r25, Z+1	; 0x01
    29fa:	9c 34       	cpi	r25, 0x4C	; 76
    29fc:	49 f4       	brne	.+18     	; 0x2a10 <identify_commands+0x65c>
    29fe:	92 81       	ldd	r25, Z+2	; 0x02
    2a00:	91 33       	cpi	r25, 0x31	; 49
    2a02:	31 f4       	brne	.+12     	; 0x2a10 <identify_commands+0x65c>
    2a04:	b8 01       	movw	r22, r16
    2a06:	8d ea       	ldi	r24, 0xAD	; 173
    2a08:	92 e5       	ldi	r25, 0x52	; 82
    2a0a:	0e 94 a3 01 	call	0x346	; 0x346 <BeginAutoCalibration>
    2a0e:	89 c1       	rjmp	.+786    	; 0x2d22 <identify_commands+0x96e>
//-52--------------------------------------Enter calibration value 66---------------------------------------Looks for "CL2"---------
	else if (buffer[0] == ASCII_C && buffer[1] == ASCII_L && buffer[2] == ASCII_2) EnterCalValue66(&cal);
    2a10:	83 34       	cpi	r24, 0x43	; 67
    2a12:	79 f4       	brne	.+30     	; 0x2a32 <identify_commands+0x67e>
    2a14:	d8 01       	movw	r26, r16
    2a16:	11 96       	adiw	r26, 0x01	; 1
    2a18:	9c 91       	ld	r25, X
    2a1a:	11 97       	sbiw	r26, 0x01	; 1
    2a1c:	9c 34       	cpi	r25, 0x4C	; 76
    2a1e:	49 f4       	brne	.+18     	; 0x2a32 <identify_commands+0x67e>
    2a20:	12 96       	adiw	r26, 0x02	; 2
    2a22:	9c 91       	ld	r25, X
    2a24:	92 33       	cpi	r25, 0x32	; 50
    2a26:	29 f4       	brne	.+10     	; 0x2a32 <identify_commands+0x67e>
    2a28:	8d ea       	ldi	r24, 0xAD	; 173
    2a2a:	92 e5       	ldi	r25, 0x52	; 82
    2a2c:	0e 94 2e 02 	call	0x45c	; 0x45c <EnterCalValue66>
    2a30:	78 c1       	rjmp	.+752    	; 0x2d22 <identify_commands+0x96e>
//-53--------------------------------------Enter calibration value 10---------------------------------------Looks for "CL3"---------
	else if (buffer[0] == ASCII_C && buffer[1] == ASCII_L && buffer[2] == ASCII_3) EnterCalValue69(&cal);
    2a32:	83 34       	cpi	r24, 0x43	; 67
    2a34:	61 f4       	brne	.+24     	; 0x2a4e <identify_commands+0x69a>
    2a36:	f8 01       	movw	r30, r16
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	9c 34       	cpi	r25, 0x4C	; 76
    2a3c:	41 f4       	brne	.+16     	; 0x2a4e <identify_commands+0x69a>
    2a3e:	92 81       	ldd	r25, Z+2	; 0x02
    2a40:	93 33       	cpi	r25, 0x33	; 51
    2a42:	29 f4       	brne	.+10     	; 0x2a4e <identify_commands+0x69a>
    2a44:	8d ea       	ldi	r24, 0xAD	; 173
    2a46:	92 e5       	ldi	r25, 0x52	; 82
    2a48:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <EnterCalValue69>
    2a4c:	6a c1       	rjmp	.+724    	; 0x2d22 <identify_commands+0x96e>
//-54--------------------------------------Enter calibration value 20---------------------------------------Looks for "CL4"---------
	else if (buffer[0] == ASCII_C && buffer[1] == ASCII_L && buffer[2] == ASCII_4) EnterCalValue20(&cal);
    2a4e:	83 34       	cpi	r24, 0x43	; 67
    2a50:	79 f4       	brne	.+30     	; 0x2a70 <identify_commands+0x6bc>
    2a52:	d8 01       	movw	r26, r16
    2a54:	11 96       	adiw	r26, 0x01	; 1
    2a56:	9c 91       	ld	r25, X
    2a58:	11 97       	sbiw	r26, 0x01	; 1
    2a5a:	9c 34       	cpi	r25, 0x4C	; 76
    2a5c:	49 f4       	brne	.+18     	; 0x2a70 <identify_commands+0x6bc>
    2a5e:	12 96       	adiw	r26, 0x02	; 2
    2a60:	9c 91       	ld	r25, X
    2a62:	94 33       	cpi	r25, 0x34	; 52
    2a64:	29 f4       	brne	.+10     	; 0x2a70 <identify_commands+0x6bc>
    2a66:	8d ea       	ldi	r24, 0xAD	; 173
    2a68:	92 e5       	ldi	r25, 0x52	; 82
    2a6a:	0e 94 c4 02 	call	0x588	; 0x588 <EnterCalValue20>
    2a6e:	59 c1       	rjmp	.+690    	; 0x2d22 <identify_commands+0x96e>
//-55--------------------------------------Run Auto Calibration---------------------------------------------Looks for "CL5"---------
	else if (buffer[0] == ASCII_C && buffer[1] == ASCII_L && buffer[2] == ASCII_5) RunAutoCalibration(&cal);
    2a70:	83 34       	cpi	r24, 0x43	; 67
    2a72:	61 f4       	brne	.+24     	; 0x2a8c <identify_commands+0x6d8>
    2a74:	f8 01       	movw	r30, r16
    2a76:	91 81       	ldd	r25, Z+1	; 0x01
    2a78:	9c 34       	cpi	r25, 0x4C	; 76
    2a7a:	41 f4       	brne	.+16     	; 0x2a8c <identify_commands+0x6d8>
    2a7c:	92 81       	ldd	r25, Z+2	; 0x02
    2a7e:	95 33       	cpi	r25, 0x35	; 53
    2a80:	29 f4       	brne	.+10     	; 0x2a8c <identify_commands+0x6d8>
    2a82:	8d ea       	ldi	r24, 0xAD	; 173
    2a84:	92 e5       	ldi	r25, 0x52	; 82
    2a86:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <RunAutoCalibration>
    2a8a:	4b c1       	rjmp	.+662    	; 0x2d22 <identify_commands+0x96e>
//-56--------------------------------------Save Auto Calibration--------------------------------------------Looks for "CL6"---------			
	else if (buffer[0] == ASCII_C && buffer[1] == ASCII_L && buffer[2] == ASCII_6) SaveAutoCalibration(&cal);
    2a8c:	83 34       	cpi	r24, 0x43	; 67
    2a8e:	79 f4       	brne	.+30     	; 0x2aae <identify_commands+0x6fa>
    2a90:	d8 01       	movw	r26, r16
    2a92:	11 96       	adiw	r26, 0x01	; 1
    2a94:	9c 91       	ld	r25, X
    2a96:	11 97       	sbiw	r26, 0x01	; 1
    2a98:	9c 34       	cpi	r25, 0x4C	; 76
    2a9a:	49 f4       	brne	.+18     	; 0x2aae <identify_commands+0x6fa>
    2a9c:	12 96       	adiw	r26, 0x02	; 2
    2a9e:	9c 91       	ld	r25, X
    2aa0:	96 33       	cpi	r25, 0x36	; 54
    2aa2:	29 f4       	brne	.+10     	; 0x2aae <identify_commands+0x6fa>
    2aa4:	8d ea       	ldi	r24, 0xAD	; 173
    2aa6:	92 e5       	ldi	r25, 0x52	; 82
    2aa8:	0e 94 3a 06 	call	0xc74	; 0xc74 <SaveAutoCalibration>
    2aac:	3a c1       	rjmp	.+628    	; 0x2d22 <identify_commands+0x96e>
//-57--------------------------------------Save Auto Calibration--------------------------------------------Looks for "CL7"---------
	else if (buffer[0] == ASCII_C && buffer[1] == ASCII_L && buffer[2] == ASCII_7) EnterCalValue69(&cal);
    2aae:	83 34       	cpi	r24, 0x43	; 67
    2ab0:	61 f4       	brne	.+24     	; 0x2aca <identify_commands+0x716>
    2ab2:	f8 01       	movw	r30, r16
    2ab4:	91 81       	ldd	r25, Z+1	; 0x01
    2ab6:	9c 34       	cpi	r25, 0x4C	; 76
    2ab8:	41 f4       	brne	.+16     	; 0x2aca <identify_commands+0x716>
    2aba:	92 81       	ldd	r25, Z+2	; 0x02
    2abc:	97 33       	cpi	r25, 0x37	; 55
    2abe:	29 f4       	brne	.+10     	; 0x2aca <identify_commands+0x716>
    2ac0:	8d ea       	ldi	r24, 0xAD	; 173
    2ac2:	92 e5       	ldi	r25, 0x52	; 82
    2ac4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <EnterCalValue69>
    2ac8:	2c c1       	rjmp	.+600    	; 0x2d22 <identify_commands+0x96e>
//-58--------------------------------------Echo 1--------------------------------------------Looks for "EC1"------------------------
	else if (buffer[0] == ASCII_E && buffer[1] == ASCII_C && buffer[2] == ASCII_1) EchoOne(buffer);
    2aca:	85 34       	cpi	r24, 0x45	; 69
    2acc:	71 f4       	brne	.+28     	; 0x2aea <identify_commands+0x736>
    2ace:	d8 01       	movw	r26, r16
    2ad0:	11 96       	adiw	r26, 0x01	; 1
    2ad2:	9c 91       	ld	r25, X
    2ad4:	11 97       	sbiw	r26, 0x01	; 1
    2ad6:	93 34       	cpi	r25, 0x43	; 67
    2ad8:	41 f4       	brne	.+16     	; 0x2aea <identify_commands+0x736>
    2ada:	12 96       	adiw	r26, 0x02	; 2
    2adc:	9c 91       	ld	r25, X
    2ade:	91 33       	cpi	r25, 0x31	; 49
    2ae0:	21 f4       	brne	.+8      	; 0x2aea <identify_commands+0x736>
    2ae2:	c8 01       	movw	r24, r16
    2ae4:	0e 94 36 11 	call	0x226c	; 0x226c <EchoOne>
    2ae8:	1c c1       	rjmp	.+568    	; 0x2d22 <identify_commands+0x96e>
//-59--------------------------------------Echo 2--------------------------------------------Looks for "EC2"------------------------
	else if (buffer[0] == ASCII_E && buffer[1] == ASCII_C && buffer[2] == ASCII_2) EchoTwo(buffer);
    2aea:	85 34       	cpi	r24, 0x45	; 69
    2aec:	59 f4       	brne	.+22     	; 0x2b04 <identify_commands+0x750>
    2aee:	f8 01       	movw	r30, r16
    2af0:	91 81       	ldd	r25, Z+1	; 0x01
    2af2:	93 34       	cpi	r25, 0x43	; 67
    2af4:	39 f4       	brne	.+14     	; 0x2b04 <identify_commands+0x750>
    2af6:	92 81       	ldd	r25, Z+2	; 0x02
    2af8:	92 33       	cpi	r25, 0x32	; 50
    2afa:	21 f4       	brne	.+8      	; 0x2b04 <identify_commands+0x750>
    2afc:	c8 01       	movw	r24, r16
    2afe:	0e 94 5d 11 	call	0x22ba	; 0x22ba <EchoTwo>
    2b02:	0f c1       	rjmp	.+542    	; 0x2d22 <identify_commands+0x96e>
//-60--------------------------------------echo 3--------------------------------------------Looks for "EC3"------------------------
	else if (buffer[0] == ASCII_E && buffer[1] == ASCII_C && buffer[2] == ASCII_3) EchoThree(buffer);
    2b04:	85 34       	cpi	r24, 0x45	; 69
    2b06:	71 f4       	brne	.+28     	; 0x2b24 <identify_commands+0x770>
    2b08:	d8 01       	movw	r26, r16
    2b0a:	11 96       	adiw	r26, 0x01	; 1
    2b0c:	9c 91       	ld	r25, X
    2b0e:	11 97       	sbiw	r26, 0x01	; 1
    2b10:	93 34       	cpi	r25, 0x43	; 67
    2b12:	41 f4       	brne	.+16     	; 0x2b24 <identify_commands+0x770>
    2b14:	12 96       	adiw	r26, 0x02	; 2
    2b16:	9c 91       	ld	r25, X
    2b18:	93 33       	cpi	r25, 0x33	; 51
    2b1a:	21 f4       	brne	.+8      	; 0x2b24 <identify_commands+0x770>
    2b1c:	c8 01       	movw	r24, r16
    2b1e:	0e 94 84 11 	call	0x2308	; 0x2308 <EchoThree>
    2b22:	ff c0       	rjmp	.+510    	; 0x2d22 <identify_commands+0x96e>
//-61--------------------------------------Echo 4--------------------------------------------Looks for "EC4"------------------------
	else if (buffer[0] == ASCII_E && buffer[1] == ASCII_C && buffer[2] == ASCII_4) EchoOne(buffer);
    2b24:	85 34       	cpi	r24, 0x45	; 69
    2b26:	59 f4       	brne	.+22     	; 0x2b3e <identify_commands+0x78a>
    2b28:	f8 01       	movw	r30, r16
    2b2a:	91 81       	ldd	r25, Z+1	; 0x01
    2b2c:	93 34       	cpi	r25, 0x43	; 67
    2b2e:	39 f4       	brne	.+14     	; 0x2b3e <identify_commands+0x78a>
    2b30:	92 81       	ldd	r25, Z+2	; 0x02
    2b32:	94 33       	cpi	r25, 0x34	; 52
    2b34:	21 f4       	brne	.+8      	; 0x2b3e <identify_commands+0x78a>
    2b36:	c8 01       	movw	r24, r16
    2b38:	0e 94 36 11 	call	0x226c	; 0x226c <EchoOne>
    2b3c:	f2 c0       	rjmp	.+484    	; 0x2d22 <identify_commands+0x96e>
//-62--------------------------------------Echo 5--------------------------------------------Looks for "EC5"------------------------
	else if (buffer[0] == ASCII_E && buffer[1] == ASCII_C && buffer[2] == ASCII_5) EchoTwo(buffer);
    2b3e:	85 34       	cpi	r24, 0x45	; 69
    2b40:	71 f4       	brne	.+28     	; 0x2b5e <identify_commands+0x7aa>
    2b42:	d8 01       	movw	r26, r16
    2b44:	11 96       	adiw	r26, 0x01	; 1
    2b46:	9c 91       	ld	r25, X
    2b48:	11 97       	sbiw	r26, 0x01	; 1
    2b4a:	93 34       	cpi	r25, 0x43	; 67
    2b4c:	41 f4       	brne	.+16     	; 0x2b5e <identify_commands+0x7aa>
    2b4e:	12 96       	adiw	r26, 0x02	; 2
    2b50:	9c 91       	ld	r25, X
    2b52:	95 33       	cpi	r25, 0x35	; 53
    2b54:	21 f4       	brne	.+8      	; 0x2b5e <identify_commands+0x7aa>
    2b56:	c8 01       	movw	r24, r16
    2b58:	0e 94 5d 11 	call	0x22ba	; 0x22ba <EchoTwo>
    2b5c:	e2 c0       	rjmp	.+452    	; 0x2d22 <identify_commands+0x96e>
//-63--------------------------------------echo 6--------------------------------------------Looks for "EC6"------------------------
	else if (buffer[0] == ASCII_E && buffer[1] == ASCII_C && buffer[2] == ASCII_6) EchoThree(buffer);
    2b5e:	85 34       	cpi	r24, 0x45	; 69
    2b60:	59 f4       	brne	.+22     	; 0x2b78 <identify_commands+0x7c4>
    2b62:	f8 01       	movw	r30, r16
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	93 34       	cpi	r25, 0x43	; 67
    2b68:	39 f4       	brne	.+14     	; 0x2b78 <identify_commands+0x7c4>
    2b6a:	92 81       	ldd	r25, Z+2	; 0x02
    2b6c:	96 33       	cpi	r25, 0x36	; 54
    2b6e:	21 f4       	brne	.+8      	; 0x2b78 <identify_commands+0x7c4>
    2b70:	c8 01       	movw	r24, r16
    2b72:	0e 94 84 11 	call	0x2308	; 0x2308 <EchoThree>
    2b76:	d5 c0       	rjmp	.+426    	; 0x2d22 <identify_commands+0x96e>
//-64--------------------------------------echo 6--------------------------------------------Looks for "OVB"------------------------
	else if (buffer[0] == ASCII_O && buffer[1] == ASCII_V && buffer[2] == ASCII_B) OverrideBluetoothLowBattery(buffer);     // Command to override Bluetooth low battery shutdown.
    2b78:	8f 34       	cpi	r24, 0x4F	; 79
    2b7a:	59 f4       	brne	.+22     	; 0x2b92 <identify_commands+0x7de>
    2b7c:	d8 01       	movw	r26, r16
    2b7e:	11 96       	adiw	r26, 0x01	; 1
    2b80:	9c 91       	ld	r25, X
    2b82:	11 97       	sbiw	r26, 0x01	; 1
    2b84:	96 35       	cpi	r25, 0x56	; 86
    2b86:	29 f4       	brne	.+10     	; 0x2b92 <identify_commands+0x7de>
    2b88:	12 96       	adiw	r26, 0x02	; 2
    2b8a:	9c 91       	ld	r25, X
    2b8c:	92 34       	cpi	r25, 0x42	; 66
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <identify_commands+0x7de>
    2b90:	c8 c0       	rjmp	.+400    	; 0x2d22 <identify_commands+0x96e>

//#ifdef FifthGen
	//-65--------------------------------------LL On--------------------------------------------Turn On Light Load------------------------
		else if (buffer[0] == ASCII_L && buffer[1] == ASCII_L && buffer[2] == ASCII_Y) LightLoadOn(buffer);	
    2b92:	8c 34       	cpi	r24, 0x4C	; 76
    2b94:	59 f4       	brne	.+22     	; 0x2bac <identify_commands+0x7f8>
    2b96:	f8 01       	movw	r30, r16
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	9c 34       	cpi	r25, 0x4C	; 76
    2b9c:	39 f4       	brne	.+14     	; 0x2bac <identify_commands+0x7f8>
    2b9e:	92 81       	ldd	r25, Z+2	; 0x02
    2ba0:	99 35       	cpi	r25, 0x59	; 89
    2ba2:	21 f4       	brne	.+8      	; 0x2bac <identify_commands+0x7f8>
    2ba4:	c8 01       	movw	r24, r16
    2ba6:	0e 94 cc 11 	call	0x2398	; 0x2398 <LightLoadOn>
    2baa:	bb c0       	rjmp	.+374    	; 0x2d22 <identify_commands+0x96e>
	//-66--------------------------------------LL Off-------------------------------------------Turn Off Light Load------------------------
		else if (buffer[0] == ASCII_L && buffer[1] == ASCII_L && buffer[2] == ASCII_N) LightLoadOff(buffer);
    2bac:	8c 34       	cpi	r24, 0x4C	; 76
    2bae:	71 f4       	brne	.+28     	; 0x2bcc <identify_commands+0x818>
    2bb0:	d8 01       	movw	r26, r16
    2bb2:	11 96       	adiw	r26, 0x01	; 1
    2bb4:	9c 91       	ld	r25, X
    2bb6:	11 97       	sbiw	r26, 0x01	; 1
    2bb8:	9c 34       	cpi	r25, 0x4C	; 76
    2bba:	41 f4       	brne	.+16     	; 0x2bcc <identify_commands+0x818>
    2bbc:	12 96       	adiw	r26, 0x02	; 2
    2bbe:	9c 91       	ld	r25, X
    2bc0:	9e 34       	cpi	r25, 0x4E	; 78
    2bc2:	21 f4       	brne	.+8      	; 0x2bcc <identify_commands+0x818>
    2bc4:	c8 01       	movw	r24, r16
    2bc6:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <LightLoadOff>
    2bca:	ab c0       	rjmp	.+342    	; 0x2d22 <identify_commands+0x96e>
//#endif	

//-67--------------------------------------Ry On--------------------------------------------Turn On Main Load---------RYY---------------
	else if (buffer[0] == ASCII_R && buffer[1] == ASCII_Y && buffer[2] == ASCII_Y) Load_Relay_set_level(false);
    2bcc:	82 35       	cpi	r24, 0x52	; 82
    2bce:	59 f4       	brne	.+22     	; 0x2be6 <identify_commands+0x832>
    2bd0:	f8 01       	movw	r30, r16
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	99 35       	cpi	r25, 0x59	; 89
    2bd6:	39 f4       	brne	.+14     	; 0x2be6 <identify_commands+0x832>
    2bd8:	92 81       	ldd	r25, Z+2	; 0x02
    2bda:	99 35       	cpi	r25, 0x59	; 89
    2bdc:	21 f4       	brne	.+8      	; 0x2be6 <identify_commands+0x832>
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    2bde:	85 b3       	in	r24, 0x15	; 21
    2be0:	8f 7e       	andi	r24, 0xEF	; 239
    2be2:	85 bb       	out	0x15, r24	; 21
    2be4:	9e c0       	rjmp	.+316    	; 0x2d22 <identify_commands+0x96e>
//-68--------------------------------------Ry Off-------------------------------------------Turn Off Main Load--------RYN----------------
	else if (buffer[0] == ASCII_R && buffer[1] == ASCII_Y && buffer[2] == ASCII_N) Load_Relay_set_level(true);
    2be6:	82 35       	cpi	r24, 0x52	; 82
    2be8:	71 f4       	brne	.+28     	; 0x2c06 <identify_commands+0x852>
    2bea:	d8 01       	movw	r26, r16
    2bec:	11 96       	adiw	r26, 0x01	; 1
    2bee:	9c 91       	ld	r25, X
    2bf0:	11 97       	sbiw	r26, 0x01	; 1
    2bf2:	99 35       	cpi	r25, 0x59	; 89
    2bf4:	41 f4       	brne	.+16     	; 0x2c06 <identify_commands+0x852>
    2bf6:	12 96       	adiw	r26, 0x02	; 2
    2bf8:	9c 91       	ld	r25, X
    2bfa:	9e 34       	cpi	r25, 0x4E	; 78
    2bfc:	21 f4       	brne	.+8      	; 0x2c06 <identify_commands+0x852>
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
    2bfe:	85 b3       	in	r24, 0x15	; 21
    2c00:	80 61       	ori	r24, 0x10	; 16
    2c02:	85 bb       	out	0x15, r24	; 21
    2c04:	8e c0       	rjmp	.+284    	; 0x2d22 <identify_commands+0x96e>
//----------------------------------------------------------------------------------------------------------------------------------

//.69..........................................Sets HS thermistor calibration 1-----------------------Looks for "HS3"--------------
else if (buffer[0] == ASCII_H && buffer[1] == ASCII_S && buffer[2] == ASCII_3) HSThermistorCalOne(buffer);
    2c06:	88 34       	cpi	r24, 0x48	; 72
    2c08:	59 f4       	brne	.+22     	; 0x2c20 <identify_commands+0x86c>
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	91 81       	ldd	r25, Z+1	; 0x01
    2c0e:	93 35       	cpi	r25, 0x53	; 83
    2c10:	39 f4       	brne	.+14     	; 0x2c20 <identify_commands+0x86c>
    2c12:	92 81       	ldd	r25, Z+2	; 0x02
    2c14:	93 33       	cpi	r25, 0x33	; 51
    2c16:	21 f4       	brne	.+8      	; 0x2c20 <identify_commands+0x86c>
    2c18:	c8 01       	movw	r24, r16
    2c1a:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <HSThermistorCalOne>
    2c1e:	81 c0       	rjmp	.+258    	; 0x2d22 <identify_commands+0x96e>
//.70..........................................Sets HS thermistor calibration 2-----------------------Looks for "HS4"--------------
else if (buffer[0] == ASCII_H && buffer[1] == ASCII_S && buffer[2] == ASCII_4) HSThermistorCal2(buffer);
    2c20:	88 34       	cpi	r24, 0x48	; 72
    2c22:	71 f4       	brne	.+28     	; 0x2c40 <identify_commands+0x88c>
    2c24:	d8 01       	movw	r26, r16
    2c26:	11 96       	adiw	r26, 0x01	; 1
    2c28:	9c 91       	ld	r25, X
    2c2a:	11 97       	sbiw	r26, 0x01	; 1
    2c2c:	93 35       	cpi	r25, 0x53	; 83
    2c2e:	41 f4       	brne	.+16     	; 0x2c40 <identify_commands+0x88c>
    2c30:	12 96       	adiw	r26, 0x02	; 2
    2c32:	9c 91       	ld	r25, X
    2c34:	94 33       	cpi	r25, 0x34	; 52
    2c36:	21 f4       	brne	.+8      	; 0x2c40 <identify_commands+0x88c>
    2c38:	c8 01       	movw	r24, r16
    2c3a:	0e 94 91 0b 	call	0x1722	; 0x1722 <HSThermistorCal2>
    2c3e:	71 c0       	rjmp	.+226    	; 0x2d22 <identify_commands+0x96e>
//.71..........................................Sets HS thermistor calibration 3------Looks for "HS5"..Currently none of the thermistor cal factors are used
else if (buffer[0] == ASCII_H && buffer[1] == ASCII_S && buffer[2] == ASCII_5) HSThermistorCal3(buffer);
    2c40:	88 34       	cpi	r24, 0x48	; 72
    2c42:	59 f4       	brne	.+22     	; 0x2c5a <identify_commands+0x8a6>
    2c44:	f8 01       	movw	r30, r16
    2c46:	91 81       	ldd	r25, Z+1	; 0x01
    2c48:	93 35       	cpi	r25, 0x53	; 83
    2c4a:	39 f4       	brne	.+14     	; 0x2c5a <identify_commands+0x8a6>
    2c4c:	92 81       	ldd	r25, Z+2	; 0x02
    2c4e:	95 33       	cpi	r25, 0x35	; 53
    2c50:	21 f4       	brne	.+8      	; 0x2c5a <identify_commands+0x8a6>
    2c52:	c8 01       	movw	r24, r16
    2c54:	0e 94 cd 0b 	call	0x179a	; 0x179a <HSThermistorCal3>
    2c58:	64 c0       	rjmp	.+200    	; 0x2d22 <identify_commands+0x96e>
//.72..........................................Sets HS thermistor offset...........Looks for "HS6"..should be changed to be consistent with other data saving formats.but works ok
else if (buffer[0] == ASCII_H && buffer[1] == ASCII_S && buffer[2] == ASCII_6) HSThermistorOffset(buffer,string);
    2c5a:	88 34       	cpi	r24, 0x48	; 72
    2c5c:	89 f4       	brne	.+34     	; 0x2c80 <identify_commands+0x8cc>
    2c5e:	d8 01       	movw	r26, r16
    2c60:	11 96       	adiw	r26, 0x01	; 1
    2c62:	9c 91       	ld	r25, X
    2c64:	11 97       	sbiw	r26, 0x01	; 1
    2c66:	93 35       	cpi	r25, 0x53	; 83
    2c68:	59 f4       	brne	.+22     	; 0x2c80 <identify_commands+0x8cc>
    2c6a:	12 96       	adiw	r26, 0x02	; 2
    2c6c:	9c 91       	ld	r25, X
    2c6e:	96 33       	cpi	r25, 0x36	; 54
    2c70:	39 f4       	brne	.+14     	; 0x2c80 <identify_commands+0x8cc>
    2c72:	be 01       	movw	r22, r28
    2c74:	6f 5f       	subi	r22, 0xFF	; 255
    2c76:	7f 4f       	sbci	r23, 0xFF	; 255
    2c78:	c8 01       	movw	r24, r16
    2c7a:	0e 94 09 0c 	call	0x1812	; 0x1812 <HSThermistorOffset>
    2c7e:	51 c0       	rjmp	.+162    	; 0x2d22 <identify_commands+0x96e>
//.73..........................................Sets HS thermistor resistor calibration A------------Looks for "HS1"-----------
else if (buffer[0] == ASCII_H && buffer[1] == ASCII_S && buffer[2] == ASCII_1) HSThermistorCalA(buffer);
    2c80:	88 34       	cpi	r24, 0x48	; 72
    2c82:	59 f4       	brne	.+22     	; 0x2c9a <identify_commands+0x8e6>
    2c84:	f8 01       	movw	r30, r16
    2c86:	91 81       	ldd	r25, Z+1	; 0x01
    2c88:	93 35       	cpi	r25, 0x53	; 83
    2c8a:	39 f4       	brne	.+14     	; 0x2c9a <identify_commands+0x8e6>
    2c8c:	92 81       	ldd	r25, Z+2	; 0x02
    2c8e:	91 33       	cpi	r25, 0x31	; 49
    2c90:	21 f4       	brne	.+8      	; 0x2c9a <identify_commands+0x8e6>
    2c92:	c8 01       	movw	r24, r16
    2c94:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <HSThermistorCalA>
    2c98:	44 c0       	rjmp	.+136    	; 0x2d22 <identify_commands+0x96e>
//.74..........................................Sets HS thermistor resistor calibration B------------Looks for "HS2"-----------
else if (buffer[0] == ASCII_H && buffer[1] == ASCII_S && buffer[2] == ASCII_2) HSThermistorCalB(buffer);
    2c9a:	88 34       	cpi	r24, 0x48	; 72
    2c9c:	71 f4       	brne	.+28     	; 0x2cba <identify_commands+0x906>
    2c9e:	d8 01       	movw	r26, r16
    2ca0:	11 96       	adiw	r26, 0x01	; 1
    2ca2:	9c 91       	ld	r25, X
    2ca4:	11 97       	sbiw	r26, 0x01	; 1
    2ca6:	93 35       	cpi	r25, 0x53	; 83
    2ca8:	41 f4       	brne	.+16     	; 0x2cba <identify_commands+0x906>
    2caa:	12 96       	adiw	r26, 0x02	; 2
    2cac:	9c 91       	ld	r25, X
    2cae:	92 33       	cpi	r25, 0x32	; 50
    2cb0:	21 f4       	brne	.+8      	; 0x2cba <identify_commands+0x906>
    2cb2:	c8 01       	movw	r24, r16
    2cb4:	0e 94 27 0b 	call	0x164e	; 0x164e <HSThermistorCalB>
    2cb8:	34 c0       	rjmp	.+104    	; 0x2d22 <identify_commands+0x96e>
//.75..........................................Sets resistor zero calibration ------------Looks for "CA5"-----------
else if (buffer[0] == ASCII_C && buffer[1] == ASCII_A && buffer[2] == ASCII_5) ResistorZeroCal(buffer);
    2cba:	83 34       	cpi	r24, 0x43	; 67
    2cbc:	39 f4       	brne	.+14     	; 0x2ccc <identify_commands+0x918>
    2cbe:	f8 01       	movw	r30, r16
    2cc0:	91 81       	ldd	r25, Z+1	; 0x01
    2cc2:	91 34       	cpi	r25, 0x41	; 65
    2cc4:	19 f4       	brne	.+6      	; 0x2ccc <identify_commands+0x918>
    2cc6:	92 81       	ldd	r25, Z+2	; 0x02
    2cc8:	95 33       	cpi	r25, 0x35	; 53
    2cca:	59 f1       	breq	.+86     	; 0x2d22 <identify_commands+0x96e>
//.76..........................................Sets LX voltage calibration ------------Looks for "LXB"-----------
else if (buffer[0] == ASCII_L && buffer[1] == ASCII_X && buffer[2] == ASCII_B) LXvoltageCal(buffer);
    2ccc:	8c 34       	cpi	r24, 0x4C	; 76
    2cce:	71 f4       	brne	.+28     	; 0x2cec <identify_commands+0x938>
    2cd0:	d8 01       	movw	r26, r16
    2cd2:	11 96       	adiw	r26, 0x01	; 1
    2cd4:	9c 91       	ld	r25, X
    2cd6:	11 97       	sbiw	r26, 0x01	; 1
    2cd8:	98 35       	cpi	r25, 0x58	; 88
    2cda:	41 f4       	brne	.+16     	; 0x2cec <identify_commands+0x938>
    2cdc:	12 96       	adiw	r26, 0x02	; 2
    2cde:	9c 91       	ld	r25, X
    2ce0:	92 34       	cpi	r25, 0x42	; 66
    2ce2:	21 f4       	brne	.+8      	; 0x2cec <identify_commands+0x938>
    2ce4:	c8 01       	movw	r24, r16
    2ce6:	0e 94 a0 11 	call	0x2340	; 0x2340 <LXvoltageCal>
    2cea:	1b c0       	rjmp	.+54     	; 0x2d22 <identify_commands+0x96e>
//.77..........................................Sets LX voltage calibration ------------Looks for "TRY"-----------
else if (buffer[0] == ASCII_T && buffer[1] == ASCII_R && buffer[2] == ASCII_Y) KeepTRelayOn = true;
    2cec:	84 35       	cpi	r24, 0x54	; 84
    2cee:	59 f4       	brne	.+22     	; 0x2d06 <identify_commands+0x952>
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	91 81       	ldd	r25, Z+1	; 0x01
    2cf4:	92 35       	cpi	r25, 0x52	; 82
    2cf6:	39 f4       	brne	.+14     	; 0x2d06 <identify_commands+0x952>
    2cf8:	92 81       	ldd	r25, Z+2	; 0x02
    2cfa:	99 35       	cpi	r25, 0x59	; 89
    2cfc:	21 f4       	brne	.+8      	; 0x2d06 <identify_commands+0x952>
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	80 93 fb 53 	sts	0x53FB, r24	; 0x8053fb <KeepTRelayOn>
    2d04:	0e c0       	rjmp	.+28     	; 0x2d22 <identify_commands+0x96e>
//.78..........................................Sets LX voltage calibration ------------Looks for "TRN"-----------
else if (buffer[0] == ASCII_T && buffer[1] == ASCII_R && buffer[2] == ASCII_N) KeepTRelayOn = false;
    2d06:	84 35       	cpi	r24, 0x54	; 84
    2d08:	61 f4       	brne	.+24     	; 0x2d22 <identify_commands+0x96e>
    2d0a:	d8 01       	movw	r26, r16
    2d0c:	11 96       	adiw	r26, 0x01	; 1
    2d0e:	8c 91       	ld	r24, X
    2d10:	11 97       	sbiw	r26, 0x01	; 1
    2d12:	82 35       	cpi	r24, 0x52	; 82
    2d14:	31 f4       	brne	.+12     	; 0x2d22 <identify_commands+0x96e>
    2d16:	12 96       	adiw	r26, 0x02	; 2
    2d18:	8c 91       	ld	r24, X
    2d1a:	8e 34       	cpi	r24, 0x4E	; 78
    2d1c:	11 f4       	brne	.+4      	; 0x2d22 <identify_commands+0x96e>
    2d1e:	10 92 fb 53 	sts	0x53FB, r1	; 0x8053fb <KeepTRelayOn>

	volts_noload.ones = ASCII_charactermap(buffer[3]);
    2d22:	f8 01       	movw	r30, r16
    2d24:	83 81       	ldd	r24, Z+3	; 0x03
    2d26:	0e 94 2d 32 	call	0x645a	; 0x645a <ASCII_charactermap>
    2d2a:	0f 2e       	mov	r0, r31
    2d2c:	f2 e5       	ldi	r31, 0x52	; 82
    2d2e:	ef 2e       	mov	r14, r31
    2d30:	f8 e4       	ldi	r31, 0x48	; 72
    2d32:	ff 2e       	mov	r15, r31
    2d34:	f0 2d       	mov	r31, r0
    2d36:	d7 01       	movw	r26, r14
    2d38:	12 96       	adiw	r26, 0x02	; 2
    2d3a:	8c 93       	st	X, r24
	volts_noload.tens = ASCII_charactermap(buffer[2]);
    2d3c:	f8 01       	movw	r30, r16
    2d3e:	82 81       	ldd	r24, Z+2	; 0x02
    2d40:	0e 94 2d 32 	call	0x645a	; 0x645a <ASCII_charactermap>
    2d44:	d7 01       	movw	r26, r14
    2d46:	11 96       	adiw	r26, 0x01	; 1
    2d48:	8c 93       	st	X, r24
	volts_noload.hundreds = ASCII_charactermap(buffer[1]);
    2d4a:	f8 01       	movw	r30, r16
    2d4c:	81 81       	ldd	r24, Z+1	; 0x01
    2d4e:	0e 94 2d 32 	call	0x645a	; 0x645a <ASCII_charactermap>
    2d52:	d7 01       	movw	r26, r14
    2d54:	8c 93       	st	X, r24
						
	USART_0_enable_rx(); // THIS HAS TO BE A FEW CLOCK CYCLES AWAY FROM DISABLE RX			
    2d56:	0e 94 b5 34 	call	0x696a	; 0x696a <USART_0_enable_rx>
return;
}	// end of Identify Commands							
    2d5a:	6e 96       	adiw	r28, 0x1e	; 30
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	df 91       	pop	r29
    2d62:	cf 91       	pop	r28
    2d64:	1f 91       	pop	r17
    2d66:	0f 91       	pop	r16
    2d68:	ff 90       	pop	r15
    2d6a:	ef 90       	pop	r14
    2d6c:	08 95       	ret

00002d6e <USART0_getString>:
extern uint32_t Unfinished_Business;
char Bluetooth_Name [25];
extern bool OverrideSafeties;

void USART0_getString(void)  //
{
    2d6e:	0f 93       	push	r16
    2d70:	1f 93       	push	r17
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	6e 97       	sbiw	r28, 0x1e	; 30
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	de bf       	out	0x3e, r29	; 62
//BlueLED_set_level(false);	
uint8_t blue_buffer[30];
memset(blue_buffer,0, 30*sizeof(uint8_t));
    2d80:	fe 01       	movw	r30, r28
    2d82:	31 96       	adiw	r30, 0x01	; 1
    2d84:	8e e1       	ldi	r24, 0x1E	; 30
    2d86:	df 01       	movw	r26, r30
    2d88:	1d 92       	st	X+, r1
    2d8a:	8a 95       	dec	r24
    2d8c:	e9 f7       	brne	.-6      	; 0x2d88 <USART0_getString+0x1a>
for (int i = 0; i < 30; i++){		
    2d8e:	00 e0       	ldi	r16, 0x00	; 0
    2d90:	10 e0       	ldi	r17, 0x00	; 0
    2d92:	0f c0       	rjmp	.+30     	; 0x2db2 <USART0_getString+0x44>
	blue_buffer[i] = USART_0_read();
    2d94:	0e 94 c1 34 	call	0x6982	; 0x6982 <USART_0_read>
    2d98:	e1 e0       	ldi	r30, 0x01	; 1
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	ec 0f       	add	r30, r28
    2d9e:	fd 1f       	adc	r31, r29
    2da0:	e0 0f       	add	r30, r16
    2da2:	f1 1f       	adc	r31, r17
    2da4:	80 83       	st	Z, r24
	
	
	if(blue_buffer[i] == 0x0D || blue_buffer[i] == 0x0A){       //  <- could be chR < ' '
    2da6:	8d 30       	cpi	r24, 0x0D	; 13
    2da8:	39 f0       	breq	.+14     	; 0x2db8 <USART0_getString+0x4a>
    2daa:	8a 30       	cpi	r24, 0x0A	; 10
    2dac:	29 f0       	breq	.+10     	; 0x2db8 <USART0_getString+0x4a>
void USART0_getString(void)  //
{
//BlueLED_set_level(false);	
uint8_t blue_buffer[30];
memset(blue_buffer,0, 30*sizeof(uint8_t));
for (int i = 0; i < 30; i++){		
    2dae:	0f 5f       	subi	r16, 0xFF	; 255
    2db0:	1f 4f       	sbci	r17, 0xFF	; 255
    2db2:	0e 31       	cpi	r16, 0x1E	; 30
    2db4:	11 05       	cpc	r17, r1
    2db6:	74 f3       	brlt	.-36     	; 0x2d94 <USART0_getString+0x26>
	
	if(blue_buffer[i] == 0x0D || blue_buffer[i] == 0x0A){       //  <- could be chR < ' '
		break;
		}
	}
identify_commands(blue_buffer);	//see if the received characters match one of the 3 letter commands below
    2db8:	ce 01       	movw	r24, r28
    2dba:	01 96       	adiw	r24, 0x01	; 1
    2dbc:	0e 94 da 11 	call	0x23b4	; 0x23b4 <identify_commands>
//BlueLED_set_level(true);
return;
}
    2dc0:	6e 96       	adiw	r28, 0x1e	; 30
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	de bf       	out	0x3e, r29	; 62
    2dc6:	df 91       	pop	r29
    2dc8:	cf 91       	pop	r28
    2dca:	1f 91       	pop	r17
    2dcc:	0f 91       	pop	r16
    2dce:	08 95       	ret

00002dd0 <RenameBluetooth>:
	sprintf(string,"%s",Bluetooth_Name);
	FLASH_0_write_eeprom_block(EEPROM_Bluetooth_Name,buffer+3,25);
	FLASH_0_write_eeprom_byte(EEPROM_New_Bluetooth_Name,ASCII_1);
}
//-------------------------------------------------------------------------------------------------------------
void RenameBluetooth(void){			//called from Main
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
    2ddc:	a8 97       	sbiw	r28, 0x28	; 40
    2dde:	cd bf       	out	0x3d, r28	; 61
    2de0:	de bf       	out	0x3e, r29	; 62
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    2de2:	85 b1       	in	r24, 0x05	; 5
    2de4:	80 61       	ori	r24, 0x10	; 16
    2de6:	85 b9       	out	0x05, r24	; 5
	PWR_ON_set_level(true);
	uint8_t string[40];
	memset(string,0,40*sizeof(char));
    2de8:	8e 01       	movw	r16, r28
    2dea:	0f 5f       	subi	r16, 0xFF	; 255
    2dec:	1f 4f       	sbci	r17, 0xFF	; 255
    2dee:	88 e2       	ldi	r24, 0x28	; 40
    2df0:	f8 01       	movw	r30, r16
    2df2:	11 92       	st	Z+, r1
    2df4:	8a 95       	dec	r24
    2df6:	e9 f7       	brne	.-6      	; 0x2df2 <RenameBluetooth+0x22>
	sprintf(string,"AT+NAME%s",Bluetooth_Name);
    2df8:	87 e8       	ldi	r24, 0x87	; 135
    2dfa:	94 e5       	ldi	r25, 0x54	; 84
    2dfc:	9f 93       	push	r25
    2dfe:	8f 93       	push	r24
    2e00:	86 eb       	ldi	r24, 0xB6	; 182
    2e02:	92 e4       	ldi	r25, 0x42	; 66
    2e04:	9f 93       	push	r25
    2e06:	8f 93       	push	r24
    2e08:	1f 93       	push	r17
    2e0a:	0f 93       	push	r16
    2e0c:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
	wdt_reset();
    2e10:	a8 95       	wdr
    2e12:	ff ef       	ldi	r31, 0xFF	; 255
    2e14:	27 e8       	ldi	r18, 0x87	; 135
    2e16:	83 e1       	ldi	r24, 0x13	; 19
    2e18:	f1 50       	subi	r31, 0x01	; 1
    2e1a:	20 40       	sbci	r18, 0x00	; 0
    2e1c:	80 40       	sbci	r24, 0x00	; 0
    2e1e:	e1 f7       	brne	.-8      	; 0x2e18 <RenameBluetooth+0x48>
    2e20:	00 c0       	rjmp	.+0      	; 0x2e22 <RenameBluetooth+0x52>
    2e22:	00 00       	nop
	_delay_ms(1600);
	wdt_reset();
    2e24:	a8 95       	wdr
    2e26:	9f ef       	ldi	r25, 0xFF	; 255
    2e28:	e7 e8       	ldi	r30, 0x87	; 135
    2e2a:	f3 e1       	ldi	r31, 0x13	; 19
    2e2c:	91 50       	subi	r25, 0x01	; 1
    2e2e:	e0 40       	sbci	r30, 0x00	; 0
    2e30:	f0 40       	sbci	r31, 0x00	; 0
    2e32:	e1 f7       	brne	.-8      	; 0x2e2c <RenameBluetooth+0x5c>
    2e34:	00 c0       	rjmp	.+0      	; 0x2e36 <RenameBluetooth+0x66>
    2e36:	00 00       	nop
	_delay_ms(1600);
	wdt_reset();
    2e38:	a8 95       	wdr
    2e3a:	2f ef       	ldi	r18, 0xFF	; 255
    2e3c:	87 e8       	ldi	r24, 0x87	; 135
    2e3e:	93 e1       	ldi	r25, 0x13	; 19
    2e40:	21 50       	subi	r18, 0x01	; 1
    2e42:	80 40       	sbci	r24, 0x00	; 0
    2e44:	90 40       	sbci	r25, 0x00	; 0
    2e46:	e1 f7       	brne	.-8      	; 0x2e40 <RenameBluetooth+0x70>
    2e48:	00 c0       	rjmp	.+0      	; 0x2e4a <RenameBluetooth+0x7a>
    2e4a:	00 00       	nop
	_delay_ms(1600);
	wdt_reset();
    2e4c:	a8 95       	wdr
	USART0_sendString(string);  //only used to rename Bluetooth module.
    2e4e:	c8 01       	movw	r24, r16
    2e50:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
	FLASH_0_write_eeprom_byte(EEPROM_New_Bluetooth_Name,ASCII_0);
    2e54:	60 e3       	ldi	r22, 0x30	; 48
    2e56:	84 e4       	ldi	r24, 0x44	; 68
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	0e 94 4d 34 	call	0x689a	; 0x689a <FLASH_0_write_eeprom_byte>
    2e5e:	ef ef       	ldi	r30, 0xFF	; 255
    2e60:	f7 e8       	ldi	r31, 0x87	; 135
    2e62:	23 e1       	ldi	r18, 0x13	; 19
    2e64:	e1 50       	subi	r30, 0x01	; 1
    2e66:	f0 40       	sbci	r31, 0x00	; 0
    2e68:	20 40       	sbci	r18, 0x00	; 0
    2e6a:	e1 f7       	brne	.-8      	; 0x2e64 <RenameBluetooth+0x94>
    2e6c:	00 c0       	rjmp	.+0      	; 0x2e6e <RenameBluetooth+0x9e>
    2e6e:	00 00       	nop
	_delay_ms(1600);
	wdt_reset();
    2e70:	a8 95       	wdr
    2e72:	8f ef       	ldi	r24, 0xFF	; 255
    2e74:	97 e8       	ldi	r25, 0x87	; 135
    2e76:	e3 e1       	ldi	r30, 0x13	; 19
    2e78:	81 50       	subi	r24, 0x01	; 1
    2e7a:	90 40       	sbci	r25, 0x00	; 0
    2e7c:	e0 40       	sbci	r30, 0x00	; 0
    2e7e:	e1 f7       	brne	.-8      	; 0x2e78 <RenameBluetooth+0xa8>
    2e80:	00 c0       	rjmp	.+0      	; 0x2e82 <RenameBluetooth+0xb2>
    2e82:	00 00       	nop
	_delay_ms(1600);
	wdt_reset();
    2e84:	a8 95       	wdr
    2e86:	ff ef       	ldi	r31, 0xFF	; 255
    2e88:	27 e8       	ldi	r18, 0x87	; 135
    2e8a:	83 e1       	ldi	r24, 0x13	; 19
    2e8c:	f1 50       	subi	r31, 0x01	; 1
    2e8e:	20 40       	sbci	r18, 0x00	; 0
    2e90:	80 40       	sbci	r24, 0x00	; 0
    2e92:	e1 f7       	brne	.-8      	; 0x2e8c <RenameBluetooth+0xbc>
    2e94:	00 c0       	rjmp	.+0      	; 0x2e96 <RenameBluetooth+0xc6>
    2e96:	00 00       	nop
	_delay_ms(1600);
	wdt_reset();
    2e98:	a8 95       	wdr
	USART0_getString();
    2e9a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <USART0_getString>
//	New_Bluetooth_Name = 0;
}
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	a8 96       	adiw	r28, 0x28	; 40
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	1f 91       	pop	r17
    2eb6:	0f 91       	pop	r16
    2eb8:	08 95       	ret

00002eba <TransmitBatteryData>:
		strcpy(TestDataBuffer,buffer);
		NumberAttempts = 0;
	}
	else NumberAttempts++;
	
	USART0_sendString(TestDataBuffer);
    2eba:	66 23       	and	r22, r22
    2ebc:	41 f0       	breq	.+16     	; 0x2ece <TransmitBatteryData+0x14>
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	89 ed       	ldi	r24, 0xD9	; 217
    2ec2:	97 e4       	ldi	r25, 0x47	; 71
    2ec4:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <strcpy>
    2ec8:	10 92 d8 47 	sts	0x47D8, r1	; 0x8047d8 <NumberAttempts.6279>
    2ecc:	11 c0       	rjmp	.+34     	; 0x2ef0 <TransmitBatteryData+0x36>
    2ece:	80 91 d8 47 	lds	r24, 0x47D8	; 0x8047d8 <NumberAttempts.6279>
    2ed2:	8f 5f       	subi	r24, 0xFF	; 255
    2ed4:	80 93 d8 47 	sts	0x47D8, r24	; 0x8047d8 <NumberAttempts.6279>
    2ed8:	88 23       	and	r24, r24
    2eda:	41 f0       	breq	.+16     	; 0x2eec <TransmitBatteryData+0x32>
    2edc:	45 ea       	ldi	r20, 0xA5	; 165
    2ede:	54 e5       	ldi	r21, 0x54	; 84
    2ee0:	60 e0       	ldi	r22, 0x00	; 0
    2ee2:	70 e0       	ldi	r23, 0x00	; 0
    2ee4:	82 e0       	ldi	r24, 0x02	; 2
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	0e 94 02 23 	call	0x4604	; 0x4604 <NewClearUnfinishedBusiness>
    2eec:	10 92 d8 47 	sts	0x47D8, r1	; 0x8047d8 <NumberAttempts.6279>
    2ef0:	89 ed       	ldi	r24, 0xD9	; 217
    2ef2:	97 e4       	ldi	r25, 0x47	; 71
    2ef4:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
    2ef8:	08 95       	ret

00002efa <TransmitADcalData>:
}
//-----------------------------------Makes up to 3 attempts to send cal data------------------------------------------------------------------
void TransmitADcalData(char buffer[30],bool retransmit){
	static char ADcalDataBuffer[30];
	static uint8_t NumADcalAttmpt;
	if(retransmit){
    2efa:	66 23       	and	r22, r22
    2efc:	49 f0       	breq	.+18     	; 0x2f10 <TransmitADcalData+0x16>
		strcpy(ADcalDataBuffer,buffer);
    2efe:	bc 01       	movw	r22, r24
    2f00:	8a eb       	ldi	r24, 0xBA	; 186
    2f02:	97 e4       	ldi	r25, 0x47	; 71
    2f04:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <strcpy>
		NumADcalAttmpt = 1;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	80 93 b9 47 	sts	0x47B9, r24	; 0x8047b9 <NumADcalAttmpt.6291>
    2f0e:	11 c0       	rjmp	.+34     	; 0x2f32 <TransmitADcalData+0x38>
	}
	else{
		NumADcalAttmpt++;
    2f10:	80 91 b9 47 	lds	r24, 0x47B9	; 0x8047b9 <NumADcalAttmpt.6291>
    2f14:	8f 5f       	subi	r24, 0xFF	; 255
    2f16:	80 93 b9 47 	sts	0x47B9, r24	; 0x8047b9 <NumADcalAttmpt.6291>
		if(NumADcalAttmpt>2){
    2f1a:	83 30       	cpi	r24, 0x03	; 3
    2f1c:	50 f0       	brcs	.+20     	; 0x2f32 <TransmitADcalData+0x38>
			NewClearUnfinishedBusiness(Unfinished_AutoCalRetransmit,&Unfinished_Business);
    2f1e:	45 ea       	ldi	r20, 0xA5	; 165
    2f20:	54 e5       	ldi	r21, 0x54	; 84
    2f22:	60 e0       	ldi	r22, 0x00	; 0
    2f24:	70 e0       	ldi	r23, 0x00	; 0
    2f26:	88 e0       	ldi	r24, 0x08	; 8
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	0e 94 02 23 	call	0x4604	; 0x4604 <NewClearUnfinishedBusiness>
			NumADcalAttmpt = 0;
    2f2e:	10 92 b9 47 	sts	0x47B9, r1	; 0x8047b9 <NumADcalAttmpt.6291>
		}
	}
	USART0_sendString(ADcalDataBuffer);
    2f32:	8a eb       	ldi	r24, 0xBA	; 186
    2f34:	97 e4       	ldi	r25, 0x47	; 71
    2f36:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
    2f3a:	08 95       	ret

00002f3c <TransmitManualCalData>:
}
//-----------------------------------Makes up to 3 attempts to send cal data------------------------------------------------------------------
void TransmitManualCalData(char buffer[300],bool retransmit){
	static char ManualCalDataBuffer[300];
	static uint8_t NumManCalAttmpt;
	if(retransmit){
    2f3c:	66 23       	and	r22, r22
    2f3e:	49 f0       	breq	.+18     	; 0x2f52 <TransmitManualCalData+0x16>
		strcpy(ManualCalDataBuffer,buffer);
    2f40:	bc 01       	movw	r22, r24
    2f42:	8d e8       	ldi	r24, 0x8D	; 141
    2f44:	96 e4       	ldi	r25, 0x46	; 70
    2f46:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <strcpy>
		NumManCalAttmpt = 1;
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	80 93 8c 46 	sts	0x468C, r24	; 0x80468c <NumManCalAttmpt.6297>
    2f50:	11 c0       	rjmp	.+34     	; 0x2f74 <TransmitManualCalData+0x38>
	}
	else{
		NumManCalAttmpt++;
    2f52:	80 91 8c 46 	lds	r24, 0x468C	; 0x80468c <NumManCalAttmpt.6297>
    2f56:	8f 5f       	subi	r24, 0xFF	; 255
    2f58:	80 93 8c 46 	sts	0x468C, r24	; 0x80468c <NumManCalAttmpt.6297>
		if(NumManCalAttmpt>2){
    2f5c:	83 30       	cpi	r24, 0x03	; 3
    2f5e:	50 f0       	brcs	.+20     	; 0x2f74 <TransmitManualCalData+0x38>
			NewClearUnfinishedBusiness(Unfinished_ManualCalRetransmit,&Unfinished_Business);
    2f60:	45 ea       	ldi	r20, 0xA5	; 165
    2f62:	54 e5       	ldi	r21, 0x54	; 84
    2f64:	60 e0       	ldi	r22, 0x00	; 0
    2f66:	70 e0       	ldi	r23, 0x00	; 0
    2f68:	80 e1       	ldi	r24, 0x10	; 16
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	0e 94 02 23 	call	0x4604	; 0x4604 <NewClearUnfinishedBusiness>
			NumManCalAttmpt = 0;
    2f70:	10 92 8c 46 	sts	0x468C, r1	; 0x80468c <NumManCalAttmpt.6297>
		}
	}
	USART0_sendString(ManualCalDataBuffer);
    2f74:	8d e8       	ldi	r24, 0x8D	; 141
    2f76:	96 e4       	ldi	r25, 0x46	; 70
    2f78:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
    2f7c:	08 95       	ret

00002f7e <TransmitFlavorData>:
}
//-----------------------------------------------------------------------------------------------------------------
void TransmitFlavorData(char buffer[50],bool retransmit){
	static char FlavorDataBuffer[50];
	static uint8_t NumFlavorAttmpt;
	if(retransmit){
    2f7e:	66 23       	and	r22, r22
    2f80:	49 f0       	breq	.+18     	; 0x2f94 <TransmitFlavorData+0x16>
		strcpy(FlavorDataBuffer,buffer);
    2f82:	bc 01       	movw	r22, r24
    2f84:	8a e5       	ldi	r24, 0x5A	; 90
    2f86:	96 e4       	ldi	r25, 0x46	; 70
    2f88:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <strcpy>
		NumFlavorAttmpt = 1;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	80 93 59 46 	sts	0x4659, r24	; 0x804659 <NumFlavorAttmpt.6303>
    2f92:	11 c0       	rjmp	.+34     	; 0x2fb6 <TransmitFlavorData+0x38>
	}
	else{
		NumFlavorAttmpt++;
    2f94:	80 91 59 46 	lds	r24, 0x4659	; 0x804659 <NumFlavorAttmpt.6303>
    2f98:	8f 5f       	subi	r24, 0xFF	; 255
    2f9a:	80 93 59 46 	sts	0x4659, r24	; 0x804659 <NumFlavorAttmpt.6303>
		if(NumFlavorAttmpt>2){
    2f9e:	83 30       	cpi	r24, 0x03	; 3
    2fa0:	50 f0       	brcs	.+20     	; 0x2fb6 <TransmitFlavorData+0x38>
			NewClearUnfinishedBusiness(Unfinished_SYBT_Flavor_TX,&Unfinished_Business);
    2fa2:	45 ea       	ldi	r20, 0xA5	; 165
    2fa4:	54 e5       	ldi	r21, 0x54	; 84
    2fa6:	61 e0       	ldi	r22, 0x01	; 1
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	0e 94 02 23 	call	0x4604	; 0x4604 <NewClearUnfinishedBusiness>
			NumFlavorAttmpt = 0;
    2fb2:	10 92 59 46 	sts	0x4659, r1	; 0x804659 <NumFlavorAttmpt.6303>
		}
	}
	USART0_sendString(FlavorDataBuffer);
    2fb6:	8a e5       	ldi	r24, 0x5A	; 90
    2fb8:	96 e4       	ldi	r25, 0x46	; 70
    2fba:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
    2fbe:	08 95       	ret

00002fc0 <SendThermistorCal>:
	USART0_sendString(string);
	return true;
}
*/
//-----------------------------------------------------------------------------------------------------------------
bool SendThermistorCal(){
    2fc0:	ef 92       	push	r14
    2fc2:	ff 92       	push	r15
    2fc4:	0f 93       	push	r16
    2fc6:	1f 93       	push	r17
    2fc8:	cf 93       	push	r28
    2fca:	df 93       	push	r29
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	c4 5a       	subi	r28, 0xA4	; 164
    2fd2:	d1 40       	sbci	r29, 0x01	; 1
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	de bf       	out	0x3e, r29	; 62
	char string[360];
	char string2[60];
cal.Thermist1_cal = 0;
    2fd8:	ed ea       	ldi	r30, 0xAD	; 173
    2fda:	f2 e5       	ldi	r31, 0x52	; 82
    2fdc:	14 8a       	std	Z+20, r1	; 0x14
    2fde:	15 8a       	std	Z+21, r1	; 0x15
    2fe0:	16 8a       	std	Z+22, r1	; 0x16
    2fe2:	17 8a       	std	Z+23, r1	; 0x17
cal.Thermist2_cal = 0;
    2fe4:	10 8e       	std	Z+24, r1	; 0x18
    2fe6:	11 8e       	std	Z+25, r1	; 0x19
    2fe8:	12 8e       	std	Z+26, r1	; 0x1a
    2fea:	13 8e       	std	Z+27, r1	; 0x1b
cal.Thermist3_cal = 0;
    2fec:	14 8e       	std	Z+28, r1	; 0x1c
    2fee:	15 8e       	std	Z+29, r1	; 0x1d
    2ff0:	16 8e       	std	Z+30, r1	; 0x1e
    2ff2:	17 8e       	std	Z+31, r1	; 0x1f

cal.Int_Thermist1_cal = 0;
    2ff4:	14 a6       	std	Z+44, r1	; 0x2c
    2ff6:	15 a6       	std	Z+45, r1	; 0x2d
    2ff8:	16 a6       	std	Z+46, r1	; 0x2e
    2ffa:	17 a6       	std	Z+47, r1	; 0x2f
cal.Int_Thermist2_cal = 0;
    2ffc:	10 aa       	std	Z+48, r1	; 0x30
    2ffe:	11 aa       	std	Z+49, r1	; 0x31
    3000:	12 aa       	std	Z+50, r1	; 0x32
    3002:	13 aa       	std	Z+51, r1	; 0x33
cal.Int_Thermist3_cal = 0;
    3004:	14 aa       	std	Z+52, r1	; 0x34
    3006:	15 aa       	std	Z+53, r1	; 0x35
    3008:	16 aa       	std	Z+54, r1	; 0x36
    300a:	17 aa       	std	Z+55, r1	; 0x37


//	sprintf(string,"TCal:%lf,%lf,%lf,%f,%lf,%lf,%lf,%f,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i eof\r\n",cal.Thermist1_cal,cal.Thermist2_cal,cal.Thermist3_cal,

	memset(string,0,360*sizeof(char));
    300c:	8e 01       	movw	r16, r28
    300e:	0f 5f       	subi	r16, 0xFF	; 255
    3010:	1f 4f       	sbci	r17, 0xFF	; 255
    3012:	88 e6       	ldi	r24, 0x68	; 104
    3014:	91 e0       	ldi	r25, 0x01	; 1
    3016:	d8 01       	movw	r26, r16
    3018:	9c 01       	movw	r18, r24
    301a:	1d 92       	st	X+, r1
    301c:	21 50       	subi	r18, 0x01	; 1
    301e:	30 40       	sbci	r19, 0x00	; 0
    3020:	e1 f7       	brne	.-8      	; 0x301a <SendThermistorCal+0x5a>
		cal.Int_Thermist1_cal,cal.Int_Thermist2_cal,cal.Int_Thermist3_cal,cal.Int_Thermist_Offset,cal.Thermist1_Exp,cal.Thermist2_Exp,cal.Thermist3_Exp,cal.Int_Thermist1_Exp,cal.Int_Thermist2_Exp,
		cal.Int_Thermist3_Exp,cal.SYBT_ad_cal,cal.Load_ad_cal,cal.Nine_V_ad_cal,cal.ResistA_cal,cal.ResistB_cal,cal.Therm_ResA_cal,cal.Therm_ResB_cal,cal.Int_Therm_ResA_cal,cal.Int_Therm_ResB_cal,
		cal.Six_V_ad_cal,cal.LoadTestTolerance_A,cal.LoadTestTolerance_B,cal.SYBT_Idnt_Tolrnc,cal.HS_Therm_ResA_cal,cal.HS_Therm_ResB_cal,cal.HS_Thermist_Offset);
	*/
	// the max number of items appears to be 27. I used strcat to add 3 more.
	sprintf(string,"TCal:%lf,%lf,%lf,%i,%lf,%lf,%lf,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,",cal.Thermist1_cal,cal.Thermist2_cal,cal.Thermist3_cal,cal.SYBT_Therm_Offst,
    3022:	a3 e3       	ldi	r26, 0x33	; 51
    3024:	b3 e5       	ldi	r27, 0x53	; 83
    3026:	11 96       	adiw	r26, 0x01	; 1
    3028:	8c 91       	ld	r24, X
    302a:	11 97       	sbiw	r26, 0x01	; 1
    302c:	8f 93       	push	r24
    302e:	8c 91       	ld	r24, X
    3030:	8f 93       	push	r24
    3032:	a7 e3       	ldi	r26, 0x37	; 55
    3034:	b3 e5       	ldi	r27, 0x53	; 83
    3036:	11 96       	adiw	r26, 0x01	; 1
    3038:	8c 91       	ld	r24, X
    303a:	11 97       	sbiw	r26, 0x01	; 1
    303c:	8f 93       	push	r24
    303e:	8c 91       	ld	r24, X
    3040:	8f 93       	push	r24
    3042:	a5 e3       	ldi	r26, 0x35	; 53
    3044:	b3 e5       	ldi	r27, 0x53	; 83
    3046:	11 96       	adiw	r26, 0x01	; 1
    3048:	8c 91       	ld	r24, X
    304a:	11 97       	sbiw	r26, 0x01	; 1
    304c:	8f 93       	push	r24
    304e:	8c 91       	ld	r24, X
    3050:	8f 93       	push	r24
    3052:	81 85       	ldd	r24, Z+9	; 0x09
    3054:	8f 93       	push	r24
    3056:	80 85       	ldd	r24, Z+8	; 0x08
    3058:	8f 93       	push	r24
    305a:	83 a5       	ldd	r24, Z+43	; 0x2b
    305c:	8f 93       	push	r24
    305e:	82 a5       	ldd	r24, Z+42	; 0x2a
    3060:	8f 93       	push	r24
    3062:	81 a5       	ldd	r24, Z+41	; 0x29
    3064:	8f 93       	push	r24
    3066:	80 a5       	ldd	r24, Z+40	; 0x28
    3068:	8f 93       	push	r24
    306a:	83 89       	ldd	r24, Z+19	; 0x13
    306c:	8f 93       	push	r24
    306e:	82 89       	ldd	r24, Z+18	; 0x12
    3070:	8f 93       	push	r24
    3072:	81 89       	ldd	r24, Z+17	; 0x11
    3074:	8f 93       	push	r24
    3076:	80 89       	ldd	r24, Z+16	; 0x10
    3078:	8f 93       	push	r24
    307a:	87 85       	ldd	r24, Z+15	; 0x0f
    307c:	8f 93       	push	r24
    307e:	86 85       	ldd	r24, Z+14	; 0x0e
    3080:	8f 93       	push	r24
    3082:	85 85       	ldd	r24, Z+13	; 0x0d
    3084:	8f 93       	push	r24
    3086:	84 85       	ldd	r24, Z+12	; 0x0c
    3088:	8f 93       	push	r24
    308a:	87 81       	ldd	r24, Z+7	; 0x07
    308c:	8f 93       	push	r24
    308e:	86 81       	ldd	r24, Z+6	; 0x06
    3090:	8f 93       	push	r24
    3092:	83 85       	ldd	r24, Z+11	; 0x0b
    3094:	8f 93       	push	r24
    3096:	82 85       	ldd	r24, Z+10	; 0x0a
    3098:	8f 93       	push	r24
    309a:	85 81       	ldd	r24, Z+5	; 0x05
    309c:	8f 93       	push	r24
    309e:	84 81       	ldd	r24, Z+4	; 0x04
    30a0:	8f 93       	push	r24
    30a2:	87 ad       	ldd	r24, Z+63	; 0x3f
    30a4:	8f 93       	push	r24
    30a6:	86 ad       	ldd	r24, Z+62	; 0x3e
    30a8:	8f 93       	push	r24
    30aa:	85 ad       	ldd	r24, Z+61	; 0x3d
    30ac:	8f 93       	push	r24
    30ae:	84 ad       	ldd	r24, Z+60	; 0x3c
    30b0:	8f 93       	push	r24
    30b2:	83 ad       	ldd	r24, Z+59	; 0x3b
    30b4:	8f 93       	push	r24
    30b6:	82 ad       	ldd	r24, Z+58	; 0x3a
    30b8:	8f 93       	push	r24
    30ba:	87 a1       	ldd	r24, Z+39	; 0x27
    30bc:	8f 93       	push	r24
    30be:	86 a1       	ldd	r24, Z+38	; 0x26
    30c0:	8f 93       	push	r24
    30c2:	85 a1       	ldd	r24, Z+37	; 0x25
    30c4:	8f 93       	push	r24
    30c6:	84 a1       	ldd	r24, Z+36	; 0x24
    30c8:	8f 93       	push	r24
    30ca:	83 a1       	ldd	r24, Z+35	; 0x23
    30cc:	8f 93       	push	r24
    30ce:	82 a1       	ldd	r24, Z+34	; 0x22
    30d0:	8f 93       	push	r24
    30d2:	81 ad       	ldd	r24, Z+57	; 0x39
    30d4:	8f 93       	push	r24
    30d6:	80 ad       	ldd	r24, Z+56	; 0x38
    30d8:	8f 93       	push	r24
    30da:	1f 92       	push	r1
    30dc:	1f 92       	push	r1
    30de:	1f 92       	push	r1
    30e0:	1f 92       	push	r1
    30e2:	1f 92       	push	r1
    30e4:	1f 92       	push	r1
    30e6:	1f 92       	push	r1
    30e8:	1f 92       	push	r1
    30ea:	1f 92       	push	r1
    30ec:	1f 92       	push	r1
    30ee:	1f 92       	push	r1
    30f0:	1f 92       	push	r1
    30f2:	81 a1       	ldd	r24, Z+33	; 0x21
    30f4:	8f 93       	push	r24
    30f6:	80 a1       	ldd	r24, Z+32	; 0x20
    30f8:	8f 93       	push	r24
    30fa:	1f 92       	push	r1
    30fc:	1f 92       	push	r1
    30fe:	1f 92       	push	r1
    3100:	1f 92       	push	r1
    3102:	1f 92       	push	r1
    3104:	1f 92       	push	r1
    3106:	1f 92       	push	r1
    3108:	1f 92       	push	r1
    310a:	1f 92       	push	r1
    310c:	1f 92       	push	r1
    310e:	1f 92       	push	r1
    3110:	1f 92       	push	r1
    3112:	80 ec       	ldi	r24, 0xC0	; 192
    3114:	92 e4       	ldi	r25, 0x42	; 66
    3116:	9f 93       	push	r25
    3118:	8f 93       	push	r24
    311a:	1f 93       	push	r17
    311c:	0f 93       	push	r16
    311e:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
	cal.Int_Thermist1_cal,cal.Int_Thermist2_cal,cal.Int_Thermist3_cal,cal.Intrnl_Therm_Offst,cal.Thermist1_Exp,cal.Thermist2_Exp,cal.Thermist3_Exp,cal.Int_Thermist1_Exp,cal.Int_Thermist2_Exp,
	cal.Int_Thermist3_Exp,cal.SYBT_ad_cal,cal.Load_ad_cal,cal.Nine_V_ad_cal,cal.ResistA_cal,cal.ResistB_cal,cal.Therm_ResA_cal,cal.Therm_ResB_cal,cal.Int_Therm_ResA_cal,cal.Int_Therm_ResB_cal,
	cal.Six_V_ad_cal,cal.LoadTestTolerance_A,cal.LoadTestTolerance_B,cal.SYBT_Idnt_Tolrnc);
	#ifdef LXbatteryCompatible
	sprintf(string2,"%i,%i,%i,%i eof\r\n",cal.HS_Therm_ResA_cal,cal.HS_Therm_ResB_cal,cal.HS_Thermist_Offset,cal.LXvoltage_cal);
    3122:	cd bf       	out	0x3d, r28	; 61
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	e3 e4       	ldi	r30, 0x43	; 67
    3128:	f3 e5       	ldi	r31, 0x53	; 83
    312a:	81 81       	ldd	r24, Z+1	; 0x01
    312c:	8f 93       	push	r24
    312e:	80 81       	ld	r24, Z
    3130:	8f 93       	push	r24
    3132:	ed ef       	ldi	r30, 0xFD	; 253
    3134:	f2 e5       	ldi	r31, 0x52	; 82
    3136:	81 81       	ldd	r24, Z+1	; 0x01
    3138:	8f 93       	push	r24
    313a:	80 81       	ld	r24, Z
    313c:	8f 93       	push	r24
    313e:	ef ee       	ldi	r30, 0xEF	; 239
    3140:	f2 e5       	ldi	r31, 0x52	; 82
    3142:	81 81       	ldd	r24, Z+1	; 0x01
    3144:	8f 93       	push	r24
    3146:	80 81       	ld	r24, Z
    3148:	8f 93       	push	r24
    314a:	ed ee       	ldi	r30, 0xED	; 237
    314c:	f2 e5       	ldi	r31, 0x52	; 82
    314e:	81 81       	ldd	r24, Z+1	; 0x01
    3150:	8f 93       	push	r24
    3152:	80 81       	ld	r24, Z
    3154:	8f 93       	push	r24
    3156:	8d e1       	ldi	r24, 0x1D	; 29
    3158:	93 e4       	ldi	r25, 0x43	; 67
    315a:	9f 93       	push	r25
    315c:	8f 93       	push	r24
    315e:	7e 01       	movw	r14, r28
    3160:	97 e9       	ldi	r25, 0x97	; 151
    3162:	e9 1a       	sub	r14, r25
    3164:	9e ef       	ldi	r25, 0xFE	; 254
    3166:	f9 0a       	sbc	r15, r25
    3168:	ff 92       	push	r15
    316a:	ef 92       	push	r14
    316c:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
	#endif
	#ifndef LXbatteryCompatible
	sprintf(string2,"%i,%i,%i eof\r\n",cal.HS_Therm_ResA_cal,cal.HS_Therm_ResB_cal,cal.HS_Thermist_Offset);
	#endif
	
	strcat(string,string2);
    3170:	b7 01       	movw	r22, r14
    3172:	c8 01       	movw	r24, r16
    3174:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <strcat>

	NewSetUnfinishedBusiness(Unfinished_ManualCalRetransmit,&Unfinished_Business);			//The output is buffered and retransmitted if the app doesn't respond.
    3178:	45 ea       	ldi	r20, 0xA5	; 165
    317a:	54 e5       	ldi	r21, 0x54	; 84
    317c:	60 e0       	ldi	r22, 0x00	; 0
    317e:	70 e0       	ldi	r23, 0x00	; 0
    3180:	80 e1       	ldi	r24, 0x10	; 16
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
	TransmitManualCalData(string,true);
    3188:	61 e0       	ldi	r22, 0x01	; 1
    318a:	c8 01       	movw	r24, r16
    318c:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <TransmitManualCalData>
//	USART0_sendString(string);
	return true;
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	de bf       	out	0x3e, r29	; 62
}
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	cc 55       	subi	r28, 0x5C	; 92
    3198:	de 4f       	sbci	r29, 0xFE	; 254
    319a:	cd bf       	out	0x3d, r28	; 61
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	1f 91       	pop	r17
    31a4:	0f 91       	pop	r16
    31a6:	ff 90       	pop	r15
    31a8:	ef 90       	pop	r14
    31aa:	08 95       	ret

000031ac <TransmitPreferenceData>:
}
//-------------------------------------------------------------------------------------------------------------------------------------
void TransmitPreferenceData(char buffer[60],bool retransmit ){
	static char PreferenceDataBuffer[60];
	static uint8_t NumPreferenceAttmpt;
	if(retransmit){
    31ac:	66 23       	and	r22, r22
    31ae:	49 f0       	breq	.+18     	; 0x31c2 <TransmitPreferenceData+0x16>
		strcpy(PreferenceDataBuffer,buffer);
    31b0:	bc 01       	movw	r22, r24
    31b2:	8d e1       	ldi	r24, 0x1D	; 29
    31b4:	96 e4       	ldi	r25, 0x46	; 70
    31b6:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <strcpy>
		NumPreferenceAttmpt = 1;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	80 93 1c 46 	sts	0x461C, r24	; 0x80461c <__data_end>
    31c0:	11 c0       	rjmp	.+34     	; 0x31e4 <TransmitPreferenceData+0x38>
	}
	else{
		NumPreferenceAttmpt++;
    31c2:	80 91 1c 46 	lds	r24, 0x461C	; 0x80461c <__data_end>
    31c6:	8f 5f       	subi	r24, 0xFF	; 255
    31c8:	80 93 1c 46 	sts	0x461C, r24	; 0x80461c <__data_end>
		if(NumPreferenceAttmpt>2){
    31cc:	83 30       	cpi	r24, 0x03	; 3
    31ce:	50 f0       	brcs	.+20     	; 0x31e4 <TransmitPreferenceData+0x38>
			NewClearUnfinishedBusiness(Unfinished_Preferences_TX,&Unfinished_Business);
    31d0:	45 ea       	ldi	r20, 0xA5	; 165
    31d2:	54 e5       	ldi	r21, 0x54	; 84
    31d4:	64 e0       	ldi	r22, 0x04	; 4
    31d6:	70 e0       	ldi	r23, 0x00	; 0
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 02 23 	call	0x4604	; 0x4604 <NewClearUnfinishedBusiness>
			NumPreferenceAttmpt = 0;
    31e0:	10 92 1c 46 	sts	0x461C, r1	; 0x80461c <__data_end>
		}
	}
	USART0_sendString(PreferenceDataBuffer);		
    31e4:	8d e1       	ldi	r24, 0x1D	; 29
    31e6:	96 e4       	ldi	r25, 0x46	; 70
    31e8:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
    31ec:	08 95       	ret

000031ee <GatherPreferenceData>:
	TransmitManualCalData(string,true);
//	USART0_sendString(string);
	return true;
}
//-------------------------------------------------------------------------------------------------------------------------------------
void GatherPreferenceData(){
    31ee:	0f 93       	push	r16
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	ec 97       	sbiw	r28, 0x3c	; 60
    31fc:	cd bf       	out	0x3d, r28	; 61
    31fe:	de bf       	out	0x3e, r29	; 62
	char string[60];
	memset(string,0,60*sizeof(char));
    3200:	8e 01       	movw	r16, r28
    3202:	0f 5f       	subi	r16, 0xFF	; 255
    3204:	1f 4f       	sbci	r17, 0xFF	; 255
    3206:	8c e3       	ldi	r24, 0x3C	; 60
    3208:	f8 01       	movw	r30, r16
    320a:	11 92       	st	Z+, r1
    320c:	8a 95       	dec	r24
    320e:	e9 f7       	brne	.-6      	; 0x320a <GatherPreferenceData+0x1c>
	sprintf(string,"Pref:%i,%lu,%s,%s eop\r\n",cal.Preferences,cal.Sleep_3,Bluetooth_Name,Firmware_Version);  //version is defined at top of this file
    3210:	8f e2       	ldi	r24, 0x2F	; 47
    3212:	93 e4       	ldi	r25, 0x43	; 67
    3214:	9f 93       	push	r25
    3216:	8f 93       	push	r24
    3218:	87 e8       	ldi	r24, 0x87	; 135
    321a:	94 e5       	ldi	r25, 0x54	; 84
    321c:	9f 93       	push	r25
    321e:	8f 93       	push	r24
    3220:	ef e2       	ldi	r30, 0x2F	; 47
    3222:	f3 e5       	ldi	r31, 0x53	; 83
    3224:	83 81       	ldd	r24, Z+3	; 0x03
    3226:	8f 93       	push	r24
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	8f 93       	push	r24
    322c:	81 81       	ldd	r24, Z+1	; 0x01
    322e:	8f 93       	push	r24
    3230:	80 81       	ld	r24, Z
    3232:	8f 93       	push	r24
    3234:	e5 e0       	ldi	r30, 0x05	; 5
    3236:	f3 e5       	ldi	r31, 0x53	; 83
    3238:	81 81       	ldd	r24, Z+1	; 0x01
    323a:	8f 93       	push	r24
    323c:	80 81       	ld	r24, Z
    323e:	8f 93       	push	r24
    3240:	89 e3       	ldi	r24, 0x39	; 57
    3242:	93 e4       	ldi	r25, 0x43	; 67
    3244:	9f 93       	push	r25
    3246:	8f 93       	push	r24
    3248:	1f 93       	push	r17
    324a:	0f 93       	push	r16
    324c:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
	NewSetUnfinishedBusiness(Unfinished_Preferences_TX,&Unfinished_Business);
    3250:	45 ea       	ldi	r20, 0xA5	; 165
    3252:	54 e5       	ldi	r21, 0x54	; 84
    3254:	64 e0       	ldi	r22, 0x04	; 4
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
	TransmitPreferenceData(string,true);
    3260:	61 e0       	ldi	r22, 0x01	; 1
    3262:	c8 01       	movw	r24, r16
    3264:	0e 94 d6 18 	call	0x31ac	; 0x31ac <TransmitPreferenceData>
	return;
    3268:	cd bf       	out	0x3d, r28	; 61
    326a:	de bf       	out	0x3e, r29	; 62
}
    326c:	ec 96       	adiw	r28, 0x3c	; 60
    326e:	cd bf       	out	0x3d, r28	; 61
    3270:	de bf       	out	0x3e, r29	; 62
    3272:	df 91       	pop	r29
    3274:	cf 91       	pop	r28
    3276:	1f 91       	pop	r17
    3278:	0f 91       	pop	r16
    327a:	08 95       	ret

0000327c <UnfinishedTXbusiness>:
}

//---------------------------using Sleep timer to time transmissions to avoid collisions------------------------------------------
void UnfinishedTXbusiness(void){

	if(Unfinished_Business & Unfinished_BatDataRetransmit){
    327c:	80 91 a5 54 	lds	r24, 0x54A5	; 0x8054a5 <Unfinished_Business>
    3280:	90 91 a6 54 	lds	r25, 0x54A6	; 0x8054a6 <Unfinished_Business+0x1>
    3284:	a0 91 a7 54 	lds	r26, 0x54A7	; 0x8054a7 <Unfinished_Business+0x2>
    3288:	b0 91 a8 54 	lds	r27, 0x54A8	; 0x8054a8 <Unfinished_Business+0x3>
    328c:	a1 ff       	sbrs	r26, 1
    328e:	18 c0       	rjmp	.+48     	; 0x32c0 <UnfinishedTXbusiness+0x44>
		TransmitBatteryData("",false);
    3290:	60 e0       	ldi	r22, 0x00	; 0
    3292:	83 e6       	ldi	r24, 0x63	; 99
    3294:	93 e4       	ldi	r25, 0x43	; 67
    3296:	0e 94 5d 17 	call	0x2eba	; 0x2eba <TransmitBatteryData>
		Unfinished_Business ^= Unfinished_BatDataRetransmit;				//here to prevent retransmissions for now
    329a:	80 91 a5 54 	lds	r24, 0x54A5	; 0x8054a5 <Unfinished_Business>
    329e:	90 91 a6 54 	lds	r25, 0x54A6	; 0x8054a6 <Unfinished_Business+0x1>
    32a2:	a0 91 a7 54 	lds	r26, 0x54A7	; 0x8054a7 <Unfinished_Business+0x2>
    32a6:	b0 91 a8 54 	lds	r27, 0x54A8	; 0x8054a8 <Unfinished_Business+0x3>
    32aa:	22 e0       	ldi	r18, 0x02	; 2
    32ac:	a2 27       	eor	r26, r18
    32ae:	80 93 a5 54 	sts	0x54A5, r24	; 0x8054a5 <Unfinished_Business>
    32b2:	90 93 a6 54 	sts	0x54A6, r25	; 0x8054a6 <Unfinished_Business+0x1>
    32b6:	a0 93 a7 54 	sts	0x54A7, r26	; 0x8054a7 <Unfinished_Business+0x2>
    32ba:	b0 93 a8 54 	sts	0x54A8, r27	; 0x8054a8 <Unfinished_Business+0x3>
		return;
    32be:	08 95       	ret
	}
	if(Unfinished_Business & Unfinished_AutoCalRetransmit){
    32c0:	a3 ff       	sbrs	r26, 3
    32c2:	06 c0       	rjmp	.+12     	; 0x32d0 <UnfinishedTXbusiness+0x54>
		TransmitADcalData("",false);										// The function resets the unfinished bis flag
    32c4:	60 e0       	ldi	r22, 0x00	; 0
    32c6:	83 e6       	ldi	r24, 0x63	; 99
    32c8:	93 e4       	ldi	r25, 0x43	; 67
    32ca:	0e 94 7d 17 	call	0x2efa	; 0x2efa <TransmitADcalData>
		return;
    32ce:	08 95       	ret
	}
	if(Unfinished_Business & Unfinished_ManualCalRetransmit){
    32d0:	a4 ff       	sbrs	r26, 4
    32d2:	06 c0       	rjmp	.+12     	; 0x32e0 <UnfinishedTXbusiness+0x64>
		TransmitManualCalData("",false);									// The function resets the unfinished bis flag
    32d4:	60 e0       	ldi	r22, 0x00	; 0
    32d6:	83 e6       	ldi	r24, 0x63	; 99
    32d8:	93 e4       	ldi	r25, 0x43	; 67
    32da:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <TransmitManualCalData>
		return;
    32de:	08 95       	ret
	}
	if(Unfinished_Business & Unfinished_SYBT_Flavor_TX){
    32e0:	80 ff       	sbrs	r24, 0
    32e2:	06 c0       	rjmp	.+12     	; 0x32f0 <UnfinishedTXbusiness+0x74>
		TransmitFlavorData("",false);										// The function resets the unfinished bis flag
    32e4:	60 e0       	ldi	r22, 0x00	; 0
    32e6:	83 e6       	ldi	r24, 0x63	; 99
    32e8:	93 e4       	ldi	r25, 0x43	; 67
    32ea:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <TransmitFlavorData>
		return;
    32ee:	08 95       	ret
	}
	if(Unfinished_Business & Unfinished_Therm_Cal_TX){
    32f0:	81 ff       	sbrs	r24, 1
    32f2:	14 c0       	rjmp	.+40     	; 0x331c <UnfinishedTXbusiness+0xa0>
		SendThermistorCal();
    32f4:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <SendThermistorCal>
		Unfinished_Business ^= Unfinished_Therm_Cal_TX;
    32f8:	80 91 a5 54 	lds	r24, 0x54A5	; 0x8054a5 <Unfinished_Business>
    32fc:	90 91 a6 54 	lds	r25, 0x54A6	; 0x8054a6 <Unfinished_Business+0x1>
    3300:	a0 91 a7 54 	lds	r26, 0x54A7	; 0x8054a7 <Unfinished_Business+0x2>
    3304:	b0 91 a8 54 	lds	r27, 0x54A8	; 0x8054a8 <Unfinished_Business+0x3>
    3308:	22 e0       	ldi	r18, 0x02	; 2
    330a:	82 27       	eor	r24, r18
    330c:	80 93 a5 54 	sts	0x54A5, r24	; 0x8054a5 <Unfinished_Business>
    3310:	90 93 a6 54 	sts	0x54A6, r25	; 0x8054a6 <Unfinished_Business+0x1>
    3314:	a0 93 a7 54 	sts	0x54A7, r26	; 0x8054a7 <Unfinished_Business+0x2>
    3318:	b0 93 a8 54 	sts	0x54A8, r27	; 0x8054a8 <Unfinished_Business+0x3>
	}
	if(Unfinished_Business & Unfinished_Preferences_TX){
    331c:	80 91 a5 54 	lds	r24, 0x54A5	; 0x8054a5 <Unfinished_Business>
    3320:	82 ff       	sbrs	r24, 2
    3322:	05 c0       	rjmp	.+10     	; 0x332e <UnfinishedTXbusiness+0xb2>
		TransmitPreferenceData("",false);									// The function resets the unfinished bis flag
    3324:	60 e0       	ldi	r22, 0x00	; 0
    3326:	83 e6       	ldi	r24, 0x63	; 99
    3328:	93 e4       	ldi	r25, 0x43	; 67
    332a:	0e 94 d6 18 	call	0x31ac	; 0x31ac <TransmitPreferenceData>
    332e:	08 95       	ret

00003330 <TurnEverythingOn>:
	true;
}
//------------------------------------------------------------------------------------------------------------------------------
bool OvercurrentShutdown(int ResistorZeroValue){
	
}
    3330:	85 b1       	in	r24, 0x05	; 5
    3332:	80 62       	ori	r24, 0x20	; 32
    3334:	85 b9       	out	0x05, r24	; 5
    3336:	85 b1       	in	r24, 0x05	; 5
    3338:	80 61       	ori	r24, 0x10	; 16
    333a:	85 b9       	out	0x05, r24	; 5
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	08 95       	ret

00003342 <ConvertToTemperature>:
    3342:	8f 92       	push	r8
    3344:	9f 92       	push	r9
    3346:	af 92       	push	r10
    3348:	bf 92       	push	r11
    334a:	cf 92       	push	r12
    334c:	df 92       	push	r13
    334e:	ef 92       	push	r14
    3350:	ff 92       	push	r15
    3352:	bc 01       	movw	r22, r24
    3354:	66 0f       	add	r22, r22
    3356:	77 1f       	adc	r23, r23
    3358:	88 0f       	add	r24, r24
    335a:	99 1f       	adc	r25, r25
    335c:	88 0f       	add	r24, r24
    335e:	99 1f       	adc	r25, r25
    3360:	88 0f       	add	r24, r24
    3362:	99 1f       	adc	r25, r25
    3364:	68 0f       	add	r22, r24
    3366:	79 1f       	adc	r23, r25
    3368:	07 2e       	mov	r0, r23
    336a:	00 0c       	add	r0, r0
    336c:	88 0b       	sbc	r24, r24
    336e:	99 0b       	sbc	r25, r25
    3370:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    3374:	0e 94 ed 3b 	call	0x77da	; 0x77da <log>
    3378:	6b 01       	movw	r12, r22
    337a:	7c 01       	movw	r14, r24
    337c:	20 91 5d 48 	lds	r18, 0x485D	; 0x80485d <c2>
    3380:	30 91 5e 48 	lds	r19, 0x485E	; 0x80485e <c2+0x1>
    3384:	40 91 5f 48 	lds	r20, 0x485F	; 0x80485f <c2+0x2>
    3388:	50 91 60 48 	lds	r21, 0x4860	; 0x804860 <c2+0x3>
    338c:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3390:	20 91 f7 53 	lds	r18, 0x53F7	; 0x8053f7 <c1>
    3394:	30 91 f8 53 	lds	r19, 0x53F8	; 0x8053f8 <c1+0x1>
    3398:	40 91 f9 53 	lds	r20, 0x53F9	; 0x8053f9 <c1+0x2>
    339c:	50 91 fa 53 	lds	r21, 0x53FA	; 0x8053fa <c1+0x3>
    33a0:	0e 94 bd 39 	call	0x737a	; 0x737a <__addsf3>
    33a4:	4b 01       	movw	r8, r22
    33a6:	5c 01       	movw	r10, r24
    33a8:	a7 01       	movw	r20, r14
    33aa:	96 01       	movw	r18, r12
    33ac:	c7 01       	movw	r24, r14
    33ae:	b6 01       	movw	r22, r12
    33b0:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    33b4:	9b 01       	movw	r18, r22
    33b6:	ac 01       	movw	r20, r24
    33b8:	c7 01       	movw	r24, r14
    33ba:	b6 01       	movw	r22, r12
    33bc:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    33c0:	20 91 76 54 	lds	r18, 0x5476	; 0x805476 <c3>
    33c4:	30 91 77 54 	lds	r19, 0x5477	; 0x805477 <c3+0x1>
    33c8:	40 91 78 54 	lds	r20, 0x5478	; 0x805478 <c3+0x2>
    33cc:	50 91 79 54 	lds	r21, 0x5479	; 0x805479 <c3+0x3>
    33d0:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    33d4:	9b 01       	movw	r18, r22
    33d6:	ac 01       	movw	r20, r24
    33d8:	c5 01       	movw	r24, r10
    33da:	b4 01       	movw	r22, r8
    33dc:	0e 94 bd 39 	call	0x737a	; 0x737a <__addsf3>
    33e0:	9b 01       	movw	r18, r22
    33e2:	ac 01       	movw	r20, r24
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	80 e8       	ldi	r24, 0x80	; 128
    33ea:	9f e3       	ldi	r25, 0x3F	; 63
    33ec:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    33f0:	23 e3       	ldi	r18, 0x33	; 51
    33f2:	33 e9       	ldi	r19, 0x93	; 147
    33f4:	48 e8       	ldi	r20, 0x88	; 136
    33f6:	53 e4       	ldi	r21, 0x43	; 67
    33f8:	0e 94 bc 39 	call	0x7378	; 0x7378 <__subsf3>
    33fc:	20 91 05 53 	lds	r18, 0x5305	; 0x805305 <cal+0x58>
    3400:	20 ff       	sbrs	r18, 0
    3402:	12 c0       	rjmp	.+36     	; 0x3428 <ConvertToTemperature+0xe6>
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	40 e1       	ldi	r20, 0x10	; 16
    340a:	51 e4       	ldi	r21, 0x41	; 65
    340c:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	40 ea       	ldi	r20, 0xA0	; 160
    3416:	50 e4       	ldi	r21, 0x40	; 64
    3418:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	40 e0       	ldi	r20, 0x00	; 0
    3422:	52 e4       	ldi	r21, 0x42	; 66
    3424:	0e 94 bd 39 	call	0x737a	; 0x737a <__addsf3>
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	40 e2       	ldi	r20, 0x20	; 32
    342e:	51 e4       	ldi	r21, 0x41	; 65
    3430:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3434:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    3438:	cb 01       	movw	r24, r22
    343a:	ff 90       	pop	r15
    343c:	ef 90       	pop	r14
    343e:	df 90       	pop	r13
    3440:	cf 90       	pop	r12
    3442:	bf 90       	pop	r11
    3444:	af 90       	pop	r10
    3446:	9f 90       	pop	r9
    3448:	8f 90       	pop	r8
    344a:	08 95       	ret

0000344c <USART0_sendChar>:
    344c:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7e0804>
    3450:	95 ff       	sbrs	r25, 5
    3452:	fc cf       	rjmp	.-8      	; 0x344c <USART0_sendChar>
    3454:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    3458:	08 95       	ret

0000345a <USART0_sendString>:
    345a:	0f 93       	push	r16
    345c:	1f 93       	push	r17
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	8c 01       	movw	r16, r24
    3464:	c0 e0       	ldi	r28, 0x00	; 0
    3466:	d0 e0       	ldi	r29, 0x00	; 0
    3468:	07 c0       	rjmp	.+14     	; 0x3478 <USART0_sendString+0x1e>
    346a:	f8 01       	movw	r30, r16
    346c:	ec 0f       	add	r30, r28
    346e:	fd 1f       	adc	r31, r29
    3470:	80 81       	ld	r24, Z
    3472:	0e 94 26 1a 	call	0x344c	; 0x344c <USART0_sendChar>
    3476:	21 96       	adiw	r28, 0x01	; 1
    3478:	f8 01       	movw	r30, r16
    347a:	01 90       	ld	r0, Z+
    347c:	00 20       	and	r0, r0
    347e:	e9 f7       	brne	.-6      	; 0x347a <USART0_sendString+0x20>
    3480:	31 97       	sbiw	r30, 0x01	; 1
    3482:	e0 1b       	sub	r30, r16
    3484:	f1 0b       	sbc	r31, r17
    3486:	ce 17       	cp	r28, r30
    3488:	df 07       	cpc	r29, r31
    348a:	78 f3       	brcs	.-34     	; 0x346a <USART0_sendString+0x10>
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	df 91       	pop	r29
    3490:	cf 91       	pop	r28
    3492:	1f 91       	pop	r17
    3494:	0f 91       	pop	r16
    3496:	08 95       	ret

00003498 <USART3_sendString>:
    3498:	0f 93       	push	r16
    349a:	1f 93       	push	r17
    349c:	cf 93       	push	r28
    349e:	df 93       	push	r29
    34a0:	8c 01       	movw	r16, r24
    34a2:	81 b3       	in	r24, 0x11	; 17
    34a4:	84 60       	ori	r24, 0x04	; 4
    34a6:	81 bb       	out	0x11, r24	; 17
    34a8:	c0 e0       	ldi	r28, 0x00	; 0
    34aa:	d0 e0       	ldi	r29, 0x00	; 0
    34ac:	07 c0       	rjmp	.+14     	; 0x34bc <USART3_sendString+0x24>
    34ae:	f8 01       	movw	r30, r16
    34b0:	ec 0f       	add	r30, r28
    34b2:	fd 1f       	adc	r31, r29
    34b4:	80 81       	ld	r24, Z
    34b6:	0e 94 f5 34 	call	0x69ea	; 0x69ea <USART_3_write>
    34ba:	21 96       	adiw	r28, 0x01	; 1
    34bc:	f8 01       	movw	r30, r16
    34be:	01 90       	ld	r0, Z+
    34c0:	00 20       	and	r0, r0
    34c2:	e9 f7       	brne	.-6      	; 0x34be <USART3_sendString+0x26>
    34c4:	31 97       	sbiw	r30, 0x01	; 1
    34c6:	e0 1b       	sub	r30, r16
    34c8:	f1 0b       	sbc	r31, r17
    34ca:	ce 17       	cp	r28, r30
    34cc:	df 07       	cpc	r29, r31
    34ce:	78 f3       	brcs	.-34     	; 0x34ae <USART3_sendString+0x16>
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	df 91       	pop	r29
    34d4:	cf 91       	pop	r28
    34d6:	1f 91       	pop	r17
    34d8:	0f 91       	pop	r16
    34da:	08 95       	ret

000034dc <USART_1_read_with_timeout>:
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	dc 01       	movw	r26, r24
    34e2:	09 c0       	rjmp	.+18     	; 0x34f6 <USART_1_read_with_timeout+0x1a>
    34e4:	01 96       	adiw	r24, 0x01	; 1
    34e6:	a1 1d       	adc	r26, r1
    34e8:	b1 1d       	adc	r27, r1
    34ea:	81 38       	cpi	r24, 0x81	; 129
    34ec:	2c e0       	ldi	r18, 0x0C	; 12
    34ee:	92 07       	cpc	r25, r18
    34f0:	a1 05       	cpc	r26, r1
    34f2:	b1 05       	cpc	r27, r1
    34f4:	38 f4       	brcc	.+14     	; 0x3504 <USART_1_read_with_timeout+0x28>
    34f6:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7e0824>
    34fa:	22 23       	and	r18, r18
    34fc:	9c f7       	brge	.-26     	; 0x34e4 <USART_1_read_with_timeout+0x8>
    34fe:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
    3502:	08 95       	ret
    3504:	8f ef       	ldi	r24, 0xFF	; 255
    3506:	08 95       	ret

00003508 <USART_1_disable_rx>:
    3508:	e0 e2       	ldi	r30, 0x20	; 32
    350a:	f8 e0       	ldi	r31, 0x08	; 8
    350c:	86 81       	ldd	r24, Z+6	; 0x06
    350e:	8f 77       	andi	r24, 0x7F	; 127
    3510:	86 83       	std	Z+6, r24	; 0x06
    3512:	08 95       	ret

00003514 <Identify_Battery_Type>:
    3514:	8f 92       	push	r8
    3516:	9f 92       	push	r9
    3518:	af 92       	push	r10
    351a:	bf 92       	push	r11
    351c:	cf 92       	push	r12
    351e:	df 92       	push	r13
    3520:	ef 92       	push	r14
    3522:	ff 92       	push	r15
    3524:	0f 93       	push	r16
    3526:	1f 93       	push	r17
    3528:	da 01       	movw	r26, r20
    352a:	2c 91       	ld	r18, X
    352c:	20 65       	ori	r18, 0x50	; 80
    352e:	a0 e5       	ldi	r26, 0x50	; 80
    3530:	a2 27       	eor	r26, r18
    3532:	20 91 05 53 	lds	r18, 0x5305	; 0x805305 <cal+0x58>
    3536:	21 ff       	sbrs	r18, 1
    3538:	0a c0       	rjmp	.+20     	; 0x354e <Identify_Battery_Type+0x3a>
    353a:	67 3e       	cpi	r22, 0xE7	; 231
    353c:	b3 e0       	ldi	r27, 0x03	; 3
    353e:	7b 07       	cpc	r23, r27
    3540:	81 05       	cpc	r24, r1
    3542:	91 05       	cpc	r25, r1
    3544:	20 f4       	brcc	.+8      	; 0x354e <Identify_Battery_Type+0x3a>
    3546:	fa 01       	movw	r30, r20
    3548:	a0 83       	st	Z, r26
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	47 c2       	rjmp	.+1166   	; 0x39dc <Identify_Battery_Type+0x4c8>
    354e:	e0 91 33 53 	lds	r30, 0x5333	; 0x805333 <cal+0x86>
    3552:	f0 91 34 53 	lds	r31, 0x5334	; 0x805334 <cal+0x87>
    3556:	02 e4       	ldi	r16, 0x42	; 66
    3558:	10 e0       	ldi	r17, 0x00	; 0
    355a:	0e 1b       	sub	r16, r30
    355c:	1f 0b       	sbc	r17, r31
    355e:	01 2e       	mov	r0, r17
    3560:	00 0c       	add	r0, r0
    3562:	22 0b       	sbc	r18, r18
    3564:	33 0b       	sbc	r19, r19
    3566:	06 17       	cp	r16, r22
    3568:	17 07       	cpc	r17, r23
    356a:	28 07       	cpc	r18, r24
    356c:	39 07       	cpc	r19, r25
    356e:	68 f4       	brcc	.+26     	; 0x358a <Identify_Battery_Type+0x76>
    3570:	8f 01       	movw	r16, r30
    3572:	0e 5b       	subi	r16, 0xBE	; 190
    3574:	1f 4f       	sbci	r17, 0xFF	; 255
    3576:	01 2e       	mov	r0, r17
    3578:	00 0c       	add	r0, r0
    357a:	22 0b       	sbc	r18, r18
    357c:	33 0b       	sbc	r19, r19
    357e:	60 17       	cp	r22, r16
    3580:	71 07       	cpc	r23, r17
    3582:	82 07       	cpc	r24, r18
    3584:	93 07       	cpc	r25, r19
    3586:	08 f4       	brcc	.+2      	; 0x358a <Identify_Battery_Type+0x76>
    3588:	14 c1       	rjmp	.+552    	; 0x37b2 <Identify_Battery_Type+0x29e>
    358a:	04 e6       	ldi	r16, 0x64	; 100
    358c:	10 e0       	ldi	r17, 0x00	; 0
    358e:	0e 1b       	sub	r16, r30
    3590:	1f 0b       	sbc	r17, r31
    3592:	01 2e       	mov	r0, r17
    3594:	00 0c       	add	r0, r0
    3596:	22 0b       	sbc	r18, r18
    3598:	33 0b       	sbc	r19, r19
    359a:	06 17       	cp	r16, r22
    359c:	17 07       	cpc	r17, r23
    359e:	28 07       	cpc	r18, r24
    35a0:	39 07       	cpc	r19, r25
    35a2:	68 f4       	brcc	.+26     	; 0x35be <Identify_Battery_Type+0xaa>
    35a4:	8f 01       	movw	r16, r30
    35a6:	0c 59       	subi	r16, 0x9C	; 156
    35a8:	1f 4f       	sbci	r17, 0xFF	; 255
    35aa:	01 2e       	mov	r0, r17
    35ac:	00 0c       	add	r0, r0
    35ae:	22 0b       	sbc	r18, r18
    35b0:	33 0b       	sbc	r19, r19
    35b2:	60 17       	cp	r22, r16
    35b4:	71 07       	cpc	r23, r17
    35b6:	82 07       	cpc	r24, r18
    35b8:	93 07       	cpc	r25, r19
    35ba:	08 f4       	brcc	.+2      	; 0x35be <Identify_Battery_Type+0xaa>
    35bc:	ff c0       	rjmp	.+510    	; 0x37bc <Identify_Battery_Type+0x2a8>
    35be:	08 ec       	ldi	r16, 0xC8	; 200
    35c0:	10 e0       	ldi	r17, 0x00	; 0
    35c2:	0e 1b       	sub	r16, r30
    35c4:	1f 0b       	sbc	r17, r31
    35c6:	01 2e       	mov	r0, r17
    35c8:	00 0c       	add	r0, r0
    35ca:	22 0b       	sbc	r18, r18
    35cc:	33 0b       	sbc	r19, r19
    35ce:	06 17       	cp	r16, r22
    35d0:	17 07       	cpc	r17, r23
    35d2:	28 07       	cpc	r18, r24
    35d4:	39 07       	cpc	r19, r25
    35d6:	68 f4       	brcc	.+26     	; 0x35f2 <Identify_Battery_Type+0xde>
    35d8:	8f 01       	movw	r16, r30
    35da:	08 53       	subi	r16, 0x38	; 56
    35dc:	1f 4f       	sbci	r17, 0xFF	; 255
    35de:	01 2e       	mov	r0, r17
    35e0:	00 0c       	add	r0, r0
    35e2:	22 0b       	sbc	r18, r18
    35e4:	33 0b       	sbc	r19, r19
    35e6:	60 17       	cp	r22, r16
    35e8:	71 07       	cpc	r23, r17
    35ea:	82 07       	cpc	r24, r18
    35ec:	93 07       	cpc	r25, r19
    35ee:	08 f4       	brcc	.+2      	; 0x35f2 <Identify_Battery_Type+0xde>
    35f0:	ea c0       	rjmp	.+468    	; 0x37c6 <Identify_Battery_Type+0x2b2>
    35f2:	00 e0       	ldi	r16, 0x00	; 0
    35f4:	11 e0       	ldi	r17, 0x01	; 1
    35f6:	0e 1b       	sub	r16, r30
    35f8:	1f 0b       	sbc	r17, r31
    35fa:	01 2e       	mov	r0, r17
    35fc:	00 0c       	add	r0, r0
    35fe:	22 0b       	sbc	r18, r18
    3600:	33 0b       	sbc	r19, r19
    3602:	06 17       	cp	r16, r22
    3604:	17 07       	cpc	r17, r23
    3606:	28 07       	cpc	r18, r24
    3608:	39 07       	cpc	r19, r25
    360a:	60 f4       	brcc	.+24     	; 0x3624 <Identify_Battery_Type+0x110>
    360c:	8f 01       	movw	r16, r30
    360e:	13 95       	inc	r17
    3610:	01 2e       	mov	r0, r17
    3612:	00 0c       	add	r0, r0
    3614:	22 0b       	sbc	r18, r18
    3616:	33 0b       	sbc	r19, r19
    3618:	60 17       	cp	r22, r16
    361a:	71 07       	cpc	r23, r17
    361c:	82 07       	cpc	r24, r18
    361e:	93 07       	cpc	r25, r19
    3620:	08 f4       	brcc	.+2      	; 0x3624 <Identify_Battery_Type+0x110>
    3622:	d6 c0       	rjmp	.+428    	; 0x37d0 <Identify_Battery_Type+0x2bc>
    3624:	09 e5       	ldi	r16, 0x59	; 89
    3626:	11 e0       	ldi	r17, 0x01	; 1
    3628:	0e 1b       	sub	r16, r30
    362a:	1f 0b       	sbc	r17, r31
    362c:	00 0f       	add	r16, r16
    362e:	11 1f       	adc	r17, r17
    3630:	01 2e       	mov	r0, r17
    3632:	00 0c       	add	r0, r0
    3634:	22 0b       	sbc	r18, r18
    3636:	33 0b       	sbc	r19, r19
    3638:	06 17       	cp	r16, r22
    363a:	17 07       	cpc	r17, r23
    363c:	28 07       	cpc	r18, r24
    363e:	39 07       	cpc	r19, r25
    3640:	78 f4       	brcc	.+30     	; 0x3660 <Identify_Battery_Type+0x14c>
    3642:	8f 01       	movw	r16, r30
    3644:	07 5a       	subi	r16, 0xA7	; 167
    3646:	1e 4f       	sbci	r17, 0xFE	; 254
    3648:	00 0f       	add	r16, r16
    364a:	11 1f       	adc	r17, r17
    364c:	01 2e       	mov	r0, r17
    364e:	00 0c       	add	r0, r0
    3650:	22 0b       	sbc	r18, r18
    3652:	33 0b       	sbc	r19, r19
    3654:	60 17       	cp	r22, r16
    3656:	71 07       	cpc	r23, r17
    3658:	82 07       	cpc	r24, r18
    365a:	93 07       	cpc	r25, r19
    365c:	08 f4       	brcc	.+2      	; 0x3660 <Identify_Battery_Type+0x14c>
    365e:	bd c0       	rjmp	.+378    	; 0x37da <Identify_Battery_Type+0x2c6>
    3660:	09 ea       	ldi	r16, 0xA9	; 169
    3662:	11 e0       	ldi	r17, 0x01	; 1
    3664:	0e 1b       	sub	r16, r30
    3666:	1f 0b       	sbc	r17, r31
    3668:	00 0f       	add	r16, r16
    366a:	11 1f       	adc	r17, r17
    366c:	01 2e       	mov	r0, r17
    366e:	00 0c       	add	r0, r0
    3670:	22 0b       	sbc	r18, r18
    3672:	33 0b       	sbc	r19, r19
    3674:	06 17       	cp	r16, r22
    3676:	17 07       	cpc	r17, r23
    3678:	28 07       	cpc	r18, r24
    367a:	39 07       	cpc	r19, r25
    367c:	78 f4       	brcc	.+30     	; 0x369c <Identify_Battery_Type+0x188>
    367e:	8f 01       	movw	r16, r30
    3680:	07 55       	subi	r16, 0x57	; 87
    3682:	1e 4f       	sbci	r17, 0xFE	; 254
    3684:	00 0f       	add	r16, r16
    3686:	11 1f       	adc	r17, r17
    3688:	01 2e       	mov	r0, r17
    368a:	00 0c       	add	r0, r0
    368c:	22 0b       	sbc	r18, r18
    368e:	33 0b       	sbc	r19, r19
    3690:	60 17       	cp	r22, r16
    3692:	71 07       	cpc	r23, r17
    3694:	82 07       	cpc	r24, r18
    3696:	93 07       	cpc	r25, r19
    3698:	08 f4       	brcc	.+2      	; 0x369c <Identify_Battery_Type+0x188>
    369a:	a4 c0       	rjmp	.+328    	; 0x37e4 <Identify_Battery_Type+0x2d0>
    369c:	00 91 0b 53 	lds	r16, 0x530B	; 0x80530b <cal+0x5e>
    36a0:	10 91 0c 53 	lds	r17, 0x530C	; 0x80530c <cal+0x5f>
    36a4:	20 91 0d 53 	lds	r18, 0x530D	; 0x80530d <cal+0x60>
    36a8:	30 91 0e 53 	lds	r19, 0x530E	; 0x80530e <cal+0x61>
    36ac:	6f 01       	movw	r12, r30
    36ae:	ff 0f       	add	r31, r31
    36b0:	ee 08       	sbc	r14, r14
    36b2:	ff 08       	sbc	r15, r15
    36b4:	48 01       	movw	r8, r16
    36b6:	59 01       	movw	r10, r18
    36b8:	8c 18       	sub	r8, r12
    36ba:	9d 08       	sbc	r9, r13
    36bc:	ae 08       	sbc	r10, r14
    36be:	bf 08       	sbc	r11, r15
    36c0:	86 16       	cp	r8, r22
    36c2:	97 06       	cpc	r9, r23
    36c4:	a8 06       	cpc	r10, r24
    36c6:	b9 06       	cpc	r11, r25
    36c8:	60 f4       	brcc	.+24     	; 0x36e2 <Identify_Battery_Type+0x1ce>
    36ca:	48 01       	movw	r8, r16
    36cc:	59 01       	movw	r10, r18
    36ce:	8c 0c       	add	r8, r12
    36d0:	9d 1c       	adc	r9, r13
    36d2:	ae 1c       	adc	r10, r14
    36d4:	bf 1c       	adc	r11, r15
    36d6:	68 15       	cp	r22, r8
    36d8:	79 05       	cpc	r23, r9
    36da:	8a 05       	cpc	r24, r10
    36dc:	9b 05       	cpc	r25, r11
    36de:	08 f4       	brcc	.+2      	; 0x36e2 <Identify_Battery_Type+0x1ce>
    36e0:	8e c0       	rjmp	.+284    	; 0x37fe <Identify_Battery_Type+0x2ea>
    36e2:	00 91 13 53 	lds	r16, 0x5313	; 0x805313 <cal+0x66>
    36e6:	10 91 14 53 	lds	r17, 0x5314	; 0x805314 <cal+0x67>
    36ea:	20 91 15 53 	lds	r18, 0x5315	; 0x805315 <cal+0x68>
    36ee:	30 91 16 53 	lds	r19, 0x5316	; 0x805316 <cal+0x69>
    36f2:	48 01       	movw	r8, r16
    36f4:	59 01       	movw	r10, r18
    36f6:	8c 18       	sub	r8, r12
    36f8:	9d 08       	sbc	r9, r13
    36fa:	ae 08       	sbc	r10, r14
    36fc:	bf 08       	sbc	r11, r15
    36fe:	86 16       	cp	r8, r22
    3700:	97 06       	cpc	r9, r23
    3702:	a8 06       	cpc	r10, r24
    3704:	b9 06       	cpc	r11, r25
    3706:	60 f4       	brcc	.+24     	; 0x3720 <Identify_Battery_Type+0x20c>
    3708:	46 01       	movw	r8, r12
    370a:	57 01       	movw	r10, r14
    370c:	80 0e       	add	r8, r16
    370e:	91 1e       	adc	r9, r17
    3710:	a2 1e       	adc	r10, r18
    3712:	b3 1e       	adc	r11, r19
    3714:	68 15       	cp	r22, r8
    3716:	79 05       	cpc	r23, r9
    3718:	8a 05       	cpc	r24, r10
    371a:	9b 05       	cpc	r25, r11
    371c:	08 f4       	brcc	.+2      	; 0x3720 <Identify_Battery_Type+0x20c>
    371e:	6f c0       	rjmp	.+222    	; 0x37fe <Identify_Battery_Type+0x2ea>
    3720:	00 91 1b 53 	lds	r16, 0x531B	; 0x80531b <cal+0x6e>
    3724:	10 91 1c 53 	lds	r17, 0x531C	; 0x80531c <cal+0x6f>
    3728:	20 91 1d 53 	lds	r18, 0x531D	; 0x80531d <cal+0x70>
    372c:	30 91 1e 53 	lds	r19, 0x531E	; 0x80531e <cal+0x71>
    3730:	48 01       	movw	r8, r16
    3732:	59 01       	movw	r10, r18
    3734:	8c 18       	sub	r8, r12
    3736:	9d 08       	sbc	r9, r13
    3738:	ae 08       	sbc	r10, r14
    373a:	bf 08       	sbc	r11, r15
    373c:	86 16       	cp	r8, r22
    373e:	97 06       	cpc	r9, r23
    3740:	a8 06       	cpc	r10, r24
    3742:	b9 06       	cpc	r11, r25
    3744:	60 f4       	brcc	.+24     	; 0x375e <Identify_Battery_Type+0x24a>
    3746:	46 01       	movw	r8, r12
    3748:	57 01       	movw	r10, r14
    374a:	80 0e       	add	r8, r16
    374c:	91 1e       	adc	r9, r17
    374e:	a2 1e       	adc	r10, r18
    3750:	b3 1e       	adc	r11, r19
    3752:	68 15       	cp	r22, r8
    3754:	79 05       	cpc	r23, r9
    3756:	8a 05       	cpc	r24, r10
    3758:	9b 05       	cpc	r25, r11
    375a:	08 f4       	brcc	.+2      	; 0x375e <Identify_Battery_Type+0x24a>
    375c:	50 c0       	rjmp	.+160    	; 0x37fe <Identify_Battery_Type+0x2ea>
    375e:	00 91 23 53 	lds	r16, 0x5323	; 0x805323 <cal+0x76>
    3762:	10 91 24 53 	lds	r17, 0x5324	; 0x805324 <cal+0x77>
    3766:	20 91 25 53 	lds	r18, 0x5325	; 0x805325 <cal+0x78>
    376a:	30 91 26 53 	lds	r19, 0x5326	; 0x805326 <cal+0x79>
    376e:	48 01       	movw	r8, r16
    3770:	59 01       	movw	r10, r18
    3772:	8c 18       	sub	r8, r12
    3774:	9d 08       	sbc	r9, r13
    3776:	ae 08       	sbc	r10, r14
    3778:	bf 08       	sbc	r11, r15
    377a:	86 16       	cp	r8, r22
    377c:	97 06       	cpc	r9, r23
    377e:	a8 06       	cpc	r10, r24
    3780:	b9 06       	cpc	r11, r25
    3782:	48 f4       	brcc	.+18     	; 0x3796 <Identify_Battery_Type+0x282>
    3784:	c0 0e       	add	r12, r16
    3786:	d1 1e       	adc	r13, r17
    3788:	e2 1e       	adc	r14, r18
    378a:	f3 1e       	adc	r15, r19
    378c:	6c 15       	cp	r22, r12
    378e:	7d 05       	cpc	r23, r13
    3790:	8e 05       	cpc	r24, r14
    3792:	9f 05       	cpc	r25, r15
    3794:	a0 f1       	brcs	.+104    	; 0x37fe <Identify_Battery_Type+0x2ea>
    3796:	62 30       	cpi	r22, 0x02	; 2
    3798:	71 05       	cpc	r23, r1
    379a:	81 05       	cpc	r24, r1
    379c:	91 05       	cpc	r25, r1
    379e:	38 f1       	brcs	.+78     	; 0x37ee <Identify_Battery_Type+0x2da>
    37a0:	67 3e       	cpi	r22, 0xE7	; 231
    37a2:	f3 e0       	ldi	r31, 0x03	; 3
    37a4:	7f 07       	cpc	r23, r31
    37a6:	81 05       	cpc	r24, r1
    37a8:	91 05       	cpc	r25, r1
    37aa:	29 f1       	breq	.+74     	; 0x37f6 <Identify_Battery_Type+0x2e2>
    37ac:	8b 01       	movw	r16, r22
    37ae:	9c 01       	movw	r18, r24
    37b0:	26 c0       	rjmp	.+76     	; 0x37fe <Identify_Battery_Type+0x2ea>
    37b2:	02 e4       	ldi	r16, 0x42	; 66
    37b4:	10 e0       	ldi	r17, 0x00	; 0
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	21 c0       	rjmp	.+66     	; 0x37fe <Identify_Battery_Type+0x2ea>
    37bc:	04 e6       	ldi	r16, 0x64	; 100
    37be:	10 e0       	ldi	r17, 0x00	; 0
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	1c c0       	rjmp	.+56     	; 0x37fe <Identify_Battery_Type+0x2ea>
    37c6:	08 ec       	ldi	r16, 0xC8	; 200
    37c8:	10 e0       	ldi	r17, 0x00	; 0
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	17 c0       	rjmp	.+46     	; 0x37fe <Identify_Battery_Type+0x2ea>
    37d0:	00 e0       	ldi	r16, 0x00	; 0
    37d2:	11 e0       	ldi	r17, 0x01	; 1
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	12 c0       	rjmp	.+36     	; 0x37fe <Identify_Battery_Type+0x2ea>
    37da:	02 eb       	ldi	r16, 0xB2	; 178
    37dc:	12 e0       	ldi	r17, 0x02	; 2
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	0d c0       	rjmp	.+26     	; 0x37fe <Identify_Battery_Type+0x2ea>
    37e4:	02 e5       	ldi	r16, 0x52	; 82
    37e6:	13 e0       	ldi	r17, 0x03	; 3
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	08 c0       	rjmp	.+16     	; 0x37fe <Identify_Battery_Type+0x2ea>
    37ee:	00 e0       	ldi	r16, 0x00	; 0
    37f0:	10 e0       	ldi	r17, 0x00	; 0
    37f2:	98 01       	movw	r18, r16
    37f4:	04 c0       	rjmp	.+8      	; 0x37fe <Identify_Battery_Type+0x2ea>
    37f6:	08 ee       	ldi	r16, 0xE8	; 232
    37f8:	13 e0       	ldi	r17, 0x03	; 3
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	00 93 8f 48 	sts	0x488F, r16	; 0x80488f <array_SYBT+0x2e>
    3802:	10 93 90 48 	sts	0x4890, r17	; 0x804890 <array_SYBT+0x2f>
    3806:	08 3c       	cpi	r16, 0xC8	; 200
    3808:	11 05       	cpc	r17, r1
    380a:	21 05       	cpc	r18, r1
    380c:	31 05       	cpc	r19, r1
    380e:	09 f4       	brne	.+2      	; 0x3812 <Identify_Battery_Type+0x2fe>
    3810:	40 c0       	rjmp	.+128    	; 0x3892 <Identify_Battery_Type+0x37e>
    3812:	88 f4       	brcc	.+34     	; 0x3836 <Identify_Battery_Type+0x322>
    3814:	02 34       	cpi	r16, 0x42	; 66
    3816:	11 05       	cpc	r17, r1
    3818:	21 05       	cpc	r18, r1
    381a:	31 05       	cpc	r19, r1
    381c:	39 f1       	breq	.+78     	; 0x386c <Identify_Battery_Type+0x358>
    381e:	04 36       	cpi	r16, 0x64	; 100
    3820:	11 05       	cpc	r17, r1
    3822:	21 05       	cpc	r18, r1
    3824:	31 05       	cpc	r19, r1
    3826:	59 f1       	breq	.+86     	; 0x387e <Identify_Battery_Type+0x36a>
    3828:	01 15       	cp	r16, r1
    382a:	11 05       	cpc	r17, r1
    382c:	21 05       	cpc	r18, r1
    382e:	31 05       	cpc	r19, r1
    3830:	09 f0       	breq	.+2      	; 0x3834 <Identify_Battery_Type+0x320>
    3832:	69 c0       	rjmp	.+210    	; 0x3906 <Identify_Battery_Type+0x3f2>
    3834:	62 c0       	rjmp	.+196    	; 0x38fa <Identify_Battery_Type+0x3e6>
    3836:	02 3b       	cpi	r16, 0xB2	; 178
    3838:	82 e0       	ldi	r24, 0x02	; 2
    383a:	18 07       	cpc	r17, r24
    383c:	21 05       	cpc	r18, r1
    383e:	31 05       	cpc	r19, r1
    3840:	e1 f1       	breq	.+120    	; 0x38ba <Identify_Battery_Type+0x3a6>
    3842:	38 f4       	brcc	.+14     	; 0x3852 <Identify_Battery_Type+0x33e>
    3844:	01 15       	cp	r16, r1
    3846:	e1 e0       	ldi	r30, 0x01	; 1
    3848:	1e 07       	cpc	r17, r30
    384a:	21 05       	cpc	r18, r1
    384c:	31 05       	cpc	r19, r1
    384e:	59 f1       	breq	.+86     	; 0x38a6 <Identify_Battery_Type+0x392>
    3850:	5a c0       	rjmp	.+180    	; 0x3906 <Identify_Battery_Type+0x3f2>
    3852:	02 35       	cpi	r16, 0x52	; 82
    3854:	f3 e0       	ldi	r31, 0x03	; 3
    3856:	1f 07       	cpc	r17, r31
    3858:	21 05       	cpc	r18, r1
    385a:	31 05       	cpc	r19, r1
    385c:	c1 f1       	breq	.+112    	; 0x38ce <Identify_Battery_Type+0x3ba>
    385e:	08 3e       	cpi	r16, 0xE8	; 232
    3860:	83 e0       	ldi	r24, 0x03	; 3
    3862:	18 07       	cpc	r17, r24
    3864:	21 05       	cpc	r18, r1
    3866:	31 05       	cpc	r19, r1
    3868:	e1 f1       	breq	.+120    	; 0x38e2 <Identify_Battery_Type+0x3ce>
    386a:	4d c0       	rjmp	.+154    	; 0x3906 <Identify_Battery_Type+0x3f2>
    386c:	ee e5       	ldi	r30, 0x5E	; 94
    386e:	f4 e5       	ldi	r31, 0x54	; 84
    3870:	86 e3       	ldi	r24, 0x36	; 54
    3872:	82 83       	std	Z+2, r24	; 0x02
    3874:	81 83       	std	Z+1, r24	; 0x01
    3876:	8e e5       	ldi	r24, 0x5E	; 94
    3878:	80 83       	st	Z, r24
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	af c0       	rjmp	.+350    	; 0x39dc <Identify_Battery_Type+0x4c8>
    387e:	ee e5       	ldi	r30, 0x5E	; 94
    3880:	f4 e5       	ldi	r31, 0x54	; 84
    3882:	80 e3       	ldi	r24, 0x30	; 48
    3884:	82 83       	std	Z+2, r24	; 0x02
    3886:	81 e3       	ldi	r24, 0x31	; 49
    3888:	81 83       	std	Z+1, r24	; 0x01
    388a:	8c e5       	ldi	r24, 0x5C	; 92
    388c:	80 83       	st	Z, r24
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	a5 c0       	rjmp	.+330    	; 0x39dc <Identify_Battery_Type+0x4c8>
    3892:	ee e5       	ldi	r30, 0x5E	; 94
    3894:	f4 e5       	ldi	r31, 0x54	; 84
    3896:	80 e3       	ldi	r24, 0x30	; 48
    3898:	82 83       	std	Z+2, r24	; 0x02
    389a:	82 e3       	ldi	r24, 0x32	; 50
    389c:	81 83       	std	Z+1, r24	; 0x01
    389e:	8b e5       	ldi	r24, 0x5B	; 91
    38a0:	80 83       	st	Z, r24
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	9b c0       	rjmp	.+310    	; 0x39dc <Identify_Battery_Type+0x4c8>
    38a6:	ee e5       	ldi	r30, 0x5E	; 94
    38a8:	f4 e5       	ldi	r31, 0x54	; 84
    38aa:	85 e3       	ldi	r24, 0x35	; 53
    38ac:	82 83       	std	Z+2, r24	; 0x02
    38ae:	83 e3       	ldi	r24, 0x33	; 51
    38b0:	81 83       	std	Z+1, r24	; 0x01
    38b2:	8d e5       	ldi	r24, 0x5D	; 93
    38b4:	80 83       	st	Z, r24
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	91 c0       	rjmp	.+290    	; 0x39dc <Identify_Battery_Type+0x4c8>
    38ba:	ee e5       	ldi	r30, 0x5E	; 94
    38bc:	f4 e5       	ldi	r31, 0x54	; 84
    38be:	89 e3       	ldi	r24, 0x39	; 57
    38c0:	82 83       	std	Z+2, r24	; 0x02
    38c2:	86 e3       	ldi	r24, 0x36	; 54
    38c4:	81 83       	std	Z+1, r24	; 0x01
    38c6:	8c e5       	ldi	r24, 0x5C	; 92
    38c8:	80 83       	st	Z, r24
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	87 c0       	rjmp	.+270    	; 0x39dc <Identify_Battery_Type+0x4c8>
    38ce:	ee e5       	ldi	r30, 0x5E	; 94
    38d0:	f4 e5       	ldi	r31, 0x54	; 84
    38d2:	85 e3       	ldi	r24, 0x35	; 53
    38d4:	82 83       	std	Z+2, r24	; 0x02
    38d6:	88 e3       	ldi	r24, 0x38	; 56
    38d8:	81 83       	std	Z+1, r24	; 0x01
    38da:	8d e5       	ldi	r24, 0x5D	; 93
    38dc:	80 83       	st	Z, r24
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	7d c0       	rjmp	.+250    	; 0x39dc <Identify_Battery_Type+0x4c8>
    38e2:	ee e5       	ldi	r30, 0x5E	; 94
    38e4:	f4 e5       	ldi	r31, 0x54	; 84
    38e6:	2a 2f       	mov	r18, r26
    38e8:	20 61       	ori	r18, 0x10	; 16
    38ea:	da 01       	movw	r26, r20
    38ec:	2c 93       	st	X, r18
    38ee:	8d e2       	ldi	r24, 0x2D	; 45
    38f0:	82 83       	std	Z+2, r24	; 0x02
    38f2:	81 83       	std	Z+1, r24	; 0x01
    38f4:	80 83       	st	Z, r24
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	71 c0       	rjmp	.+226    	; 0x39dc <Identify_Battery_Type+0x4c8>
    38fa:	2a 2f       	mov	r18, r26
    38fc:	20 61       	ori	r18, 0x10	; 16
    38fe:	fa 01       	movw	r30, r20
    3900:	20 83       	st	Z, r18
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	6b c0       	rjmp	.+214    	; 0x39dc <Identify_Battery_Type+0x4c8>
    3906:	fa 01       	movw	r30, r20
    3908:	a0 83       	st	Z, r26
    390a:	80 91 0b 53 	lds	r24, 0x530B	; 0x80530b <cal+0x5e>
    390e:	90 91 0c 53 	lds	r25, 0x530C	; 0x80530c <cal+0x5f>
    3912:	a0 91 0d 53 	lds	r26, 0x530D	; 0x80530d <cal+0x60>
    3916:	b0 91 0e 53 	lds	r27, 0x530E	; 0x80530e <cal+0x61>
    391a:	08 17       	cp	r16, r24
    391c:	19 07       	cpc	r17, r25
    391e:	2a 07       	cpc	r18, r26
    3920:	3b 07       	cpc	r19, r27
    3922:	69 f4       	brne	.+26     	; 0x393e <Identify_Battery_Type+0x42a>
    3924:	80 91 09 53 	lds	r24, 0x5309	; 0x805309 <cal+0x5c>
    3928:	ee e5       	ldi	r30, 0x5E	; 94
    392a:	f4 e5       	ldi	r31, 0x54	; 84
    392c:	82 83       	std	Z+2, r24	; 0x02
    392e:	80 91 08 53 	lds	r24, 0x5308	; 0x805308 <cal+0x5b>
    3932:	81 83       	std	Z+1, r24	; 0x01
    3934:	80 91 07 53 	lds	r24, 0x5307	; 0x805307 <cal+0x5a>
    3938:	80 83       	st	Z, r24
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	4f c0       	rjmp	.+158    	; 0x39dc <Identify_Battery_Type+0x4c8>
    393e:	80 91 13 53 	lds	r24, 0x5313	; 0x805313 <cal+0x66>
    3942:	90 91 14 53 	lds	r25, 0x5314	; 0x805314 <cal+0x67>
    3946:	a0 91 15 53 	lds	r26, 0x5315	; 0x805315 <cal+0x68>
    394a:	b0 91 16 53 	lds	r27, 0x5316	; 0x805316 <cal+0x69>
    394e:	08 17       	cp	r16, r24
    3950:	19 07       	cpc	r17, r25
    3952:	2a 07       	cpc	r18, r26
    3954:	3b 07       	cpc	r19, r27
    3956:	69 f4       	brne	.+26     	; 0x3972 <Identify_Battery_Type+0x45e>
    3958:	80 91 11 53 	lds	r24, 0x5311	; 0x805311 <cal+0x64>
    395c:	ee e5       	ldi	r30, 0x5E	; 94
    395e:	f4 e5       	ldi	r31, 0x54	; 84
    3960:	82 83       	std	Z+2, r24	; 0x02
    3962:	80 91 10 53 	lds	r24, 0x5310	; 0x805310 <cal+0x63>
    3966:	81 83       	std	Z+1, r24	; 0x01
    3968:	80 91 0f 53 	lds	r24, 0x530F	; 0x80530f <cal+0x62>
    396c:	80 83       	st	Z, r24
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	35 c0       	rjmp	.+106    	; 0x39dc <Identify_Battery_Type+0x4c8>
    3972:	80 91 1b 53 	lds	r24, 0x531B	; 0x80531b <cal+0x6e>
    3976:	90 91 1c 53 	lds	r25, 0x531C	; 0x80531c <cal+0x6f>
    397a:	a0 91 1d 53 	lds	r26, 0x531D	; 0x80531d <cal+0x70>
    397e:	b0 91 1e 53 	lds	r27, 0x531E	; 0x80531e <cal+0x71>
    3982:	08 17       	cp	r16, r24
    3984:	19 07       	cpc	r17, r25
    3986:	2a 07       	cpc	r18, r26
    3988:	3b 07       	cpc	r19, r27
    398a:	69 f4       	brne	.+26     	; 0x39a6 <Identify_Battery_Type+0x492>
    398c:	80 91 19 53 	lds	r24, 0x5319	; 0x805319 <cal+0x6c>
    3990:	ee e5       	ldi	r30, 0x5E	; 94
    3992:	f4 e5       	ldi	r31, 0x54	; 84
    3994:	82 83       	std	Z+2, r24	; 0x02
    3996:	80 91 18 53 	lds	r24, 0x5318	; 0x805318 <cal+0x6b>
    399a:	81 83       	std	Z+1, r24	; 0x01
    399c:	80 91 17 53 	lds	r24, 0x5317	; 0x805317 <cal+0x6a>
    39a0:	80 83       	st	Z, r24
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	1b c0       	rjmp	.+54     	; 0x39dc <Identify_Battery_Type+0x4c8>
    39a6:	80 91 23 53 	lds	r24, 0x5323	; 0x805323 <cal+0x76>
    39aa:	90 91 24 53 	lds	r25, 0x5324	; 0x805324 <cal+0x77>
    39ae:	a0 91 25 53 	lds	r26, 0x5325	; 0x805325 <cal+0x78>
    39b2:	b0 91 26 53 	lds	r27, 0x5326	; 0x805326 <cal+0x79>
    39b6:	08 17       	cp	r16, r24
    39b8:	19 07       	cpc	r17, r25
    39ba:	2a 07       	cpc	r18, r26
    39bc:	3b 07       	cpc	r19, r27
    39be:	69 f4       	brne	.+26     	; 0x39da <Identify_Battery_Type+0x4c6>
    39c0:	80 91 21 53 	lds	r24, 0x5321	; 0x805321 <cal+0x74>
    39c4:	ee e5       	ldi	r30, 0x5E	; 94
    39c6:	f4 e5       	ldi	r31, 0x54	; 84
    39c8:	82 83       	std	Z+2, r24	; 0x02
    39ca:	80 91 20 53 	lds	r24, 0x5320	; 0x805320 <cal+0x73>
    39ce:	81 83       	std	Z+1, r24	; 0x01
    39d0:	80 91 1f 53 	lds	r24, 0x531F	; 0x80531f <cal+0x72>
    39d4:	80 83       	st	Z, r24
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	01 c0       	rjmp	.+2      	; 0x39dc <Identify_Battery_Type+0x4c8>
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	1f 91       	pop	r17
    39de:	0f 91       	pop	r16
    39e0:	ff 90       	pop	r15
    39e2:	ef 90       	pop	r14
    39e4:	df 90       	pop	r13
    39e6:	cf 90       	pop	r12
    39e8:	bf 90       	pop	r11
    39ea:	af 90       	pop	r10
    39ec:	9f 90       	pop	r9
    39ee:	8f 90       	pop	r8
    39f0:	08 95       	ret

000039f2 <Test_Battery>:
    39f2:	2f 92       	push	r2
    39f4:	3f 92       	push	r3
    39f6:	4f 92       	push	r4
    39f8:	5f 92       	push	r5
    39fa:	6f 92       	push	r6
    39fc:	7f 92       	push	r7
    39fe:	8f 92       	push	r8
    3a00:	9f 92       	push	r9
    3a02:	af 92       	push	r10
    3a04:	bf 92       	push	r11
    3a06:	cf 92       	push	r12
    3a08:	df 92       	push	r13
    3a0a:	ef 92       	push	r14
    3a0c:	ff 92       	push	r15
    3a0e:	0f 93       	push	r16
    3a10:	1f 93       	push	r17
    3a12:	cf 93       	push	r28
    3a14:	df 93       	push	r29
    3a16:	cd b7       	in	r28, 0x3d	; 61
    3a18:	de b7       	in	r29, 0x3e	; 62
    3a1a:	c4 54       	subi	r28, 0x44	; 68
    3a1c:	d1 09       	sbc	r29, r1
    3a1e:	cd bf       	out	0x3d, r28	; 61
    3a20:	de bf       	out	0x3e, r29	; 62
    3a22:	1a 01       	movw	r2, r20
    3a24:	2b af       	std	Y+59, r18	; 0x3b
    3a26:	3c af       	std	Y+60, r19	; 0x3c
    3a28:	fe 01       	movw	r30, r28
    3a2a:	31 96       	adiw	r30, 0x01	; 1
    3a2c:	82 e3       	ldi	r24, 0x32	; 50
    3a2e:	df 01       	movw	r26, r30
    3a30:	1d 92       	st	X+, r1
    3a32:	8a 95       	dec	r24
    3a34:	e9 f7       	brne	.-6      	; 0x3a30 <Test_Battery+0x3e>
    3a36:	e1 e6       	ldi	r30, 0x61	; 97
    3a38:	f3 e5       	ldi	r31, 0x53	; 83
    3a3a:	12 82       	std	Z+2, r1	; 0x02
    3a3c:	11 82       	std	Z+1, r1	; 0x01
    3a3e:	10 82       	st	Z, r1
    3a40:	fa 01       	movw	r30, r20
    3a42:	10 82       	st	Z, r1
    3a44:	11 82       	std	Z+1, r1	; 0x01
    3a46:	db 01       	movw	r26, r22
    3a48:	1d 92       	st	X+, r1
    3a4a:	1d 92       	st	X+, r1
    3a4c:	1d 92       	st	X+, r1
    3a4e:	1c 92       	st	X, r1
    3a50:	13 97       	sbiw	r26, 0x03	; 3
    3a52:	a8 95       	wdr
    3a54:	81 b1       	in	r24, 0x01	; 1
    3a56:	8f 7d       	andi	r24, 0xDF	; 223
    3a58:	81 b9       	out	0x01, r24	; 1
    3a5a:	81 b1       	in	r24, 0x01	; 1
    3a5c:	80 61       	ori	r24, 0x10	; 16
    3a5e:	81 b9       	out	0x01, r24	; 1
    3a60:	85 b1       	in	r24, 0x05	; 5
    3a62:	80 61       	ori	r24, 0x10	; 16
    3a64:	85 b9       	out	0x05, r24	; 5
    3a66:	10 92 4a 48 	sts	0x484A, r1	; 0x80484a <SYBTisProvidingPower>
    3a6a:	80 91 59 53 	lds	r24, 0x5359	; 0x805359 <SYBT+0x12>
    3a6e:	90 91 5a 53 	lds	r25, 0x535A	; 0x80535a <SYBT+0x13>
    3a72:	8d 3d       	cpi	r24, 0xDD	; 221
    3a74:	95 40       	sbci	r25, 0x05	; 5
    3a76:	5c f0       	brlt	.+22     	; 0x3a8e <Test_Battery+0x9c>
    3a78:	81 e5       	ldi	r24, 0x51	; 81
    3a7a:	93 e4       	ldi	r25, 0x43	; 67
    3a7c:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
    3a80:	8f ef       	ldi	r24, 0xFF	; 255
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	f1 01       	movw	r30, r2
    3a86:	80 83       	st	Z, r24
    3a88:	91 83       	std	Z+1, r25	; 0x01
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	ee c2       	rjmp	.+1500   	; 0x406a <__DATA_REGION_LENGTH__+0x6a>
    3a8e:	85 b3       	in	r24, 0x15	; 21
    3a90:	80 62       	ori	r24, 0x20	; 32
    3a92:	85 bb       	out	0x15, r24	; 21
    3a94:	85 b3       	in	r24, 0x15	; 21
    3a96:	8f 7e       	andi	r24, 0xEF	; 239
    3a98:	85 bb       	out	0x15, r24	; 21
    3a9a:	88 e0       	ldi	r24, 0x08	; 8
    3a9c:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3aa0:	88 e0       	ldi	r24, 0x08	; 8
    3aa2:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3aa6:	88 e0       	ldi	r24, 0x08	; 8
    3aa8:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3aac:	60 91 b1 52 	lds	r22, 0x52B1	; 0x8052b1 <cal+0x4>
    3ab0:	70 91 b2 52 	lds	r23, 0x52B2	; 0x8052b2 <cal+0x5>
    3ab4:	07 2e       	mov	r0, r23
    3ab6:	00 0c       	add	r0, r0
    3ab8:	88 0b       	sbc	r24, r24
    3aba:	99 0b       	sbc	r25, r25
    3abc:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	4a e7       	ldi	r20, 0x7A	; 122
    3ac6:	54 e4       	ldi	r21, 0x44	; 68
    3ac8:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    3acc:	6b 01       	movw	r12, r22
    3ace:	7c 01       	movw	r14, r24
    3ad0:	88 e0       	ldi	r24, 0x08	; 8
    3ad2:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3ad6:	96 95       	lsr	r25
    3ad8:	87 95       	ror	r24
    3ada:	96 95       	lsr	r25
    3adc:	87 95       	ror	r24
    3ade:	bc 01       	movw	r22, r24
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    3ae8:	a7 01       	movw	r20, r14
    3aea:	96 01       	movw	r18, r12
    3aec:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3af0:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    3af4:	6b ab       	std	Y+51, r22	; 0x33
    3af6:	7c ab       	std	Y+52, r23	; 0x34
    3af8:	8d ab       	std	Y+53, r24	; 0x35
    3afa:	9e ab       	std	Y+54, r25	; 0x36
    3afc:	eb a8       	ldd	r14, Y+51	; 0x33
    3afe:	fc a8       	ldd	r15, Y+52	; 0x34
    3b00:	f2 e3       	ldi	r31, 0x32	; 50
    3b02:	ef 16       	cp	r14, r31
    3b04:	f1 04       	cpc	r15, r1
    3b06:	34 f4       	brge	.+12     	; 0x3b14 <Test_Battery+0x122>
    3b08:	84 e6       	ldi	r24, 0x64	; 100
    3b0a:	93 e4       	ldi	r25, 0x43	; 67
    3b0c:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	ab c2       	rjmp	.+1366   	; 0x406a <__DATA_REGION_LENGTH__+0x6a>
    3b14:	89 e0       	ldi	r24, 0x09	; 9
    3b16:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3b1a:	d8 01       	movw	r26, r16
    3b1c:	6d 91       	ld	r22, X+
    3b1e:	7c 91       	ld	r23, X
    3b20:	07 2e       	mov	r0, r23
    3b22:	00 0c       	add	r0, r0
    3b24:	88 0b       	sbc	r24, r24
    3b26:	99 0b       	sbc	r25, r25
    3b28:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	4a e7       	ldi	r20, 0x7A	; 122
    3b32:	54 e4       	ldi	r21, 0x44	; 68
    3b34:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    3b38:	4b 01       	movw	r8, r22
    3b3a:	5c 01       	movw	r10, r24
    3b3c:	89 e0       	ldi	r24, 0x09	; 9
    3b3e:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3b42:	96 95       	lsr	r25
    3b44:	87 95       	ror	r24
    3b46:	96 95       	lsr	r25
    3b48:	87 95       	ror	r24
    3b4a:	bc 01       	movw	r22, r24
    3b4c:	80 e0       	ldi	r24, 0x00	; 0
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    3b54:	a5 01       	movw	r20, r10
    3b56:	94 01       	movw	r18, r8
    3b58:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3b5c:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    3b60:	c6 2e       	mov	r12, r22
    3b62:	d7 2e       	mov	r13, r23
    3b64:	07 2e       	mov	r0, r23
    3b66:	00 0c       	add	r0, r0
    3b68:	88 0b       	sbc	r24, r24
    3b6a:	99 0b       	sbc	r25, r25
    3b6c:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    3b70:	4b 01       	movw	r8, r22
    3b72:	5c 01       	movw	r10, r24
    3b74:	60 91 35 53 	lds	r22, 0x5335	; 0x805335 <cal+0x88>
    3b78:	70 91 36 53 	lds	r23, 0x5336	; 0x805336 <cal+0x89>
    3b7c:	07 2e       	mov	r0, r23
    3b7e:	00 0c       	add	r0, r0
    3b80:	88 0b       	sbc	r24, r24
    3b82:	99 0b       	sbc	r25, r25
    3b84:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    3b88:	9b 01       	movw	r18, r22
    3b8a:	ac 01       	movw	r20, r24
    3b8c:	c5 01       	movw	r24, r10
    3b8e:	b4 01       	movw	r22, r8
    3b90:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3b94:	6f ab       	std	Y+55, r22	; 0x37
    3b96:	78 af       	std	Y+56, r23	; 0x38
    3b98:	89 af       	std	Y+57, r24	; 0x39
    3b9a:	9a af       	std	Y+58, r25	; 0x3a
    3b9c:	60 91 37 53 	lds	r22, 0x5337	; 0x805337 <cal+0x8a>
    3ba0:	70 91 38 53 	lds	r23, 0x5338	; 0x805338 <cal+0x8b>
    3ba4:	07 2e       	mov	r0, r23
    3ba6:	00 0c       	add	r0, r0
    3ba8:	88 0b       	sbc	r24, r24
    3baa:	99 0b       	sbc	r25, r25
    3bac:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	48 ec       	ldi	r20, 0xC8	; 200
    3bb6:	52 e4       	ldi	r21, 0x42	; 66
    3bb8:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3bbc:	2b 01       	movw	r4, r22
    3bbe:	3c 01       	movw	r6, r24
    3bc0:	9b 01       	movw	r18, r22
    3bc2:	ac 01       	movw	r20, r24
    3bc4:	6f a9       	ldd	r22, Y+55	; 0x37
    3bc6:	78 ad       	ldd	r23, Y+56	; 0x38
    3bc8:	89 ad       	ldd	r24, Y+57	; 0x39
    3bca:	9a ad       	ldd	r25, Y+58	; 0x3a
    3bcc:	0e 94 bc 39 	call	0x7378	; 0x7378 <__subsf3>
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	48 ec       	ldi	r20, 0xC8	; 200
    3bd6:	52 e4       	ldi	r21, 0x42	; 66
    3bd8:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    3bdc:	0e 94 13 3b 	call	0x7626	; 0x7626 <floor>
    3be0:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    3be4:	6f af       	std	Y+63, r22	; 0x3f
    3be6:	21 96       	adiw	r28, 0x01	; 1
    3be8:	7f af       	std	Y+63, r23	; 0x3f
    3bea:	21 97       	sbiw	r28, 0x01	; 1
    3bec:	86 2f       	mov	r24, r22
    3bee:	97 2f       	mov	r25, r23
    3bf0:	5c 01       	movw	r10, r24
    3bf2:	a3 01       	movw	r20, r6
    3bf4:	92 01       	movw	r18, r4
    3bf6:	6f a9       	ldd	r22, Y+55	; 0x37
    3bf8:	78 ad       	ldd	r23, Y+56	; 0x38
    3bfa:	89 ad       	ldd	r24, Y+57	; 0x39
    3bfc:	9a ad       	ldd	r25, Y+58	; 0x3a
    3bfe:	0e 94 bd 39 	call	0x737a	; 0x737a <__addsf3>
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	48 ec       	ldi	r20, 0xC8	; 200
    3c08:	52 e4       	ldi	r21, 0x42	; 66
    3c0a:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    3c0e:	0e 94 13 3b 	call	0x7626	; 0x7626 <floor>
    3c12:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    3c16:	66 2e       	mov	r6, r22
    3c18:	77 2e       	mov	r7, r23
    3c1a:	86 2f       	mov	r24, r22
    3c1c:	97 2d       	mov	r25, r7
    3c1e:	ae 14       	cp	r10, r14
    3c20:	bf 04       	cpc	r11, r15
    3c22:	1c f4       	brge	.+6      	; 0x3c2a <Test_Battery+0x238>
    3c24:	e8 16       	cp	r14, r24
    3c26:	f9 06       	cpc	r15, r25
    3c28:	2c f0       	brlt	.+10     	; 0x3c34 <Test_Battery+0x242>
    3c2a:	80 91 a2 54 	lds	r24, 0x54A2	; 0x8054a2 <OverrideSafeties>
    3c2e:	88 23       	and	r24, r24
    3c30:	09 f4       	brne	.+2      	; 0x3c34 <Test_Battery+0x242>
    3c32:	b9 c1       	rjmp	.+882    	; 0x3fa6 <Test_Battery+0x5b4>
    3c34:	bf e7       	ldi	r27, 0x7F	; 127
    3c36:	e8 e3       	ldi	r30, 0x38	; 56
    3c38:	f1 e0       	ldi	r31, 0x01	; 1
    3c3a:	b1 50       	subi	r27, 0x01	; 1
    3c3c:	e0 40       	sbci	r30, 0x00	; 0
    3c3e:	f0 40       	sbci	r31, 0x00	; 0
    3c40:	e1 f7       	brne	.-8      	; 0x3c3a <Test_Battery+0x248>
    3c42:	00 c0       	rjmp	.+0      	; 0x3c44 <Test_Battery+0x252>
    3c44:	00 00       	nop
    3c46:	85 b3       	in	r24, 0x15	; 21
    3c48:	80 61       	ori	r24, 0x10	; 16
    3c4a:	85 bb       	out	0x15, r24	; 21
    3c4c:	2f ef       	ldi	r18, 0xFF	; 255
    3c4e:	80 e7       	ldi	r24, 0x70	; 112
    3c50:	92 e0       	ldi	r25, 0x02	; 2
    3c52:	21 50       	subi	r18, 0x01	; 1
    3c54:	80 40       	sbci	r24, 0x00	; 0
    3c56:	90 40       	sbci	r25, 0x00	; 0
    3c58:	e1 f7       	brne	.-8      	; 0x3c52 <Test_Battery+0x260>
    3c5a:	00 c0       	rjmp	.+0      	; 0x3c5c <Test_Battery+0x26a>
    3c5c:	00 00       	nop
    3c5e:	89 e0       	ldi	r24, 0x09	; 9
    3c60:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3c64:	d8 01       	movw	r26, r16
    3c66:	6d 91       	ld	r22, X+
    3c68:	7c 91       	ld	r23, X
    3c6a:	07 2e       	mov	r0, r23
    3c6c:	00 0c       	add	r0, r0
    3c6e:	88 0b       	sbc	r24, r24
    3c70:	99 0b       	sbc	r25, r25
    3c72:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	4a e7       	ldi	r20, 0x7A	; 122
    3c7c:	54 e4       	ldi	r21, 0x44	; 68
    3c7e:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    3c82:	4b 01       	movw	r8, r22
    3c84:	5c 01       	movw	r10, r24
    3c86:	89 e0       	ldi	r24, 0x09	; 9
    3c88:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3c8c:	96 95       	lsr	r25
    3c8e:	87 95       	ror	r24
    3c90:	96 95       	lsr	r25
    3c92:	87 95       	ror	r24
    3c94:	bc 01       	movw	r22, r24
    3c96:	80 e0       	ldi	r24, 0x00	; 0
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    3c9e:	a5 01       	movw	r20, r10
    3ca0:	94 01       	movw	r18, r8
    3ca2:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3ca6:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    3caa:	46 2e       	mov	r4, r22
    3cac:	57 2e       	mov	r5, r23
    3cae:	9b 01       	movw	r18, r22
    3cb0:	24 56       	subi	r18, 0x64	; 100
    3cb2:	31 09       	sbc	r19, r1
    3cb4:	2e 15       	cp	r18, r14
    3cb6:	3f 05       	cpc	r19, r15
    3cb8:	2c f4       	brge	.+10     	; 0x3cc4 <Test_Battery+0x2d2>
    3cba:	6c 59       	subi	r22, 0x9C	; 156
    3cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    3cbe:	e6 16       	cp	r14, r22
    3cc0:	f7 06       	cpc	r15, r23
    3cc2:	2c f0       	brlt	.+10     	; 0x3cce <Test_Battery+0x2dc>
    3cc4:	80 91 a2 54 	lds	r24, 0x54A2	; 0x8054a2 <OverrideSafeties>
    3cc8:	88 23       	and	r24, r24
    3cca:	09 f4       	brne	.+2      	; 0x3cce <Test_Battery+0x2dc>
    3ccc:	76 c1       	rjmp	.+748    	; 0x3fba <Test_Battery+0x5c8>
    3cce:	a8 95       	wdr
    3cd0:	85 b3       	in	r24, 0x15	; 21
    3cd2:	8f 7d       	andi	r24, 0xDF	; 223
    3cd4:	85 bb       	out	0x15, r24	; 21
    3cd6:	e7 eb       	ldi	r30, 0xB7	; 183
    3cd8:	fb e0       	ldi	r31, 0x0B	; 11
    3cda:	31 97       	sbiw	r30, 0x01	; 1
    3cdc:	f1 f7       	brne	.-4      	; 0x3cda <Test_Battery+0x2e8>
    3cde:	00 c0       	rjmp	.+0      	; 0x3ce0 <Test_Battery+0x2ee>
    3ce0:	00 00       	nop
    3ce2:	d8 01       	movw	r26, r16
    3ce4:	6d 91       	ld	r22, X+
    3ce6:	7c 91       	ld	r23, X
    3ce8:	07 2e       	mov	r0, r23
    3cea:	00 0c       	add	r0, r0
    3cec:	88 0b       	sbc	r24, r24
    3cee:	99 0b       	sbc	r25, r25
    3cf0:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	4a e7       	ldi	r20, 0x7A	; 122
    3cfa:	54 e4       	ldi	r21, 0x44	; 68
    3cfc:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    3d00:	4b 01       	movw	r8, r22
    3d02:	5c 01       	movw	r10, r24
    3d04:	89 e0       	ldi	r24, 0x09	; 9
    3d06:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3d0a:	96 95       	lsr	r25
    3d0c:	87 95       	ror	r24
    3d0e:	96 95       	lsr	r25
    3d10:	87 95       	ror	r24
    3d12:	bc 01       	movw	r22, r24
    3d14:	80 e0       	ldi	r24, 0x00	; 0
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    3d1c:	a5 01       	movw	r20, r10
    3d1e:	94 01       	movw	r18, r8
    3d20:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3d24:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    3d28:	4b 01       	movw	r8, r22
    3d2a:	64 36       	cpi	r22, 0x64	; 100
    3d2c:	71 05       	cpc	r23, r1
    3d2e:	2c f0       	brlt	.+10     	; 0x3d3a <Test_Battery+0x348>
    3d30:	80 91 a2 54 	lds	r24, 0x54A2	; 0x8054a2 <OverrideSafeties>
    3d34:	88 23       	and	r24, r24
    3d36:	09 f4       	brne	.+2      	; 0x3d3a <Test_Battery+0x348>
    3d38:	48 c1       	rjmp	.+656    	; 0x3fca <Test_Battery+0x5d8>
    3d3a:	eb ad       	ldd	r30, Y+59	; 0x3b
    3d3c:	fc ad       	ldd	r31, Y+60	; 0x3c
    3d3e:	60 81       	ld	r22, Z
    3d40:	71 81       	ldd	r23, Z+1	; 0x01
    3d42:	07 2e       	mov	r0, r23
    3d44:	00 0c       	add	r0, r0
    3d46:	88 0b       	sbc	r24, r24
    3d48:	99 0b       	sbc	r25, r25
    3d4a:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    3d4e:	20 e0       	ldi	r18, 0x00	; 0
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	4a e7       	ldi	r20, 0x7A	; 122
    3d54:	54 e4       	ldi	r21, 0x44	; 68
    3d56:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    3d5a:	6b 01       	movw	r12, r22
    3d5c:	7c 01       	movw	r14, r24
    3d5e:	88 e0       	ldi	r24, 0x08	; 8
    3d60:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3d64:	96 95       	lsr	r25
    3d66:	87 95       	ror	r24
    3d68:	96 95       	lsr	r25
    3d6a:	87 95       	ror	r24
    3d6c:	bc 01       	movw	r22, r24
    3d6e:	80 e0       	ldi	r24, 0x00	; 0
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    3d76:	a7 01       	movw	r20, r14
    3d78:	96 01       	movw	r18, r12
    3d7a:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3d7e:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    3d82:	25 96       	adiw	r28, 0x05	; 5
    3d84:	6c af       	std	Y+60, r22	; 0x3c
    3d86:	7d af       	std	Y+61, r23	; 0x3d
    3d88:	8e af       	std	Y+62, r24	; 0x3e
    3d8a:	9f af       	std	Y+63, r25	; 0x3f
    3d8c:	25 97       	sbiw	r28, 0x05	; 5
    3d8e:	85 b3       	in	r24, 0x15	; 21
    3d90:	80 62       	ori	r24, 0x20	; 32
    3d92:	85 bb       	out	0x15, r24	; 21
    3d94:	ff ef       	ldi	r31, 0xFF	; 255
    3d96:	24 e3       	ldi	r18, 0x34	; 52
    3d98:	8c e0       	ldi	r24, 0x0C	; 12
    3d9a:	f1 50       	subi	r31, 0x01	; 1
    3d9c:	20 40       	sbci	r18, 0x00	; 0
    3d9e:	80 40       	sbci	r24, 0x00	; 0
    3da0:	e1 f7       	brne	.-8      	; 0x3d9a <Test_Battery+0x3a8>
    3da2:	00 c0       	rjmp	.+0      	; 0x3da4 <Test_Battery+0x3b2>
    3da4:	00 00       	nop
    3da6:	a8 95       	wdr
    3da8:	85 b3       	in	r24, 0x15	; 21
    3daa:	8f 7d       	andi	r24, 0xDF	; 223
    3dac:	85 bb       	out	0x15, r24	; 21
    3dae:	9f ef       	ldi	r25, 0xFF	; 255
    3db0:	a0 e7       	ldi	r26, 0x70	; 112
    3db2:	b2 e0       	ldi	r27, 0x02	; 2
    3db4:	91 50       	subi	r25, 0x01	; 1
    3db6:	a0 40       	sbci	r26, 0x00	; 0
    3db8:	b0 40       	sbci	r27, 0x00	; 0
    3dba:	e1 f7       	brne	.-8      	; 0x3db4 <Test_Battery+0x3c2>
    3dbc:	00 c0       	rjmp	.+0      	; 0x3dbe <Test_Battery+0x3cc>
    3dbe:	00 00       	nop
    3dc0:	eb ad       	ldd	r30, Y+59	; 0x3b
    3dc2:	fc ad       	ldd	r31, Y+60	; 0x3c
    3dc4:	60 81       	ld	r22, Z
    3dc6:	71 81       	ldd	r23, Z+1	; 0x01
    3dc8:	07 2e       	mov	r0, r23
    3dca:	00 0c       	add	r0, r0
    3dcc:	88 0b       	sbc	r24, r24
    3dce:	99 0b       	sbc	r25, r25
    3dd0:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	4a e7       	ldi	r20, 0x7A	; 122
    3dda:	54 e4       	ldi	r21, 0x44	; 68
    3ddc:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    3de0:	6b 01       	movw	r12, r22
    3de2:	7c 01       	movw	r14, r24
    3de4:	88 e0       	ldi	r24, 0x08	; 8
    3de6:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3dea:	96 95       	lsr	r25
    3dec:	87 95       	ror	r24
    3dee:	96 95       	lsr	r25
    3df0:	87 95       	ror	r24
    3df2:	bc 01       	movw	r22, r24
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    3dfc:	a7 01       	movw	r20, r14
    3dfe:	96 01       	movw	r18, r12
    3e00:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3e04:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    3e08:	6f ab       	std	Y+55, r22	; 0x37
    3e0a:	78 af       	std	Y+56, r23	; 0x38
    3e0c:	89 af       	std	Y+57, r24	; 0x39
    3e0e:	9a af       	std	Y+58, r25	; 0x3a
    3e10:	bf a8       	ldd	r11, Y+55	; 0x37
    3e12:	a8 ac       	ldd	r10, Y+56	; 0x38
    3e14:	85 b3       	in	r24, 0x15	; 21
    3e16:	80 62       	ori	r24, 0x20	; 32
    3e18:	85 bb       	out	0x15, r24	; 21
    3e1a:	ff e7       	ldi	r31, 0x7F	; 127
    3e1c:	2a e1       	ldi	r18, 0x1A	; 26
    3e1e:	86 e0       	ldi	r24, 0x06	; 6
    3e20:	f1 50       	subi	r31, 0x01	; 1
    3e22:	20 40       	sbci	r18, 0x00	; 0
    3e24:	80 40       	sbci	r24, 0x00	; 0
    3e26:	e1 f7       	brne	.-8      	; 0x3e20 <Test_Battery+0x42e>
    3e28:	00 c0       	rjmp	.+0      	; 0x3e2a <Test_Battery+0x438>
    3e2a:	00 00       	nop
    3e2c:	a8 95       	wdr
    3e2e:	d8 01       	movw	r26, r16
    3e30:	6d 91       	ld	r22, X+
    3e32:	7c 91       	ld	r23, X
    3e34:	07 2e       	mov	r0, r23
    3e36:	00 0c       	add	r0, r0
    3e38:	88 0b       	sbc	r24, r24
    3e3a:	99 0b       	sbc	r25, r25
    3e3c:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	4a e7       	ldi	r20, 0x7A	; 122
    3e46:	54 e4       	ldi	r21, 0x44	; 68
    3e48:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    3e4c:	6b 01       	movw	r12, r22
    3e4e:	7c 01       	movw	r14, r24
    3e50:	89 e0       	ldi	r24, 0x09	; 9
    3e52:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3e56:	96 95       	lsr	r25
    3e58:	87 95       	ror	r24
    3e5a:	96 95       	lsr	r25
    3e5c:	87 95       	ror	r24
    3e5e:	bc 01       	movw	r22, r24
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    3e68:	a7 01       	movw	r20, r14
    3e6a:	96 01       	movw	r18, r12
    3e6c:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3e70:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    3e74:	46 2e       	mov	r4, r22
    3e76:	57 2e       	mov	r5, r23
    3e78:	eb ad       	ldd	r30, Y+59	; 0x3b
    3e7a:	fc ad       	ldd	r31, Y+60	; 0x3c
    3e7c:	60 81       	ld	r22, Z
    3e7e:	71 81       	ldd	r23, Z+1	; 0x01
    3e80:	07 2e       	mov	r0, r23
    3e82:	00 0c       	add	r0, r0
    3e84:	88 0b       	sbc	r24, r24
    3e86:	99 0b       	sbc	r25, r25
    3e88:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	4a e7       	ldi	r20, 0x7A	; 122
    3e92:	54 e4       	ldi	r21, 0x44	; 68
    3e94:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    3e98:	6b 01       	movw	r12, r22
    3e9a:	7c 01       	movw	r14, r24
    3e9c:	88 e0       	ldi	r24, 0x08	; 8
    3e9e:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3ea2:	96 95       	lsr	r25
    3ea4:	87 95       	ror	r24
    3ea6:	96 95       	lsr	r25
    3ea8:	87 95       	ror	r24
    3eaa:	bc 01       	movw	r22, r24
    3eac:	80 e0       	ldi	r24, 0x00	; 0
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    3eb4:	a7 01       	movw	r20, r14
    3eb6:	96 01       	movw	r18, r12
    3eb8:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3ebc:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    3ec0:	6b af       	std	Y+59, r22	; 0x3b
    3ec2:	7c af       	std	Y+60, r23	; 0x3c
    3ec4:	8d af       	std	Y+61, r24	; 0x3d
    3ec6:	9e af       	std	Y+62, r25	; 0x3e
    3ec8:	85 b3       	in	r24, 0x15	; 21
    3eca:	8f 7e       	andi	r24, 0xEF	; 239
    3ecc:	85 bb       	out	0x15, r24	; 21
    3ece:	89 b1       	in	r24, 0x09	; 9
    3ed0:	80 61       	ori	r24, 0x10	; 16
    3ed2:	89 b9       	out	0x09, r24	; 9
    3ed4:	8f e4       	ldi	r24, 0x4F	; 79
    3ed6:	93 ec       	ldi	r25, 0xC3	; 195
    3ed8:	01 97       	sbiw	r24, 0x01	; 1
    3eda:	f1 f7       	brne	.-4      	; 0x3ed8 <Test_Battery+0x4e6>
    3edc:	00 c0       	rjmp	.+0      	; 0x3ede <Test_Battery+0x4ec>
    3ede:	00 00       	nop
    3ee0:	89 b1       	in	r24, 0x09	; 9
    3ee2:	8f 7e       	andi	r24, 0xEF	; 239
    3ee4:	89 b9       	out	0x09, r24	; 9
    3ee6:	d8 01       	movw	r26, r16
    3ee8:	6d 91       	ld	r22, X+
    3eea:	7c 91       	ld	r23, X
    3eec:	07 2e       	mov	r0, r23
    3eee:	00 0c       	add	r0, r0
    3ef0:	88 0b       	sbc	r24, r24
    3ef2:	99 0b       	sbc	r25, r25
    3ef4:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    3ef8:	20 e0       	ldi	r18, 0x00	; 0
    3efa:	30 e0       	ldi	r19, 0x00	; 0
    3efc:	4a e7       	ldi	r20, 0x7A	; 122
    3efe:	54 e4       	ldi	r21, 0x44	; 68
    3f00:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    3f04:	6b 01       	movw	r12, r22
    3f06:	7c 01       	movw	r14, r24
    3f08:	89 e0       	ldi	r24, 0x09	; 9
    3f0a:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    3f0e:	96 95       	lsr	r25
    3f10:	87 95       	ror	r24
    3f12:	96 95       	lsr	r25
    3f14:	87 95       	ror	r24
    3f16:	bc 01       	movw	r22, r24
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    3f20:	a7 01       	movw	r20, r14
    3f22:	96 01       	movw	r18, r12
    3f24:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    3f28:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    3f2c:	c6 2e       	mov	r12, r22
    3f2e:	d7 2e       	mov	r13, r23
    3f30:	20 91 4e 48 	lds	r18, 0x484E	; 0x80484e <SYBTcount>
    3f34:	30 91 4f 48 	lds	r19, 0x484F	; 0x80484f <SYBTcount+0x1>
    3f38:	8a e1       	ldi	r24, 0x1A	; 26
    3f3a:	82 9f       	mul	r24, r18
    3f3c:	f0 01       	movw	r30, r0
    3f3e:	83 9f       	mul	r24, r19
    3f40:	f0 0d       	add	r31, r0
    3f42:	11 24       	eor	r1, r1
    3f44:	ef 59       	subi	r30, 0x9F	; 159
    3f46:	f7 4b       	sbci	r31, 0xB7	; 183
    3f48:	8b a9       	ldd	r24, Y+51	; 0x33
    3f4a:	9c a9       	ldd	r25, Y+52	; 0x34
    3f4c:	80 83       	st	Z, r24
    3f4e:	91 83       	std	Z+1, r25	; 0x01
    3f50:	ab ad       	ldd	r26, Y+59	; 0x3b
    3f52:	bc ad       	ldd	r27, Y+60	; 0x3c
    3f54:	a2 83       	std	Z+2, r26	; 0x02
    3f56:	b3 83       	std	Z+3, r27	; 0x03
    3f58:	23 96       	adiw	r28, 0x03	; 3
    3f5a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f5c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f5e:	23 97       	sbiw	r28, 0x03	; 3
    3f60:	84 83       	std	Z+4, r24	; 0x04
    3f62:	95 83       	std	Z+5, r25	; 0x05
    3f64:	af a9       	ldd	r26, Y+55	; 0x37
    3f66:	b8 ad       	ldd	r27, Y+56	; 0x38
    3f68:	a6 83       	std	Z+6, r26	; 0x06
    3f6a:	b7 83       	std	Z+7, r27	; 0x07
    3f6c:	4b a9       	ldd	r20, Y+51	; 0x33
    3f6e:	5c a9       	ldd	r21, Y+52	; 0x34
    3f70:	4a 1b       	sub	r20, r26
    3f72:	5b 0b       	sbc	r21, r27
    3f74:	ca 01       	movw	r24, r20
    3f76:	99 23       	and	r25, r25
    3f78:	24 f4       	brge	.+8      	; 0x3f82 <Test_Battery+0x590>
    3f7a:	88 27       	eor	r24, r24
    3f7c:	99 27       	eor	r25, r25
    3f7e:	84 1b       	sub	r24, r20
    3f80:	95 0b       	sbc	r25, r21
    3f82:	80 93 4f 53 	sts	0x534F, r24	; 0x80534f <SYBT+0x8>
    3f86:	90 93 50 53 	sts	0x5350, r25	; 0x805350 <SYBT+0x9>
    3f8a:	4a e1       	ldi	r20, 0x1A	; 26
    3f8c:	42 9f       	mul	r20, r18
    3f8e:	f0 01       	movw	r30, r0
    3f90:	43 9f       	mul	r20, r19
    3f92:	f0 0d       	add	r31, r0
    3f94:	11 24       	eor	r1, r1
    3f96:	ef 59       	subi	r30, 0x9F	; 159
    3f98:	f7 4b       	sbci	r31, 0xB7	; 183
    3f9a:	80 87       	std	Z+8, r24	; 0x08
    3f9c:	91 87       	std	Z+9, r25	; 0x09
    3f9e:	91 e0       	ldi	r25, 0x01	; 1
    3fa0:	21 e0       	ldi	r18, 0x01	; 1
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	17 c0       	rjmp	.+46     	; 0x3fd4 <Test_Battery+0x5e2>
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	81 2c       	mov	r8, r1
    3fae:	91 2c       	mov	r9, r1
    3fb0:	41 2c       	mov	r4, r1
    3fb2:	51 2c       	mov	r5, r1
    3fb4:	b1 2c       	mov	r11, r1
    3fb6:	a1 2c       	mov	r10, r1
    3fb8:	0d c0       	rjmp	.+26     	; 0x3fd4 <Test_Battery+0x5e2>
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	21 e0       	ldi	r18, 0x01	; 1
    3fbe:	80 e0       	ldi	r24, 0x00	; 0
    3fc0:	81 2c       	mov	r8, r1
    3fc2:	91 2c       	mov	r9, r1
    3fc4:	b1 2c       	mov	r11, r1
    3fc6:	a1 2c       	mov	r10, r1
    3fc8:	05 c0       	rjmp	.+10     	; 0x3fd4 <Test_Battery+0x5e2>
    3fca:	91 e0       	ldi	r25, 0x01	; 1
    3fcc:	21 e0       	ldi	r18, 0x01	; 1
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	b1 2c       	mov	r11, r1
    3fd2:	a1 2c       	mov	r10, r1
    3fd4:	88 23       	and	r24, r24
    3fd6:	11 f0       	breq	.+4      	; 0x3fdc <Test_Battery+0x5ea>
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	01 c0       	rjmp	.+2      	; 0x3fde <Test_Battery+0x5ec>
    3fdc:	88 e0       	ldi	r24, 0x08	; 8
    3fde:	22 23       	and	r18, r18
    3fe0:	11 f0       	breq	.+4      	; 0x3fe6 <Test_Battery+0x5f4>
    3fe2:	82 60       	ori	r24, 0x02	; 2
    3fe4:	01 c0       	rjmp	.+2      	; 0x3fe8 <Test_Battery+0x5f6>
    3fe6:	80 61       	ori	r24, 0x10	; 16
    3fe8:	99 23       	and	r25, r25
    3fea:	19 f0       	breq	.+6      	; 0x3ff2 <Test_Battery+0x600>
    3fec:	84 60       	ori	r24, 0x04	; 4
    3fee:	f8 2e       	mov	r15, r24
    3ff0:	02 c0       	rjmp	.+4      	; 0x3ff6 <Test_Battery+0x604>
    3ff2:	80 62       	ori	r24, 0x20	; 32
    3ff4:	f8 2e       	mov	r15, r24
    3ff6:	0f 2d       	mov	r16, r15
    3ff8:	10 e0       	ldi	r17, 0x00	; 0
    3ffa:	e7 e4       	ldi	r30, 0x47	; 71
    3ffc:	f3 e5       	ldi	r31, 0x53	; 83
    3ffe:	81 85       	ldd	r24, Z+9	; 0x09
    4000:	8f 93       	push	r24
    4002:	80 85       	ldd	r24, Z+8	; 0x08
    4004:	8f 93       	push	r24
    4006:	9f 92       	push	r9
    4008:	8f 92       	push	r8
    400a:	5f 92       	push	r5
    400c:	4f 92       	push	r4
    400e:	df 92       	push	r13
    4010:	cf 92       	push	r12
    4012:	af 92       	push	r10
    4014:	bf 92       	push	r11
    4016:	7f 92       	push	r7
    4018:	6f 92       	push	r6
    401a:	21 96       	adiw	r28, 0x01	; 1
    401c:	ff ad       	ldd	r31, Y+63	; 0x3f
    401e:	21 97       	sbiw	r28, 0x01	; 1
    4020:	ff 93       	push	r31
    4022:	2f ad       	ldd	r18, Y+63	; 0x3f
    4024:	2f 93       	push	r18
    4026:	8c a9       	ldd	r24, Y+52	; 0x34
    4028:	8f 93       	push	r24
    402a:	9b a9       	ldd	r25, Y+51	; 0x33
    402c:	9f 93       	push	r25
    402e:	1f 92       	push	r1
    4030:	ff 92       	push	r15
    4032:	8f e7       	ldi	r24, 0x7F	; 127
    4034:	93 e4       	ldi	r25, 0x43	; 67
    4036:	9f 93       	push	r25
    4038:	8f 93       	push	r24
    403a:	de 01       	movw	r26, r28
    403c:	11 96       	adiw	r26, 0x01	; 1
    403e:	6d 01       	movw	r12, r26
    4040:	bf 93       	push	r27
    4042:	af 93       	push	r26
    4044:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    4048:	c6 01       	movw	r24, r12
    404a:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
    404e:	f1 01       	movw	r30, r2
    4050:	00 83       	st	Z, r16
    4052:	11 83       	std	Z+1, r17	; 0x01
    4054:	81 b1       	in	r24, 0x01	; 1
    4056:	8f 7e       	andi	r24, 0xEF	; 239
    4058:	81 b9       	out	0x01, r24	; 1
    405a:	cd bf       	out	0x3d, r28	; 61
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	97 e0       	ldi	r25, 0x07	; 7
    4060:	f9 12       	cpse	r15, r25
    4062:	02 c0       	rjmp	.+4      	; 0x4068 <__DATA_REGION_LENGTH__+0x68>
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	01 c0       	rjmp	.+2      	; 0x406a <__DATA_REGION_LENGTH__+0x6a>
    4068:	80 e0       	ldi	r24, 0x00	; 0
    406a:	cc 5b       	subi	r28, 0xBC	; 188
    406c:	df 4f       	sbci	r29, 0xFF	; 255
    406e:	cd bf       	out	0x3d, r28	; 61
    4070:	de bf       	out	0x3e, r29	; 62
    4072:	df 91       	pop	r29
    4074:	cf 91       	pop	r28
    4076:	1f 91       	pop	r17
    4078:	0f 91       	pop	r16
    407a:	ff 90       	pop	r15
    407c:	ef 90       	pop	r14
    407e:	df 90       	pop	r13
    4080:	cf 90       	pop	r12
    4082:	bf 90       	pop	r11
    4084:	af 90       	pop	r10
    4086:	9f 90       	pop	r9
    4088:	8f 90       	pop	r8
    408a:	7f 90       	pop	r7
    408c:	6f 90       	pop	r6
    408e:	5f 90       	pop	r5
    4090:	4f 90       	pop	r4
    4092:	3f 90       	pop	r3
    4094:	2f 90       	pop	r2
    4096:	08 95       	ret

00004098 <Gather_Battery_Data>:
    4098:	2f 92       	push	r2
    409a:	3f 92       	push	r3
    409c:	4f 92       	push	r4
    409e:	5f 92       	push	r5
    40a0:	6f 92       	push	r6
    40a2:	7f 92       	push	r7
    40a4:	8f 92       	push	r8
    40a6:	9f 92       	push	r9
    40a8:	af 92       	push	r10
    40aa:	bf 92       	push	r11
    40ac:	cf 92       	push	r12
    40ae:	df 92       	push	r13
    40b0:	ef 92       	push	r14
    40b2:	ff 92       	push	r15
    40b4:	0f 93       	push	r16
    40b6:	1f 93       	push	r17
    40b8:	cf 93       	push	r28
    40ba:	df 93       	push	r29
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
    40c0:	c5 58       	subi	r28, 0x85	; 133
    40c2:	d1 09       	sbc	r29, r1
    40c4:	cd bf       	out	0x3d, r28	; 61
    40c6:	de bf       	out	0x3e, r29	; 62
    40c8:	cd 57       	subi	r28, 0x7D	; 125
    40ca:	df 4f       	sbci	r29, 0xFF	; 255
    40cc:	88 83       	st	Y, r24
    40ce:	c3 58       	subi	r28, 0x83	; 131
    40d0:	d0 40       	sbci	r29, 0x00	; 0
    40d2:	79 2e       	mov	r7, r25
    40d4:	cc 57       	subi	r28, 0x7C	; 124
    40d6:	df 4f       	sbci	r29, 0xFF	; 255
    40d8:	68 83       	st	Y, r22
    40da:	c4 58       	subi	r28, 0x84	; 132
    40dc:	d0 40       	sbci	r29, 0x00	; 0
    40de:	cb 57       	subi	r28, 0x7B	; 123
    40e0:	df 4f       	sbci	r29, 0xFF	; 255
    40e2:	78 83       	st	Y, r23
    40e4:	c5 58       	subi	r28, 0x85	; 133
    40e6:	d0 40       	sbci	r29, 0x00	; 0
    40e8:	62 2e       	mov	r6, r18
    40ea:	3a 2c       	mov	r3, r10
    40ec:	2b 2c       	mov	r2, r11
    40ee:	fe 01       	movw	r30, r28
    40f0:	31 96       	adiw	r30, 0x01	; 1
    40f2:	84 e6       	ldi	r24, 0x64	; 100
    40f4:	df 01       	movw	r26, r30
    40f6:	1d 92       	st	X+, r1
    40f8:	8a 95       	dec	r24
    40fa:	e9 f7       	brne	.-6      	; 0x40f6 <Gather_Battery_Data+0x5e>
    40fc:	80 91 4d 48 	lds	r24, 0x484D	; 0x80484d <TypeOfBatteryConnected>
    4100:	83 30       	cpi	r24, 0x03	; 3
    4102:	59 f4       	brne	.+22     	; 0x411a <Gather_Battery_Data+0x82>
    4104:	8f e0       	ldi	r24, 0x0F	; 15
    4106:	e0 eb       	ldi	r30, 0xB0	; 176
    4108:	f3 e4       	ldi	r31, 0x43	; 67
    410a:	de 01       	movw	r26, r28
    410c:	ab 59       	subi	r26, 0x9B	; 155
    410e:	bf 4f       	sbci	r27, 0xFF	; 255
    4110:	01 90       	ld	r0, Z+
    4112:	0d 92       	st	X+, r0
    4114:	8a 95       	dec	r24
    4116:	e1 f7       	brne	.-8      	; 0x4110 <Gather_Battery_Data+0x78>
    4118:	0a c0       	rjmp	.+20     	; 0x412e <Gather_Battery_Data+0x96>
    411a:	8e e0       	ldi	r24, 0x0E	; 14
    411c:	ef eb       	ldi	r30, 0xBF	; 191
    411e:	f3 e4       	ldi	r31, 0x43	; 67
    4120:	de 01       	movw	r26, r28
    4122:	ab 59       	subi	r26, 0x9B	; 155
    4124:	bf 4f       	sbci	r27, 0xFF	; 255
    4126:	01 90       	ld	r0, Z+
    4128:	0d 92       	st	X+, r0
    412a:	8a 95       	dec	r24
    412c:	e1 f7       	brne	.-8      	; 0x4126 <Gather_Battery_Data+0x8e>
    412e:	60 91 2f 53 	lds	r22, 0x532F	; 0x80532f <cal+0x82>
    4132:	70 91 30 53 	lds	r23, 0x5330	; 0x805330 <cal+0x83>
    4136:	80 91 31 53 	lds	r24, 0x5331	; 0x805331 <cal+0x84>
    413a:	90 91 32 53 	lds	r25, 0x5332	; 0x805332 <cal+0x85>
    413e:	0f 2e       	mov	r0, r31
    4140:	f0 e1       	ldi	r31, 0x10	; 16
    4142:	8f 2e       	mov	r8, r31
    4144:	f7 e2       	ldi	r31, 0x27	; 39
    4146:	9f 2e       	mov	r9, r31
    4148:	a1 2c       	mov	r10, r1
    414a:	b1 2c       	mov	r11, r1
    414c:	f0 2d       	mov	r31, r0
    414e:	a5 01       	movw	r20, r10
    4150:	94 01       	movw	r18, r8
    4152:	0e 94 dd 3c 	call	0x79ba	; 0x79ba <__udivmodsi4>
    4156:	42 2e       	mov	r4, r18
    4158:	60 91 2b 53 	lds	r22, 0x532B	; 0x80532b <cal+0x7e>
    415c:	70 91 2c 53 	lds	r23, 0x532C	; 0x80532c <cal+0x7f>
    4160:	80 91 2d 53 	lds	r24, 0x532D	; 0x80532d <cal+0x80>
    4164:	90 91 2e 53 	lds	r25, 0x532E	; 0x80532e <cal+0x81>
    4168:	a5 01       	movw	r20, r10
    416a:	94 01       	movw	r18, r8
    416c:	0e 94 dd 3c 	call	0x79ba	; 0x79ba <__udivmodsi4>
    4170:	52 2e       	mov	r5, r18
    4172:	60 91 27 53 	lds	r22, 0x5327	; 0x805327 <cal+0x7a>
    4176:	70 91 28 53 	lds	r23, 0x5328	; 0x805328 <cal+0x7b>
    417a:	80 91 29 53 	lds	r24, 0x5329	; 0x805329 <cal+0x7c>
    417e:	90 91 2a 53 	lds	r25, 0x532A	; 0x80532a <cal+0x7d>
    4182:	a5 01       	movw	r20, r10
    4184:	94 01       	movw	r18, r8
    4186:	0e 94 dd 3c 	call	0x79ba	; 0x79ba <__udivmodsi4>
    418a:	60 91 55 53 	lds	r22, 0x5355	; 0x805355 <SYBT+0xe>
    418e:	70 91 56 53 	lds	r23, 0x5356	; 0x805356 <SYBT+0xf>
    4192:	80 91 57 53 	lds	r24, 0x5357	; 0x805357 <SYBT+0x10>
    4196:	90 91 58 53 	lds	r25, 0x5358	; 0x805358 <SYBT+0x11>
    419a:	df 92       	push	r13
    419c:	cf 92       	push	r12
    419e:	2f 92       	push	r2
    41a0:	3f 92       	push	r3
    41a2:	0f 2e       	mov	r0, r31
    41a4:	f1 e6       	ldi	r31, 0x61	; 97
    41a6:	cf 2e       	mov	r12, r31
    41a8:	f8 e4       	ldi	r31, 0x48	; 72
    41aa:	df 2e       	mov	r13, r31
    41ac:	f0 2d       	mov	r31, r0
    41ae:	f6 01       	movw	r30, r12
    41b0:	33 8d       	ldd	r19, Z+27	; 0x1b
    41b2:	3f 93       	push	r19
    41b4:	32 8d       	ldd	r19, Z+26	; 0x1a
    41b6:	3f 93       	push	r19
    41b8:	1f 93       	push	r17
    41ba:	0f 93       	push	r16
    41bc:	ff 92       	push	r15
    41be:	ef 92       	push	r14
    41c0:	1f 92       	push	r1
    41c2:	4f 92       	push	r4
    41c4:	1f 92       	push	r1
    41c6:	5f 92       	push	r5
    41c8:	1f 92       	push	r1
    41ca:	2f 93       	push	r18
    41cc:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    41d0:	7f 93       	push	r23
    41d2:	6f 93       	push	r22
    41d4:	ce 01       	movw	r24, r28
    41d6:	8b 59       	subi	r24, 0x9B	; 155
    41d8:	9f 4f       	sbci	r25, 0xFF	; 255
    41da:	9f 93       	push	r25
    41dc:	8f 93       	push	r24
    41de:	8d ec       	ldi	r24, 0xCD	; 205
    41e0:	93 e4       	ldi	r25, 0x43	; 67
    41e2:	9f 93       	push	r25
    41e4:	8f 93       	push	r24
    41e6:	ce 01       	movw	r24, r28
    41e8:	01 96       	adiw	r24, 0x01	; 1
    41ea:	9f 93       	push	r25
    41ec:	8f 93       	push	r24
    41ee:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    41f2:	d6 01       	movw	r26, r12
    41f4:	94 96       	adiw	r26, 0x24	; 36
    41f6:	8d 91       	ld	r24, X+
    41f8:	9c 91       	ld	r25, X
    41fa:	95 97       	sbiw	r26, 0x25	; 37
    41fc:	cd bf       	out	0x3d, r28	; 61
    41fe:	de bf       	out	0x3e, r29	; 62
    4200:	88 3b       	cpi	r24, 0xB8	; 184
    4202:	fb e0       	ldi	r31, 0x0B	; 11
    4204:	9f 07       	cpc	r25, r31
    4206:	84 f5       	brge	.+96     	; 0x4268 <Gather_Battery_Data+0x1d0>
    4208:	9f 93       	push	r25
    420a:	8f 93       	push	r24
    420c:	8c ee       	ldi	r24, 0xEC	; 236
    420e:	93 e4       	ldi	r25, 0x43	; 67
    4210:	9f 93       	push	r25
    4212:	8f 93       	push	r24
    4214:	ce 01       	movw	r24, r28
    4216:	8b 59       	subi	r24, 0x9B	; 155
    4218:	9f 4f       	sbci	r25, 0xFF	; 255
    421a:	9f 93       	push	r25
    421c:	8f 93       	push	r24
    421e:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    4222:	80 91 85 48 	lds	r24, 0x4885	; 0x804885 <array_SYBT+0x24>
    4226:	90 91 86 48 	lds	r25, 0x4886	; 0x804886 <array_SYBT+0x25>
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	0f 90       	pop	r0
    4232:	0f 90       	pop	r0
    4234:	0f 90       	pop	r0
    4236:	87 3b       	cpi	r24, 0xB7	; 183
    4238:	9b 40       	sbci	r25, 0x0B	; 11
    423a:	71 f4       	brne	.+28     	; 0x4258 <Gather_Battery_Data+0x1c0>
    423c:	de 01       	movw	r26, r28
    423e:	11 96       	adiw	r26, 0x01	; 1
    4240:	0d 90       	ld	r0, X+
    4242:	00 20       	and	r0, r0
    4244:	e9 f7       	brne	.-6      	; 0x4240 <Gather_Battery_Data+0x1a8>
    4246:	11 97       	sbiw	r26, 0x01	; 1
    4248:	86 e0       	ldi	r24, 0x06	; 6
    424a:	e0 ef       	ldi	r30, 0xF0	; 240
    424c:	f3 e4       	ldi	r31, 0x43	; 67
    424e:	01 90       	ld	r0, Z+
    4250:	0d 92       	st	X+, r0
    4252:	8a 95       	dec	r24
    4254:	e1 f7       	brne	.-8      	; 0x424e <Gather_Battery_Data+0x1b6>
    4256:	15 c0       	rjmp	.+42     	; 0x4282 <Gather_Battery_Data+0x1ea>
    4258:	be 01       	movw	r22, r28
    425a:	6b 59       	subi	r22, 0x9B	; 155
    425c:	7f 4f       	sbci	r23, 0xFF	; 255
    425e:	ce 01       	movw	r24, r28
    4260:	01 96       	adiw	r24, 0x01	; 1
    4262:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <strcat>
    4266:	0d c0       	rjmp	.+26     	; 0x4282 <Gather_Battery_Data+0x1ea>
    4268:	de 01       	movw	r26, r28
    426a:	11 96       	adiw	r26, 0x01	; 1
    426c:	0d 90       	ld	r0, X+
    426e:	00 20       	and	r0, r0
    4270:	e9 f7       	brne	.-6      	; 0x426c <Gather_Battery_Data+0x1d4>
    4272:	11 97       	sbiw	r26, 0x01	; 1
    4274:	86 e0       	ldi	r24, 0x06	; 6
    4276:	e6 ef       	ldi	r30, 0xF6	; 246
    4278:	f3 e4       	ldi	r31, 0x43	; 67
    427a:	01 90       	ld	r0, Z+
    427c:	0d 92       	st	X+, r0
    427e:	8a 95       	dec	r24
    4280:	e1 f7       	brne	.-8      	; 0x427a <Gather_Battery_Data+0x1e2>
    4282:	80 91 05 53 	lds	r24, 0x5305	; 0x805305 <cal+0x58>
    4286:	81 ff       	sbrs	r24, 1
    4288:	08 c0       	rjmp	.+16     	; 0x429a <Gather_Battery_Data+0x202>
    428a:	80 91 8f 48 	lds	r24, 0x488F	; 0x80488f <array_SYBT+0x2e>
    428e:	90 91 90 48 	lds	r25, 0x4890	; 0x804890 <array_SYBT+0x2f>
    4292:	87 3e       	cpi	r24, 0xE7	; 231
    4294:	93 40       	sbci	r25, 0x03	; 3
    4296:	09 f0       	breq	.+2      	; 0x429a <Gather_Battery_Data+0x202>
    4298:	20 c1       	rjmp	.+576    	; 0x44da <Gather_Battery_Data+0x442>
    429a:	80 91 8f 48 	lds	r24, 0x488F	; 0x80488f <array_SYBT+0x2e>
    429e:	90 91 90 48 	lds	r25, 0x4890	; 0x804890 <array_SYBT+0x2f>
    42a2:	81 15       	cp	r24, r1
    42a4:	a1 e0       	ldi	r26, 0x01	; 1
    42a6:	9a 07       	cpc	r25, r26
    42a8:	09 f4       	brne	.+2      	; 0x42ac <Gather_Battery_Data+0x214>
    42aa:	55 c0       	rjmp	.+170    	; 0x4356 <Gather_Battery_Data+0x2be>
    42ac:	7c f4       	brge	.+30     	; 0x42cc <Gather_Battery_Data+0x234>
    42ae:	82 34       	cpi	r24, 0x42	; 66
    42b0:	91 05       	cpc	r25, r1
    42b2:	09 f1       	breq	.+66     	; 0x42f6 <Gather_Battery_Data+0x25e>
    42b4:	24 f4       	brge	.+8      	; 0x42be <Gather_Battery_Data+0x226>
    42b6:	89 2b       	or	r24, r25
    42b8:	09 f4       	brne	.+2      	; 0x42bc <Gather_Battery_Data+0x224>
    42ba:	8d c0       	rjmp	.+282    	; 0x43d6 <Gather_Battery_Data+0x33e>
    42bc:	ac c0       	rjmp	.+344    	; 0x4416 <Gather_Battery_Data+0x37e>
    42be:	84 36       	cpi	r24, 0x64	; 100
    42c0:	91 05       	cpc	r25, r1
    42c2:	49 f1       	breq	.+82     	; 0x4316 <Gather_Battery_Data+0x27e>
    42c4:	88 3c       	cpi	r24, 0xC8	; 200
    42c6:	91 05       	cpc	r25, r1
    42c8:	b1 f1       	breq	.+108    	; 0x4336 <Gather_Battery_Data+0x29e>
    42ca:	a5 c0       	rjmp	.+330    	; 0x4416 <Gather_Battery_Data+0x37e>
    42cc:	82 35       	cpi	r24, 0x52	; 82
    42ce:	e3 e0       	ldi	r30, 0x03	; 3
    42d0:	9e 07       	cpc	r25, r30
    42d2:	09 f4       	brne	.+2      	; 0x42d6 <Gather_Battery_Data+0x23e>
    42d4:	60 c0       	rjmp	.+192    	; 0x4396 <Gather_Battery_Data+0x2fe>
    42d6:	2c f4       	brge	.+10     	; 0x42e2 <Gather_Battery_Data+0x24a>
    42d8:	82 3b       	cpi	r24, 0xB2	; 178
    42da:	92 40       	sbci	r25, 0x02	; 2
    42dc:	09 f4       	brne	.+2      	; 0x42e0 <Gather_Battery_Data+0x248>
    42de:	4b c0       	rjmp	.+150    	; 0x4376 <Gather_Battery_Data+0x2de>
    42e0:	9a c0       	rjmp	.+308    	; 0x4416 <Gather_Battery_Data+0x37e>
    42e2:	87 3e       	cpi	r24, 0xE7	; 231
    42e4:	33 e0       	ldi	r19, 0x03	; 3
    42e6:	93 07       	cpc	r25, r19
    42e8:	09 f4       	brne	.+2      	; 0x42ec <Gather_Battery_Data+0x254>
    42ea:	65 c0       	rjmp	.+202    	; 0x43b6 <Gather_Battery_Data+0x31e>
    42ec:	88 3e       	cpi	r24, 0xE8	; 232
    42ee:	93 40       	sbci	r25, 0x03	; 3
    42f0:	09 f4       	brne	.+2      	; 0x42f4 <Gather_Battery_Data+0x25c>
    42f2:	81 c0       	rjmp	.+258    	; 0x43f6 <Gather_Battery_Data+0x35e>
    42f4:	90 c0       	rjmp	.+288    	; 0x4416 <Gather_Battery_Data+0x37e>
    42f6:	de 01       	movw	r26, r28
    42f8:	11 96       	adiw	r26, 0x01	; 1
    42fa:	0d 90       	ld	r0, X+
    42fc:	00 20       	and	r0, r0
    42fe:	e9 f7       	brne	.-6      	; 0x42fa <Gather_Battery_Data+0x262>
    4300:	11 97       	sbiw	r26, 0x01	; 1
    4302:	85 e0       	ldi	r24, 0x05	; 5
    4304:	ec ef       	ldi	r30, 0xFC	; 252
    4306:	f3 e4       	ldi	r31, 0x43	; 67
    4308:	01 90       	ld	r0, Z+
    430a:	0d 92       	st	X+, r0
    430c:	8a 95       	dec	r24
    430e:	e1 f7       	brne	.-8      	; 0x4308 <Gather_Battery_Data+0x270>
    4310:	08 e0       	ldi	r16, 0x08	; 8
    4312:	10 e0       	ldi	r17, 0x00	; 0
    4314:	82 c0       	rjmp	.+260    	; 0x441a <Gather_Battery_Data+0x382>
    4316:	de 01       	movw	r26, r28
    4318:	11 96       	adiw	r26, 0x01	; 1
    431a:	0d 90       	ld	r0, X+
    431c:	00 20       	and	r0, r0
    431e:	e9 f7       	brne	.-6      	; 0x431a <Gather_Battery_Data+0x282>
    4320:	11 97       	sbiw	r26, 0x01	; 1
    4322:	85 e0       	ldi	r24, 0x05	; 5
    4324:	e1 e0       	ldi	r30, 0x01	; 1
    4326:	f4 e4       	ldi	r31, 0x44	; 68
    4328:	01 90       	ld	r0, Z+
    432a:	0d 92       	st	X+, r0
    432c:	8a 95       	dec	r24
    432e:	e1 f7       	brne	.-8      	; 0x4328 <Gather_Battery_Data+0x290>
    4330:	08 e0       	ldi	r16, 0x08	; 8
    4332:	10 e0       	ldi	r17, 0x00	; 0
    4334:	72 c0       	rjmp	.+228    	; 0x441a <Gather_Battery_Data+0x382>
    4336:	de 01       	movw	r26, r28
    4338:	11 96       	adiw	r26, 0x01	; 1
    433a:	0d 90       	ld	r0, X+
    433c:	00 20       	and	r0, r0
    433e:	e9 f7       	brne	.-6      	; 0x433a <Gather_Battery_Data+0x2a2>
    4340:	11 97       	sbiw	r26, 0x01	; 1
    4342:	85 e0       	ldi	r24, 0x05	; 5
    4344:	e6 e0       	ldi	r30, 0x06	; 6
    4346:	f4 e4       	ldi	r31, 0x44	; 68
    4348:	01 90       	ld	r0, Z+
    434a:	0d 92       	st	X+, r0
    434c:	8a 95       	dec	r24
    434e:	e1 f7       	brne	.-8      	; 0x4348 <Gather_Battery_Data+0x2b0>
    4350:	08 e0       	ldi	r16, 0x08	; 8
    4352:	10 e0       	ldi	r17, 0x00	; 0
    4354:	62 c0       	rjmp	.+196    	; 0x441a <Gather_Battery_Data+0x382>
    4356:	de 01       	movw	r26, r28
    4358:	11 96       	adiw	r26, 0x01	; 1
    435a:	0d 90       	ld	r0, X+
    435c:	00 20       	and	r0, r0
    435e:	e9 f7       	brne	.-6      	; 0x435a <Gather_Battery_Data+0x2c2>
    4360:	11 97       	sbiw	r26, 0x01	; 1
    4362:	85 e0       	ldi	r24, 0x05	; 5
    4364:	eb e0       	ldi	r30, 0x0B	; 11
    4366:	f4 e4       	ldi	r31, 0x44	; 68
    4368:	01 90       	ld	r0, Z+
    436a:	0d 92       	st	X+, r0
    436c:	8a 95       	dec	r24
    436e:	e1 f7       	brne	.-8      	; 0x4368 <Gather_Battery_Data+0x2d0>
    4370:	08 e0       	ldi	r16, 0x08	; 8
    4372:	10 e0       	ldi	r17, 0x00	; 0
    4374:	52 c0       	rjmp	.+164    	; 0x441a <Gather_Battery_Data+0x382>
    4376:	de 01       	movw	r26, r28
    4378:	11 96       	adiw	r26, 0x01	; 1
    437a:	0d 90       	ld	r0, X+
    437c:	00 20       	and	r0, r0
    437e:	e9 f7       	brne	.-6      	; 0x437a <Gather_Battery_Data+0x2e2>
    4380:	11 97       	sbiw	r26, 0x01	; 1
    4382:	85 e0       	ldi	r24, 0x05	; 5
    4384:	e0 e1       	ldi	r30, 0x10	; 16
    4386:	f4 e4       	ldi	r31, 0x44	; 68
    4388:	01 90       	ld	r0, Z+
    438a:	0d 92       	st	X+, r0
    438c:	8a 95       	dec	r24
    438e:	e1 f7       	brne	.-8      	; 0x4388 <Gather_Battery_Data+0x2f0>
    4390:	08 e0       	ldi	r16, 0x08	; 8
    4392:	10 e0       	ldi	r17, 0x00	; 0
    4394:	42 c0       	rjmp	.+132    	; 0x441a <Gather_Battery_Data+0x382>
    4396:	de 01       	movw	r26, r28
    4398:	11 96       	adiw	r26, 0x01	; 1
    439a:	0d 90       	ld	r0, X+
    439c:	00 20       	and	r0, r0
    439e:	e9 f7       	brne	.-6      	; 0x439a <Gather_Battery_Data+0x302>
    43a0:	11 97       	sbiw	r26, 0x01	; 1
    43a2:	85 e0       	ldi	r24, 0x05	; 5
    43a4:	e5 e1       	ldi	r30, 0x15	; 21
    43a6:	f4 e4       	ldi	r31, 0x44	; 68
    43a8:	01 90       	ld	r0, Z+
    43aa:	0d 92       	st	X+, r0
    43ac:	8a 95       	dec	r24
    43ae:	e1 f7       	brne	.-8      	; 0x43a8 <Gather_Battery_Data+0x310>
    43b0:	08 e0       	ldi	r16, 0x08	; 8
    43b2:	10 e0       	ldi	r17, 0x00	; 0
    43b4:	32 c0       	rjmp	.+100    	; 0x441a <Gather_Battery_Data+0x382>
    43b6:	de 01       	movw	r26, r28
    43b8:	11 96       	adiw	r26, 0x01	; 1
    43ba:	0d 90       	ld	r0, X+
    43bc:	00 20       	and	r0, r0
    43be:	e9 f7       	brne	.-6      	; 0x43ba <Gather_Battery_Data+0x322>
    43c0:	11 97       	sbiw	r26, 0x01	; 1
    43c2:	85 e0       	ldi	r24, 0x05	; 5
    43c4:	ea e1       	ldi	r30, 0x1A	; 26
    43c6:	f4 e4       	ldi	r31, 0x44	; 68
    43c8:	01 90       	ld	r0, Z+
    43ca:	0d 92       	st	X+, r0
    43cc:	8a 95       	dec	r24
    43ce:	e1 f7       	brne	.-8      	; 0x43c8 <Gather_Battery_Data+0x330>
    43d0:	04 e0       	ldi	r16, 0x04	; 4
    43d2:	10 e0       	ldi	r17, 0x00	; 0
    43d4:	22 c0       	rjmp	.+68     	; 0x441a <Gather_Battery_Data+0x382>
    43d6:	de 01       	movw	r26, r28
    43d8:	11 96       	adiw	r26, 0x01	; 1
    43da:	0d 90       	ld	r0, X+
    43dc:	00 20       	and	r0, r0
    43de:	e9 f7       	brne	.-6      	; 0x43da <Gather_Battery_Data+0x342>
    43e0:	11 97       	sbiw	r26, 0x01	; 1
    43e2:	85 e0       	ldi	r24, 0x05	; 5
    43e4:	ef e1       	ldi	r30, 0x1F	; 31
    43e6:	f4 e4       	ldi	r31, 0x44	; 68
    43e8:	01 90       	ld	r0, Z+
    43ea:	0d 92       	st	X+, r0
    43ec:	8a 95       	dec	r24
    43ee:	e1 f7       	brne	.-8      	; 0x43e8 <Gather_Battery_Data+0x350>
    43f0:	04 e0       	ldi	r16, 0x04	; 4
    43f2:	10 e0       	ldi	r17, 0x00	; 0
    43f4:	12 c0       	rjmp	.+36     	; 0x441a <Gather_Battery_Data+0x382>
    43f6:	de 01       	movw	r26, r28
    43f8:	11 96       	adiw	r26, 0x01	; 1
    43fa:	0d 90       	ld	r0, X+
    43fc:	00 20       	and	r0, r0
    43fe:	e9 f7       	brne	.-6      	; 0x43fa <Gather_Battery_Data+0x362>
    4400:	11 97       	sbiw	r26, 0x01	; 1
    4402:	85 e0       	ldi	r24, 0x05	; 5
    4404:	e4 e2       	ldi	r30, 0x24	; 36
    4406:	f4 e4       	ldi	r31, 0x44	; 68
    4408:	01 90       	ld	r0, Z+
    440a:	0d 92       	st	X+, r0
    440c:	8a 95       	dec	r24
    440e:	e1 f7       	brne	.-8      	; 0x4408 <Gather_Battery_Data+0x370>
    4410:	04 e0       	ldi	r16, 0x04	; 4
    4412:	10 e0       	ldi	r17, 0x00	; 0
    4414:	02 c0       	rjmp	.+4      	; 0x441a <Gather_Battery_Data+0x382>
    4416:	00 e0       	ldi	r16, 0x00	; 0
    4418:	10 e0       	ldi	r17, 0x00	; 0
    441a:	40 91 0b 53 	lds	r20, 0x530B	; 0x80530b <cal+0x5e>
    441e:	50 91 0c 53 	lds	r21, 0x530C	; 0x80530c <cal+0x5f>
    4422:	60 91 0d 53 	lds	r22, 0x530D	; 0x80530d <cal+0x60>
    4426:	70 91 0e 53 	lds	r23, 0x530E	; 0x80530e <cal+0x61>
    442a:	80 91 8f 48 	lds	r24, 0x488F	; 0x80488f <array_SYBT+0x2e>
    442e:	90 91 90 48 	lds	r25, 0x4890	; 0x804890 <array_SYBT+0x2f>
    4432:	09 2e       	mov	r0, r25
    4434:	00 0c       	add	r0, r0
    4436:	aa 0b       	sbc	r26, r26
    4438:	bb 0b       	sbc	r27, r27
    443a:	48 17       	cp	r20, r24
    443c:	59 07       	cpc	r21, r25
    443e:	6a 07       	cpc	r22, r26
    4440:	7b 07       	cpc	r23, r27
    4442:	49 f4       	brne	.+18     	; 0x4456 <Gather_Battery_Data+0x3be>
    4444:	67 e0       	ldi	r22, 0x07	; 7
    4446:	73 e5       	ldi	r23, 0x53	; 83
    4448:	ce 01       	movw	r24, r28
    444a:	01 96       	adiw	r24, 0x01	; 1
    444c:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <strcat>
    4450:	08 e0       	ldi	r16, 0x08	; 8
    4452:	10 e0       	ldi	r17, 0x00	; 0
    4454:	44 c0       	rjmp	.+136    	; 0x44de <Gather_Battery_Data+0x446>
    4456:	40 91 13 53 	lds	r20, 0x5313	; 0x805313 <cal+0x66>
    445a:	50 91 14 53 	lds	r21, 0x5314	; 0x805314 <cal+0x67>
    445e:	60 91 15 53 	lds	r22, 0x5315	; 0x805315 <cal+0x68>
    4462:	70 91 16 53 	lds	r23, 0x5316	; 0x805316 <cal+0x69>
    4466:	84 17       	cp	r24, r20
    4468:	95 07       	cpc	r25, r21
    446a:	a6 07       	cpc	r26, r22
    446c:	b7 07       	cpc	r27, r23
    446e:	49 f4       	brne	.+18     	; 0x4482 <Gather_Battery_Data+0x3ea>
    4470:	6f e0       	ldi	r22, 0x0F	; 15
    4472:	73 e5       	ldi	r23, 0x53	; 83
    4474:	ce 01       	movw	r24, r28
    4476:	01 96       	adiw	r24, 0x01	; 1
    4478:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <strcat>
    447c:	08 e0       	ldi	r16, 0x08	; 8
    447e:	10 e0       	ldi	r17, 0x00	; 0
    4480:	2e c0       	rjmp	.+92     	; 0x44de <Gather_Battery_Data+0x446>
    4482:	40 91 1b 53 	lds	r20, 0x531B	; 0x80531b <cal+0x6e>
    4486:	50 91 1c 53 	lds	r21, 0x531C	; 0x80531c <cal+0x6f>
    448a:	60 91 1d 53 	lds	r22, 0x531D	; 0x80531d <cal+0x70>
    448e:	70 91 1e 53 	lds	r23, 0x531E	; 0x80531e <cal+0x71>
    4492:	84 17       	cp	r24, r20
    4494:	95 07       	cpc	r25, r21
    4496:	a6 07       	cpc	r26, r22
    4498:	b7 07       	cpc	r27, r23
    449a:	49 f4       	brne	.+18     	; 0x44ae <Gather_Battery_Data+0x416>
    449c:	67 e1       	ldi	r22, 0x17	; 23
    449e:	73 e5       	ldi	r23, 0x53	; 83
    44a0:	ce 01       	movw	r24, r28
    44a2:	01 96       	adiw	r24, 0x01	; 1
    44a4:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <strcat>
    44a8:	08 e0       	ldi	r16, 0x08	; 8
    44aa:	10 e0       	ldi	r17, 0x00	; 0
    44ac:	18 c0       	rjmp	.+48     	; 0x44de <Gather_Battery_Data+0x446>
    44ae:	40 91 23 53 	lds	r20, 0x5323	; 0x805323 <cal+0x76>
    44b2:	50 91 24 53 	lds	r21, 0x5324	; 0x805324 <cal+0x77>
    44b6:	60 91 25 53 	lds	r22, 0x5325	; 0x805325 <cal+0x78>
    44ba:	70 91 26 53 	lds	r23, 0x5326	; 0x805326 <cal+0x79>
    44be:	84 17       	cp	r24, r20
    44c0:	95 07       	cpc	r25, r21
    44c2:	a6 07       	cpc	r26, r22
    44c4:	b7 07       	cpc	r27, r23
    44c6:	59 f4       	brne	.+22     	; 0x44de <Gather_Battery_Data+0x446>
    44c8:	6f e1       	ldi	r22, 0x1F	; 31
    44ca:	73 e5       	ldi	r23, 0x53	; 83
    44cc:	ce 01       	movw	r24, r28
    44ce:	01 96       	adiw	r24, 0x01	; 1
    44d0:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <strcat>
    44d4:	08 e0       	ldi	r16, 0x08	; 8
    44d6:	10 e0       	ldi	r17, 0x00	; 0
    44d8:	02 c0       	rjmp	.+4      	; 0x44de <Gather_Battery_Data+0x446>
    44da:	00 e0       	ldi	r16, 0x00	; 0
    44dc:	10 e0       	ldi	r17, 0x00	; 0
    44de:	08 30       	cpi	r16, 0x08	; 8
    44e0:	11 05       	cpc	r17, r1
    44e2:	01 f1       	breq	.+64     	; 0x4524 <Gather_Battery_Data+0x48c>
    44e4:	04 30       	cpi	r16, 0x04	; 4
    44e6:	11 05       	cpc	r17, r1
    44e8:	e9 f0       	breq	.+58     	; 0x4524 <Gather_Battery_Data+0x48c>
    44ea:	e1 e6       	ldi	r30, 0x61	; 97
    44ec:	f8 e4       	ldi	r31, 0x48	; 72
    44ee:	87 a5       	ldd	r24, Z+47	; 0x2f
    44f0:	8f 93       	push	r24
    44f2:	86 a5       	ldd	r24, Z+46	; 0x2e
    44f4:	8f 93       	push	r24
    44f6:	84 e1       	ldi	r24, 0x14	; 20
    44f8:	90 e4       	ldi	r25, 0x40	; 64
    44fa:	9f 93       	push	r25
    44fc:	8f 93       	push	r24
    44fe:	7e 01       	movw	r14, r28
    4500:	b5 e6       	ldi	r27, 0x65	; 101
    4502:	eb 0e       	add	r14, r27
    4504:	f1 1c       	adc	r15, r1
    4506:	ff 92       	push	r15
    4508:	ef 92       	push	r14
    450a:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    450e:	b7 01       	movw	r22, r14
    4510:	ce 01       	movw	r24, r28
    4512:	01 96       	adiw	r24, 0x01	; 1
    4514:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <strcat>
    4518:	0f 90       	pop	r0
    451a:	0f 90       	pop	r0
    451c:	0f 90       	pop	r0
    451e:	0f 90       	pop	r0
    4520:	0f 90       	pop	r0
    4522:	0f 90       	pop	r0
    4524:	61 10       	cpse	r6, r1
    4526:	00 61       	ori	r16, 0x10	; 16
    4528:	80 91 4d 48 	lds	r24, 0x484D	; 0x80484d <TypeOfBatteryConnected>
    452c:	1f 92       	push	r1
    452e:	8f 93       	push	r24
    4530:	80 91 fd 53 	lds	r24, 0x53FD	; 0x8053fd <twentyfourvoltsupply+0x1>
    4534:	8f 93       	push	r24
    4536:	80 91 fc 53 	lds	r24, 0x53FC	; 0x8053fc <twentyfourvoltsupply>
    453a:	8f 93       	push	r24
    453c:	e7 e4       	ldi	r30, 0x47	; 71
    453e:	f3 e5       	ldi	r31, 0x53	; 83
    4540:	81 8d       	ldd	r24, Z+25	; 0x19
    4542:	8f 93       	push	r24
    4544:	80 8d       	ldd	r24, Z+24	; 0x18
    4546:	8f 93       	push	r24
    4548:	e5 e0       	ldi	r30, 0x05	; 5
    454a:	f3 e5       	ldi	r31, 0x53	; 83
    454c:	81 81       	ldd	r24, Z+1	; 0x01
    454e:	8f 93       	push	r24
    4550:	80 81       	ld	r24, Z
    4552:	8f 93       	push	r24
    4554:	7f 92       	push	r7
    4556:	cd 57       	subi	r28, 0x7D	; 125
    4558:	df 4f       	sbci	r29, 0xFF	; 255
    455a:	e8 81       	ld	r30, Y
    455c:	c3 58       	subi	r28, 0x83	; 131
    455e:	d0 40       	sbci	r29, 0x00	; 0
    4560:	ef 93       	push	r30
    4562:	1f 93       	push	r17
    4564:	0f 93       	push	r16
    4566:	cb 57       	subi	r28, 0x7B	; 123
    4568:	df 4f       	sbci	r29, 0xFF	; 255
    456a:	f8 81       	ld	r31, Y
    456c:	c5 58       	subi	r28, 0x85	; 133
    456e:	d0 40       	sbci	r29, 0x00	; 0
    4570:	ff 93       	push	r31
    4572:	cc 57       	subi	r28, 0x7C	; 124
    4574:	df 4f       	sbci	r29, 0xFF	; 255
    4576:	28 81       	ld	r18, Y
    4578:	c4 58       	subi	r28, 0x84	; 132
    457a:	d0 40       	sbci	r29, 0x00	; 0
    457c:	2f 93       	push	r18
    457e:	89 e2       	ldi	r24, 0x29	; 41
    4580:	94 e4       	ldi	r25, 0x44	; 68
    4582:	9f 93       	push	r25
    4584:	8f 93       	push	r24
    4586:	8e 01       	movw	r16, r28
    4588:	0b 59       	subi	r16, 0x9B	; 155
    458a:	1f 4f       	sbci	r17, 0xFF	; 255
    458c:	1f 93       	push	r17
    458e:	0f 93       	push	r16
    4590:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    4594:	b8 01       	movw	r22, r16
    4596:	ce 01       	movw	r24, r28
    4598:	01 96       	adiw	r24, 0x01	; 1
    459a:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <strcat>
    459e:	61 e0       	ldi	r22, 0x01	; 1
    45a0:	ce 01       	movw	r24, r28
    45a2:	01 96       	adiw	r24, 0x01	; 1
    45a4:	0e 94 5d 17 	call	0x2eba	; 0x2eba <TransmitBatteryData>
    45a8:	cd bf       	out	0x3d, r28	; 61
    45aa:	de bf       	out	0x3e, r29	; 62
    45ac:	81 e0       	ldi	r24, 0x01	; 1
    45ae:	cb 57       	subi	r28, 0x7B	; 123
    45b0:	df 4f       	sbci	r29, 0xFF	; 255
    45b2:	cd bf       	out	0x3d, r28	; 61
    45b4:	de bf       	out	0x3e, r29	; 62
    45b6:	df 91       	pop	r29
    45b8:	cf 91       	pop	r28
    45ba:	1f 91       	pop	r17
    45bc:	0f 91       	pop	r16
    45be:	ff 90       	pop	r15
    45c0:	ef 90       	pop	r14
    45c2:	df 90       	pop	r13
    45c4:	cf 90       	pop	r12
    45c6:	bf 90       	pop	r11
    45c8:	af 90       	pop	r10
    45ca:	9f 90       	pop	r9
    45cc:	8f 90       	pop	r8
    45ce:	7f 90       	pop	r7
    45d0:	6f 90       	pop	r6
    45d2:	5f 90       	pop	r5
    45d4:	4f 90       	pop	r4
    45d6:	3f 90       	pop	r3
    45d8:	2f 90       	pop	r2
    45da:	08 95       	ret

000045dc <NewSetUnfinishedBusiness>:
    45dc:	0f 93       	push	r16
    45de:	1f 93       	push	r17
    45e0:	fa 01       	movw	r30, r20
    45e2:	00 81       	ld	r16, Z
    45e4:	11 81       	ldd	r17, Z+1	; 0x01
    45e6:	22 81       	ldd	r18, Z+2	; 0x02
    45e8:	33 81       	ldd	r19, Z+3	; 0x03
    45ea:	dc 01       	movw	r26, r24
    45ec:	cb 01       	movw	r24, r22
    45ee:	80 2b       	or	r24, r16
    45f0:	91 2b       	or	r25, r17
    45f2:	a2 2b       	or	r26, r18
    45f4:	b3 2b       	or	r27, r19
    45f6:	80 83       	st	Z, r24
    45f8:	91 83       	std	Z+1, r25	; 0x01
    45fa:	a2 83       	std	Z+2, r26	; 0x02
    45fc:	b3 83       	std	Z+3, r27	; 0x03
    45fe:	1f 91       	pop	r17
    4600:	0f 91       	pop	r16
    4602:	08 95       	ret

00004604 <NewClearUnfinishedBusiness>:
    4604:	0f 93       	push	r16
    4606:	1f 93       	push	r17
    4608:	fa 01       	movw	r30, r20
    460a:	00 81       	ld	r16, Z
    460c:	11 81       	ldd	r17, Z+1	; 0x01
    460e:	22 81       	ldd	r18, Z+2	; 0x02
    4610:	33 81       	ldd	r19, Z+3	; 0x03
    4612:	06 2b       	or	r16, r22
    4614:	17 2b       	or	r17, r23
    4616:	28 2b       	or	r18, r24
    4618:	39 2b       	or	r19, r25
    461a:	dc 01       	movw	r26, r24
    461c:	cb 01       	movw	r24, r22
    461e:	80 27       	eor	r24, r16
    4620:	91 27       	eor	r25, r17
    4622:	a2 27       	eor	r26, r18
    4624:	b3 27       	eor	r27, r19
    4626:	80 83       	st	Z, r24
    4628:	91 83       	std	Z+1, r25	; 0x01
    462a:	a2 83       	std	Z+2, r26	; 0x02
    462c:	b3 83       	std	Z+3, r27	; 0x03
    462e:	1f 91       	pop	r17
    4630:	0f 91       	pop	r16
    4632:	08 95       	ret

00004634 <MeasureSixVoltBattery>:
    4634:	8f 92       	push	r8
    4636:	9f 92       	push	r9
    4638:	af 92       	push	r10
    463a:	bf 92       	push	r11
    463c:	ff 92       	push	r15
    463e:	0f 93       	push	r16
    4640:	1f 93       	push	r17
    4642:	cf 93       	push	r28
    4644:	df 93       	push	r29
    4646:	ec 01       	movw	r28, r24
    4648:	8b 01       	movw	r16, r22
    464a:	f4 2e       	mov	r15, r20
    464c:	85 b1       	in	r24, 0x05	; 5
    464e:	80 61       	ori	r24, 0x10	; 16
    4650:	85 b9       	out	0x05, r24	; 5
    4652:	8b e0       	ldi	r24, 0x0B	; 11
    4654:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    4658:	b8 01       	movw	r22, r16
    465a:	11 0f       	add	r17, r17
    465c:	88 0b       	sbc	r24, r24
    465e:	99 0b       	sbc	r25, r25
    4660:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    4664:	20 e0       	ldi	r18, 0x00	; 0
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	4a e7       	ldi	r20, 0x7A	; 122
    466a:	54 e4       	ldi	r21, 0x44	; 68
    466c:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    4670:	4b 01       	movw	r8, r22
    4672:	5c 01       	movw	r10, r24
    4674:	8b e0       	ldi	r24, 0x0B	; 11
    4676:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    467a:	96 95       	lsr	r25
    467c:	87 95       	ror	r24
    467e:	96 95       	lsr	r25
    4680:	87 95       	ror	r24
    4682:	bc 01       	movw	r22, r24
    4684:	80 e0       	ldi	r24, 0x00	; 0
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    468c:	a5 01       	movw	r20, r10
    468e:	94 01       	movw	r18, r8
    4690:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    4694:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    4698:	9b 01       	movw	r18, r22
    469a:	ff 20       	and	r15, r15
    469c:	19 f0       	breq	.+6      	; 0x46a4 <MeasureSixVoltBattery+0x70>
    469e:	45 b1       	in	r20, 0x05	; 5
    46a0:	4f 7e       	andi	r20, 0xEF	; 239
    46a2:	45 b9       	out	0x05, r20	; 5
    46a4:	2c 3d       	cpi	r18, 0xDC	; 220
    46a6:	31 40       	sbci	r19, 0x01	; 1
    46a8:	1c f0       	brlt	.+6      	; 0x46b0 <MeasureSixVoltBattery+0x7c>
    46aa:	21 e0       	ldi	r18, 0x01	; 1
    46ac:	28 83       	st	Y, r18
    46ae:	01 c0       	rjmp	.+2      	; 0x46b2 <MeasureSixVoltBattery+0x7e>
    46b0:	18 82       	st	Y, r1
    46b2:	cb 01       	movw	r24, r22
    46b4:	df 91       	pop	r29
    46b6:	cf 91       	pop	r28
    46b8:	1f 91       	pop	r17
    46ba:	0f 91       	pop	r16
    46bc:	ff 90       	pop	r15
    46be:	bf 90       	pop	r11
    46c0:	af 90       	pop	r10
    46c2:	9f 90       	pop	r9
    46c4:	8f 90       	pop	r8
    46c6:	08 95       	ret

000046c8 <GatherSYBTflavorData>:
    46c8:	0f 93       	push	r16
    46ca:	1f 93       	push	r17
    46cc:	cf 93       	push	r28
    46ce:	df 93       	push	r29
    46d0:	cd b7       	in	r28, 0x3d	; 61
    46d2:	de b7       	in	r29, 0x3e	; 62
    46d4:	ec 97       	sbiw	r28, 0x3c	; 60
    46d6:	cd bf       	out	0x3d, r28	; 61
    46d8:	de bf       	out	0x3e, r29	; 62
    46da:	8e 01       	movw	r16, r28
    46dc:	0f 5f       	subi	r16, 0xFF	; 255
    46de:	1f 4f       	sbci	r17, 0xFF	; 255
    46e0:	8c e3       	ldi	r24, 0x3C	; 60
    46e2:	f8 01       	movw	r30, r16
    46e4:	11 92       	st	Z+, r1
    46e6:	8a 95       	dec	r24
    46e8:	e9 f7       	brne	.-6      	; 0x46e4 <GatherSYBTflavorData+0x1c>
    46ea:	e3 e2       	ldi	r30, 0x23	; 35
    46ec:	f3 e5       	ldi	r31, 0x53	; 83
    46ee:	83 81       	ldd	r24, Z+3	; 0x03
    46f0:	8f 93       	push	r24
    46f2:	82 81       	ldd	r24, Z+2	; 0x02
    46f4:	8f 93       	push	r24
    46f6:	81 81       	ldd	r24, Z+1	; 0x01
    46f8:	8f 93       	push	r24
    46fa:	80 81       	ld	r24, Z
    46fc:	8f 93       	push	r24
    46fe:	8f e1       	ldi	r24, 0x1F	; 31
    4700:	93 e5       	ldi	r25, 0x53	; 83
    4702:	9f 93       	push	r25
    4704:	8f 93       	push	r24
    4706:	eb e1       	ldi	r30, 0x1B	; 27
    4708:	f3 e5       	ldi	r31, 0x53	; 83
    470a:	83 81       	ldd	r24, Z+3	; 0x03
    470c:	8f 93       	push	r24
    470e:	82 81       	ldd	r24, Z+2	; 0x02
    4710:	8f 93       	push	r24
    4712:	81 81       	ldd	r24, Z+1	; 0x01
    4714:	8f 93       	push	r24
    4716:	80 81       	ld	r24, Z
    4718:	8f 93       	push	r24
    471a:	87 e1       	ldi	r24, 0x17	; 23
    471c:	93 e5       	ldi	r25, 0x53	; 83
    471e:	9f 93       	push	r25
    4720:	8f 93       	push	r24
    4722:	e3 e1       	ldi	r30, 0x13	; 19
    4724:	f3 e5       	ldi	r31, 0x53	; 83
    4726:	83 81       	ldd	r24, Z+3	; 0x03
    4728:	8f 93       	push	r24
    472a:	82 81       	ldd	r24, Z+2	; 0x02
    472c:	8f 93       	push	r24
    472e:	81 81       	ldd	r24, Z+1	; 0x01
    4730:	8f 93       	push	r24
    4732:	80 81       	ld	r24, Z
    4734:	8f 93       	push	r24
    4736:	8f e0       	ldi	r24, 0x0F	; 15
    4738:	93 e5       	ldi	r25, 0x53	; 83
    473a:	9f 93       	push	r25
    473c:	8f 93       	push	r24
    473e:	eb e0       	ldi	r30, 0x0B	; 11
    4740:	f3 e5       	ldi	r31, 0x53	; 83
    4742:	83 81       	ldd	r24, Z+3	; 0x03
    4744:	8f 93       	push	r24
    4746:	82 81       	ldd	r24, Z+2	; 0x02
    4748:	8f 93       	push	r24
    474a:	81 81       	ldd	r24, Z+1	; 0x01
    474c:	8f 93       	push	r24
    474e:	80 81       	ld	r24, Z
    4750:	8f 93       	push	r24
    4752:	87 e0       	ldi	r24, 0x07	; 7
    4754:	93 e5       	ldi	r25, 0x53	; 83
    4756:	9f 93       	push	r25
    4758:	8f 93       	push	r24
    475a:	84 e4       	ldi	r24, 0x44	; 68
    475c:	94 e4       	ldi	r25, 0x44	; 68
    475e:	9f 93       	push	r25
    4760:	8f 93       	push	r24
    4762:	1f 93       	push	r17
    4764:	0f 93       	push	r16
    4766:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    476a:	45 ea       	ldi	r20, 0xA5	; 165
    476c:	54 e5       	ldi	r21, 0x54	; 84
    476e:	61 e0       	ldi	r22, 0x01	; 1
    4770:	70 e0       	ldi	r23, 0x00	; 0
    4772:	80 e0       	ldi	r24, 0x00	; 0
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	0e 94 ee 22 	call	0x45dc	; 0x45dc <NewSetUnfinishedBusiness>
    477a:	61 e0       	ldi	r22, 0x01	; 1
    477c:	c8 01       	movw	r24, r16
    477e:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <TransmitFlavorData>
    4782:	cd bf       	out	0x3d, r28	; 61
    4784:	de bf       	out	0x3e, r29	; 62
    4786:	ec 96       	adiw	r28, 0x3c	; 60
    4788:	cd bf       	out	0x3d, r28	; 61
    478a:	de bf       	out	0x3e, r29	; 62
    478c:	df 91       	pop	r29
    478e:	cf 91       	pop	r28
    4790:	1f 91       	pop	r17
    4792:	0f 91       	pop	r16
    4794:	08 95       	ret

00004796 <Measure24voltSupply>:
//------------------------------------------------------------------------------------------------------------------------------
uint16_t Measure24voltSupply(void){
		//uint8_t twentyfourvoltsupply;
		ADC_0_get_conversion(ADC_TwentyFourVolts);
    4796:	83 e0       	ldi	r24, 0x03	; 3
    4798:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
		twentyfourvoltsupply = ((ADC_0_get_conversion(ADC_TwentyFourVolts) >> 2)/2);  //0.649 used in Gen3#1  0.654 used in Gen3#2, 1.25 used in Gen3#3.034 (float).068 * 
    479c:	83 e0       	ldi	r24, 0x03	; 3
    479e:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    47a2:	96 95       	lsr	r25
    47a4:	87 95       	ror	r24
    47a6:	96 95       	lsr	r25
    47a8:	87 95       	ror	r24
    47aa:	96 95       	lsr	r25
    47ac:	87 95       	ror	r24
    47ae:	80 93 fc 53 	sts	0x53FC, r24	; 0x8053fc <twentyfourvoltsupply>
    47b2:	90 93 fd 53 	sts	0x53FD, r25	; 0x8053fd <twentyfourvoltsupply+0x1>
		return twentyfourvoltsupply;
}
    47b6:	08 95       	ret

000047b8 <RestoreSleepSettings>:
		//if (!(EEPROMstatus & EEPROM_SYBT_AD_STAT))calibration.SYBT_ad_cal = FLASH_0_read_eeprom_byte(EEPROM_SYBT_AD_Cal);
		//if (!(EEPROMstatus & EEPROM_SYBT_AD_STAT))FLASH_0_write_eeprom_byte(EEPROM_SYBT_AD_Cal, 57);
return true;	
}

void RestoreSleepSettings(void){
    47b8:	cf 92       	push	r12
    47ba:	df 92       	push	r13
    47bc:	ef 92       	push	r14
    47be:	ff 92       	push	r15
    47c0:	0f 93       	push	r16
    47c2:	1f 93       	push	r17
    47c4:	cf 93       	push	r28
    47c6:	df 93       	push	r29
    47c8:	cd b7       	in	r28, 0x3d	; 61
    47ca:	de b7       	in	r29, 0x3e	; 62
    47cc:	6e 97       	sbiw	r28, 0x1e	; 30
    47ce:	cd bf       	out	0x3d, r28	; 61
    47d0:	de bf       	out	0x3e, r29	; 62
	uint8_t buffer[30];
	memset(buffer,0,30*sizeof(uint8_t));
    47d2:	8e 01       	movw	r16, r28
    47d4:	0f 5f       	subi	r16, 0xFF	; 255
    47d6:	1f 4f       	sbci	r17, 0xFF	; 255
    47d8:	8e e1       	ldi	r24, 0x1E	; 30
    47da:	f8 01       	movw	r30, r16
    47dc:	11 92       	st	Z+, r1
    47de:	8a 95       	dec	r24
    47e0:	e9 f7       	brne	.-6      	; 0x47dc <RestoreSleepSettings+0x24>
	FLASH_0_read_eeprom_block(EEPROM_Sleep_1,(void*)&buffer,2);
    47e2:	42 e0       	ldi	r20, 0x02	; 2
    47e4:	50 e0       	ldi	r21, 0x00	; 0
    47e6:	b8 01       	movw	r22, r16
    47e8:	84 e3       	ldi	r24, 0x34	; 52
    47ea:	91 e0       	ldi	r25, 0x01	; 1
    47ec:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%2lu",&cal.Sleep_1);
    47f0:	0f 2e       	mov	r0, r31
    47f2:	f7 e2       	ldi	r31, 0x27	; 39
    47f4:	cf 2e       	mov	r12, r31
    47f6:	f3 e5       	ldi	r31, 0x53	; 83
    47f8:	df 2e       	mov	r13, r31
    47fa:	f0 2d       	mov	r31, r0
    47fc:	df 92       	push	r13
    47fe:	cf 92       	push	r12
    4800:	0f 2e       	mov	r0, r31
    4802:	f3 e7       	ldi	r31, 0x73	; 115
    4804:	ef 2e       	mov	r14, r31
    4806:	f4 e4       	ldi	r31, 0x44	; 68
    4808:	ff 2e       	mov	r15, r31
    480a:	f0 2d       	mov	r31, r0
    480c:	ff 92       	push	r15
    480e:	ef 92       	push	r14
    4810:	1f 93       	push	r17
    4812:	0f 93       	push	r16
    4814:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	cal.Sleep_1 *= 10000;
    4818:	f6 01       	movw	r30, r12
    481a:	20 81       	ld	r18, Z
    481c:	31 81       	ldd	r19, Z+1	; 0x01
    481e:	42 81       	ldd	r20, Z+2	; 0x02
    4820:	53 81       	ldd	r21, Z+3	; 0x03
    4822:	a0 e1       	ldi	r26, 0x10	; 16
    4824:	b7 e2       	ldi	r27, 0x27	; 39
    4826:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__muluhisi3>
    482a:	60 83       	st	Z, r22
    482c:	71 83       	std	Z+1, r23	; 0x01
    482e:	82 83       	std	Z+2, r24	; 0x02
    4830:	93 83       	std	Z+3, r25	; 0x03
	FLASH_0_read_eeprom_block(EEPROM_Sleep_2,(void*)&buffer,2);
    4832:	42 e0       	ldi	r20, 0x02	; 2
    4834:	50 e0       	ldi	r21, 0x00	; 0
    4836:	b8 01       	movw	r22, r16
    4838:	87 e3       	ldi	r24, 0x37	; 55
    483a:	91 e0       	ldi	r25, 0x01	; 1
    483c:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%2lu",&cal.Sleep_2);
    4840:	0f 2e       	mov	r0, r31
    4842:	fb e2       	ldi	r31, 0x2B	; 43
    4844:	cf 2e       	mov	r12, r31
    4846:	f3 e5       	ldi	r31, 0x53	; 83
    4848:	df 2e       	mov	r13, r31
    484a:	f0 2d       	mov	r31, r0
    484c:	df 92       	push	r13
    484e:	cf 92       	push	r12
    4850:	ff 92       	push	r15
    4852:	ef 92       	push	r14
    4854:	1f 93       	push	r17
    4856:	0f 93       	push	r16
    4858:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	cal.Sleep_2 *= 10000;
    485c:	f6 01       	movw	r30, r12
    485e:	20 81       	ld	r18, Z
    4860:	31 81       	ldd	r19, Z+1	; 0x01
    4862:	42 81       	ldd	r20, Z+2	; 0x02
    4864:	53 81       	ldd	r21, Z+3	; 0x03
    4866:	a0 e1       	ldi	r26, 0x10	; 16
    4868:	b7 e2       	ldi	r27, 0x27	; 39
    486a:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__muluhisi3>
    486e:	60 83       	st	Z, r22
    4870:	71 83       	std	Z+1, r23	; 0x01
    4872:	82 83       	std	Z+2, r24	; 0x02
    4874:	93 83       	std	Z+3, r25	; 0x03
	FLASH_0_read_eeprom_block(EEPROM_Sleep_3,(void*)&buffer,2);
    4876:	42 e0       	ldi	r20, 0x02	; 2
    4878:	50 e0       	ldi	r21, 0x00	; 0
    487a:	b8 01       	movw	r22, r16
    487c:	88 e1       	ldi	r24, 0x18	; 24
    487e:	91 e0       	ldi	r25, 0x01	; 1
    4880:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%2lu",&cal.Sleep_3);
    4884:	0f 2e       	mov	r0, r31
    4886:	ff e2       	ldi	r31, 0x2F	; 47
    4888:	cf 2e       	mov	r12, r31
    488a:	f3 e5       	ldi	r31, 0x53	; 83
    488c:	df 2e       	mov	r13, r31
    488e:	f0 2d       	mov	r31, r0
    4890:	df 92       	push	r13
    4892:	cf 92       	push	r12
    4894:	ff 92       	push	r15
    4896:	ef 92       	push	r14
    4898:	1f 93       	push	r17
    489a:	0f 93       	push	r16
    489c:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	cal.Sleep_3 *= 10000;
    48a0:	f6 01       	movw	r30, r12
    48a2:	20 81       	ld	r18, Z
    48a4:	31 81       	ldd	r19, Z+1	; 0x01
    48a6:	42 81       	ldd	r20, Z+2	; 0x02
    48a8:	53 81       	ldd	r21, Z+3	; 0x03
    48aa:	a0 e1       	ldi	r26, 0x10	; 16
    48ac:	b7 e2       	ldi	r27, 0x27	; 39
    48ae:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__muluhisi3>
    48b2:	60 83       	st	Z, r22
    48b4:	71 83       	std	Z+1, r23	; 0x01
    48b6:	82 83       	std	Z+2, r24	; 0x02
    48b8:	93 83       	std	Z+3, r25	; 0x03
}
    48ba:	cd bf       	out	0x3d, r28	; 61
    48bc:	de bf       	out	0x3e, r29	; 62
    48be:	6e 96       	adiw	r28, 0x1e	; 30
    48c0:	cd bf       	out	0x3d, r28	; 61
    48c2:	de bf       	out	0x3e, r29	; 62
    48c4:	df 91       	pop	r29
    48c6:	cf 91       	pop	r28
    48c8:	1f 91       	pop	r17
    48ca:	0f 91       	pop	r16
    48cc:	ff 90       	pop	r15
    48ce:	ef 90       	pop	r14
    48d0:	df 90       	pop	r13
    48d2:	cf 90       	pop	r12
    48d4:	08 95       	ret

000048d6 <CheckEEPROMvalues>:
#include <float.h>

// Change firmware to reflect "s" for small chip and "L" for large chips. Located in Bluetooth data out.
//Set large or small chip in bobs_functions.h
// change define for large or small chips in bobs_functions.h, atmel_start_pins.h, main.c, and driver_init.c
bool CheckEEPROMvalues(){
    48d6:	af 92       	push	r10
    48d8:	bf 92       	push	r11
    48da:	cf 92       	push	r12
    48dc:	df 92       	push	r13
    48de:	ef 92       	push	r14
    48e0:	ff 92       	push	r15
    48e2:	0f 93       	push	r16
    48e4:	1f 93       	push	r17
    48e6:	cf 93       	push	r28
    48e8:	df 93       	push	r29
    48ea:	cd b7       	in	r28, 0x3d	; 61
    48ec:	de b7       	in	r29, 0x3e	; 62
    48ee:	6e 97       	sbiw	r28, 0x1e	; 30
    48f0:	cd bf       	out	0x3d, r28	; 61
    48f2:	de bf       	out	0x3e, r29	; 62
//	uint8_t EEPROMstatus;
	uint8_t buffer[30];

	memset(buffer,0,30*sizeof(uint8_t));
    48f4:	8e 01       	movw	r16, r28
    48f6:	0f 5f       	subi	r16, 0xFF	; 255
    48f8:	1f 4f       	sbci	r17, 0xFF	; 255
    48fa:	8e e1       	ldi	r24, 0x1E	; 30
    48fc:	f8 01       	movw	r30, r16
    48fe:	11 92       	st	Z+, r1
    4900:	8a 95       	dec	r24
    4902:	e9 f7       	brne	.-6      	; 0x48fe <CheckEEPROMvalues+0x28>
	


	FLASH_0_read_eeprom_byte(EEPROM_STATUS_ADDR);  // not used?
    4904:	81 e0       	ldi	r24, 0x01	; 1
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	0e 94 49 34 	call	0x6892	; 0x6892 <FLASH_0_read_eeprom_byte>
	
	FLASH_0_read_eeprom_block(EEPROM_SYBT_AD_Cal,(void*)&buffer,4);
    490c:	44 e0       	ldi	r20, 0x04	; 4
    490e:	50 e0       	ldi	r21, 0x00	; 0
    4910:	b8 01       	movw	r22, r16
    4912:	8a e0       	ldi	r24, 0x0A	; 10
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%4d",&cal.SYBT_ad_cal);
    491a:	81 eb       	ldi	r24, 0xB1	; 177
    491c:	92 e5       	ldi	r25, 0x52	; 82
    491e:	9f 93       	push	r25
    4920:	8f 93       	push	r24
    4922:	0f 2e       	mov	r0, r31
    4924:	f8 e7       	ldi	r31, 0x78	; 120
    4926:	ef 2e       	mov	r14, r31
    4928:	f4 e4       	ldi	r31, 0x44	; 68
    492a:	ff 2e       	mov	r15, r31
    492c:	f0 2d       	mov	r31, r0
    492e:	ff 92       	push	r15
    4930:	ef 92       	push	r14
    4932:	1f 93       	push	r17
    4934:	0f 93       	push	r16
    4936:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_LOAD_AD_Cal,(void*)&buffer,4);
    493a:	44 e0       	ldi	r20, 0x04	; 4
    493c:	50 e0       	ldi	r21, 0x00	; 0
    493e:	b8 01       	movw	r22, r16
    4940:	84 e1       	ldi	r24, 0x14	; 20
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%4d",&cal.Load_ad_cal);
    4948:	87 eb       	ldi	r24, 0xB7	; 183
    494a:	92 e5       	ldi	r25, 0x52	; 82
    494c:	9f 93       	push	r25
    494e:	8f 93       	push	r24
    4950:	ff 92       	push	r15
    4952:	ef 92       	push	r14
    4954:	1f 93       	push	r17
    4956:	0f 93       	push	r16
    4958:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_9VOLT_AD_Cal,(void*)&buffer,4);
    495c:	44 e0       	ldi	r20, 0x04	; 4
    495e:	50 e0       	ldi	r21, 0x00	; 0
    4960:	b8 01       	movw	r22, r16
    4962:	8f e0       	ldi	r24, 0x0F	; 15
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%4d",&cal.Nine_V_ad_cal);
    496a:	83 eb       	ldi	r24, 0xB3	; 179
    496c:	92 e5       	ldi	r25, 0x52	; 82
    496e:	9f 93       	push	r25
    4970:	8f 93       	push	r24
    4972:	ff 92       	push	r15
    4974:	ef 92       	push	r14
    4976:	1f 93       	push	r17
    4978:	0f 93       	push	r16
    497a:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_Resistor_A,(void*)&buffer,4);
    497e:	44 e0       	ldi	r20, 0x04	; 4
    4980:	50 e0       	ldi	r21, 0x00	; 0
    4982:	b8 01       	movw	r22, r16
    4984:	89 e1       	ldi	r24, 0x19	; 25
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%4d",&cal.ResistA_cal);
    498c:	89 eb       	ldi	r24, 0xB9	; 185
    498e:	92 e5       	ldi	r25, 0x52	; 82
    4990:	9f 93       	push	r25
    4992:	8f 93       	push	r24
    4994:	ff 92       	push	r15
    4996:	ef 92       	push	r14
    4998:	1f 93       	push	r17
    499a:	0f 93       	push	r16
    499c:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_Resistor_B,(void*)&buffer,4);
    49a0:	44 e0       	ldi	r20, 0x04	; 4
    49a2:	50 e0       	ldi	r21, 0x00	; 0
    49a4:	b8 01       	movw	r22, r16
    49a6:	8e e1       	ldi	r24, 0x1E	; 30
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%4d",&cal.ResistB_cal);
    49ae:	8b eb       	ldi	r24, 0xBB	; 187
    49b0:	92 e5       	ldi	r25, 0x52	; 82
    49b2:	9f 93       	push	r25
    49b4:	8f 93       	push	r24
    49b6:	ff 92       	push	r15
    49b8:	ef 92       	push	r14
    49ba:	1f 93       	push	r17
    49bc:	0f 93       	push	r16
    49be:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	cal.Preferences = FLASH_0_read_eeprom_byte(EEPROM_PREFERENCES_ADDR);
    49c2:	83 e0       	ldi	r24, 0x03	; 3
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	0e 94 49 34 	call	0x6892	; 0x6892 <FLASH_0_read_eeprom_byte>
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	80 93 05 53 	sts	0x5305, r24	; 0x805305 <cal+0x58>
    49d0:	90 93 06 53 	sts	0x5306, r25	; 0x805306 <cal+0x59>
	FLASH_0_read_eeprom_block(EEPROM_Bluetooth_Name,(void*)&buffer,24);
    49d4:	48 e1       	ldi	r20, 0x18	; 24
    49d6:	50 e0       	ldi	r21, 0x00	; 0
    49d8:	b8 01       	movw	r22, r16
    49da:	83 e2       	ldi	r24, 0x23	; 35
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%24s",Bluetooth_Name);										// don't need "&" when it is the beginning of a string. 
    49e2:	87 e8       	ldi	r24, 0x87	; 135
    49e4:	94 e5       	ldi	r25, 0x54	; 84
    49e6:	9f 93       	push	r25
    49e8:	8f 93       	push	r24
    49ea:	86 e6       	ldi	r24, 0x66	; 102
    49ec:	92 e4       	ldi	r25, 0x42	; 66
    49ee:	9f 93       	push	r25
    49f0:	8f 93       	push	r24
    49f2:	1f 93       	push	r17
    49f4:	0f 93       	push	r16
    49f6:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_New_Bluetooth_Name,(void*)&buffer,1);
    49fa:	cd bf       	out	0x3d, r28	; 61
    49fc:	de bf       	out	0x3e, r29	; 62
    49fe:	41 e0       	ldi	r20, 0x01	; 1
    4a00:	50 e0       	ldi	r21, 0x00	; 0
    4a02:	b8 01       	movw	r22, r16
    4a04:	84 e4       	ldi	r24, 0x44	; 68
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%1d",&New_Bluetooth_Name);		  
    4a0c:	83 ea       	ldi	r24, 0xA3	; 163
    4a0e:	94 e5       	ldi	r25, 0x54	; 84
    4a10:	9f 93       	push	r25
    4a12:	8f 93       	push	r24
    4a14:	8c e7       	ldi	r24, 0x7C	; 124
    4a16:	94 e4       	ldi	r25, 0x44	; 68
    4a18:	9f 93       	push	r25
    4a1a:	8f 93       	push	r24
    4a1c:	1f 93       	push	r17
    4a1e:	0f 93       	push	r16
    4a20:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_FlavName1,(void*)&buffer,4);
    4a24:	44 e0       	ldi	r20, 0x04	; 4
    4a26:	50 e0       	ldi	r21, 0x00	; 0
    4a28:	b8 01       	movw	r22, r16
    4a2a:	86 e4       	ldi	r24, 0x46	; 70
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%3s",cal.FlavrName1);
    4a32:	87 e0       	ldi	r24, 0x07	; 7
    4a34:	93 e5       	ldi	r25, 0x53	; 83
    4a36:	9f 93       	push	r25
    4a38:	8f 93       	push	r24
    4a3a:	0f 2e       	mov	r0, r31
    4a3c:	f0 e8       	ldi	r31, 0x80	; 128
    4a3e:	af 2e       	mov	r10, r31
    4a40:	f4 e4       	ldi	r31, 0x44	; 68
    4a42:	bf 2e       	mov	r11, r31
    4a44:	f0 2d       	mov	r31, r0
    4a46:	bf 92       	push	r11
    4a48:	af 92       	push	r10
    4a4a:	1f 93       	push	r17
    4a4c:	0f 93       	push	r16
    4a4e:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_FlavResis1,(void*)&buffer,6);
    4a52:	46 e0       	ldi	r20, 0x06	; 6
    4a54:	50 e0       	ldi	r21, 0x00	; 0
    4a56:	b8 01       	movw	r22, r16
    4a58:	8b e4       	ldi	r24, 0x4B	; 75
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%5lu",&cal.FlavrVal1);
    4a60:	8b e0       	ldi	r24, 0x0B	; 11
    4a62:	93 e5       	ldi	r25, 0x53	; 83
    4a64:	9f 93       	push	r25
    4a66:	8f 93       	push	r24
    4a68:	0f 2e       	mov	r0, r31
    4a6a:	f4 e0       	ldi	r31, 0x04	; 4
    4a6c:	cf 2e       	mov	r12, r31
    4a6e:	f2 e4       	ldi	r31, 0x42	; 66
    4a70:	df 2e       	mov	r13, r31
    4a72:	f0 2d       	mov	r31, r0
    4a74:	df 92       	push	r13
    4a76:	cf 92       	push	r12
    4a78:	1f 93       	push	r17
    4a7a:	0f 93       	push	r16
    4a7c:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_FlavName2,(void*)&buffer,4);
    4a80:	44 e0       	ldi	r20, 0x04	; 4
    4a82:	50 e0       	ldi	r21, 0x00	; 0
    4a84:	b8 01       	movw	r22, r16
    4a86:	81 e5       	ldi	r24, 0x51	; 81
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%3s",cal.FlavrName2);									// don't need "&" when it is the beginning of a string. 
    4a8e:	8f e0       	ldi	r24, 0x0F	; 15
    4a90:	93 e5       	ldi	r25, 0x53	; 83
    4a92:	9f 93       	push	r25
    4a94:	8f 93       	push	r24
    4a96:	bf 92       	push	r11
    4a98:	af 92       	push	r10
    4a9a:	1f 93       	push	r17
    4a9c:	0f 93       	push	r16
    4a9e:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_FlavResis2,(void*)&buffer,6);
    4aa2:	46 e0       	ldi	r20, 0x06	; 6
    4aa4:	50 e0       	ldi	r21, 0x00	; 0
    4aa6:	b8 01       	movw	r22, r16
    4aa8:	86 e5       	ldi	r24, 0x56	; 86
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%5lu",&cal.FlavrVal2);
    4ab0:	83 e1       	ldi	r24, 0x13	; 19
    4ab2:	93 e5       	ldi	r25, 0x53	; 83
    4ab4:	9f 93       	push	r25
    4ab6:	8f 93       	push	r24
    4ab8:	df 92       	push	r13
    4aba:	cf 92       	push	r12
    4abc:	1f 93       	push	r17
    4abe:	0f 93       	push	r16
    4ac0:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_FlavName3,(void*)&buffer,4);
    4ac4:	44 e0       	ldi	r20, 0x04	; 4
    4ac6:	50 e0       	ldi	r21, 0x00	; 0
    4ac8:	b8 01       	movw	r22, r16
    4aca:	8c e5       	ldi	r24, 0x5C	; 92
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%3s",cal.FlavrName3);									// don't need "&" when it is the beginning of a string. 
    4ad2:	87 e1       	ldi	r24, 0x17	; 23
    4ad4:	93 e5       	ldi	r25, 0x53	; 83
    4ad6:	9f 93       	push	r25
    4ad8:	8f 93       	push	r24
    4ada:	bf 92       	push	r11
    4adc:	af 92       	push	r10
    4ade:	1f 93       	push	r17
    4ae0:	0f 93       	push	r16
    4ae2:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_FlavResis3,(void*)&buffer,6);
    4ae6:	cd bf       	out	0x3d, r28	; 61
    4ae8:	de bf       	out	0x3e, r29	; 62
    4aea:	46 e0       	ldi	r20, 0x06	; 6
    4aec:	50 e0       	ldi	r21, 0x00	; 0
    4aee:	b8 01       	movw	r22, r16
    4af0:	81 e6       	ldi	r24, 0x61	; 97
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%5lu",&cal.FlavrVal3);
    4af8:	8b e1       	ldi	r24, 0x1B	; 27
    4afa:	93 e5       	ldi	r25, 0x53	; 83
    4afc:	9f 93       	push	r25
    4afe:	8f 93       	push	r24
    4b00:	df 92       	push	r13
    4b02:	cf 92       	push	r12
    4b04:	1f 93       	push	r17
    4b06:	0f 93       	push	r16
    4b08:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_FlavName4,(void*)&buffer,4);
    4b0c:	44 e0       	ldi	r20, 0x04	; 4
    4b0e:	50 e0       	ldi	r21, 0x00	; 0
    4b10:	b8 01       	movw	r22, r16
    4b12:	87 e6       	ldi	r24, 0x67	; 103
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%3s",cal.FlavrName4);									// don't need "&" when it is the beginning of a string. 
    4b1a:	8f e1       	ldi	r24, 0x1F	; 31
    4b1c:	93 e5       	ldi	r25, 0x53	; 83
    4b1e:	9f 93       	push	r25
    4b20:	8f 93       	push	r24
    4b22:	bf 92       	push	r11
    4b24:	af 92       	push	r10
    4b26:	1f 93       	push	r17
    4b28:	0f 93       	push	r16
    4b2a:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_FlavResis4,(void*)&buffer,6);
    4b2e:	46 e0       	ldi	r20, 0x06	; 6
    4b30:	50 e0       	ldi	r21, 0x00	; 0
    4b32:	b8 01       	movw	r22, r16
    4b34:	8c e6       	ldi	r24, 0x6C	; 108
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%5lu",&cal.FlavrVal4);
    4b3c:	83 e2       	ldi	r24, 0x23	; 35
    4b3e:	93 e5       	ldi	r25, 0x53	; 83
    4b40:	9f 93       	push	r25
    4b42:	8f 93       	push	r24
    4b44:	df 92       	push	r13
    4b46:	cf 92       	push	r12
    4b48:	1f 93       	push	r17
    4b4a:	0f 93       	push	r16
    4b4c:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_Thermistor_Offset,(void*)&buffer,4);
    4b50:	44 e0       	ldi	r20, 0x04	; 4
    4b52:	50 e0       	ldi	r21, 0x00	; 0
    4b54:	b8 01       	movw	r22, r16
    4b56:	82 e7       	ldi	r24, 0x72	; 114
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%d",&cal.SYBT_Therm_Offst);
    4b5e:	8d ec       	ldi	r24, 0xCD	; 205
    4b60:	92 e5       	ldi	r25, 0x52	; 82
    4b62:	9f 93       	push	r25
    4b64:	8f 93       	push	r24
    4b66:	0f 2e       	mov	r0, r31
    4b68:	f4 e1       	ldi	r31, 0x14	; 20
    4b6a:	cf 2e       	mov	r12, r31
    4b6c:	f0 e4       	ldi	r31, 0x40	; 64
    4b6e:	df 2e       	mov	r13, r31
    4b70:	f0 2d       	mov	r31, r0
    4b72:	df 92       	push	r13
    4b74:	cf 92       	push	r12
    4b76:	1f 93       	push	r17
    4b78:	0f 93       	push	r16
    4b7a:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_Int_Thermistor_Offset,(void*)&buffer,4);
    4b7e:	44 e0       	ldi	r20, 0x04	; 4
    4b80:	50 e0       	ldi	r21, 0x00	; 0
    4b82:	b8 01       	movw	r22, r16
    4b84:	8c e7       	ldi	r24, 0x7C	; 124
    4b86:	90 e0       	ldi	r25, 0x00	; 0
    4b88:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%d",&cal.Intrnl_Therm_Offst);
    4b8c:	85 ee       	ldi	r24, 0xE5	; 229
    4b8e:	92 e5       	ldi	r25, 0x52	; 82
    4b90:	9f 93       	push	r25
    4b92:	8f 93       	push	r24
    4b94:	df 92       	push	r13
    4b96:	cf 92       	push	r12
    4b98:	1f 93       	push	r17
    4b9a:	0f 93       	push	r16
    4b9c:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_Int_Thermistor1,(void*)&buffer,20);
    4ba0:	44 e1       	ldi	r20, 0x14	; 20
    4ba2:	50 e0       	ldi	r21, 0x00	; 0
    4ba4:	b8 01       	movw	r22, r16
    4ba6:	86 e8       	ldi	r24, 0x86	; 134
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%lf",&cal.Int_Thermist1_cal);
    4bae:	89 ed       	ldi	r24, 0xD9	; 217
    4bb0:	92 e5       	ldi	r25, 0x52	; 82
    4bb2:	9f 93       	push	r25
    4bb4:	8f 93       	push	r24
    4bb6:	0f 2e       	mov	r0, r31
    4bb8:	f4 e8       	ldi	r31, 0x84	; 132
    4bba:	af 2e       	mov	r10, r31
    4bbc:	f4 e4       	ldi	r31, 0x44	; 68
    4bbe:	bf 2e       	mov	r11, r31
    4bc0:	f0 2d       	mov	r31, r0
    4bc2:	bf 92       	push	r11
    4bc4:	af 92       	push	r10
    4bc6:	1f 93       	push	r17
    4bc8:	0f 93       	push	r16
    4bca:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_Int_Thermistor2,(void*)&buffer,20);
    4bce:	cd bf       	out	0x3d, r28	; 61
    4bd0:	de bf       	out	0x3e, r29	; 62
    4bd2:	44 e1       	ldi	r20, 0x14	; 20
    4bd4:	50 e0       	ldi	r21, 0x00	; 0
    4bd6:	b8 01       	movw	r22, r16
    4bd8:	8a e9       	ldi	r24, 0x9A	; 154
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%lf",&cal.Int_Thermist2_cal);
    4be0:	8d ed       	ldi	r24, 0xDD	; 221
    4be2:	92 e5       	ldi	r25, 0x52	; 82
    4be4:	9f 93       	push	r25
    4be6:	8f 93       	push	r24
    4be8:	bf 92       	push	r11
    4bea:	af 92       	push	r10
    4bec:	1f 93       	push	r17
    4bee:	0f 93       	push	r16
    4bf0:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_Int_Thermistor3,(void*)&buffer,20);
    4bf4:	44 e1       	ldi	r20, 0x14	; 20
    4bf6:	50 e0       	ldi	r21, 0x00	; 0
    4bf8:	b8 01       	movw	r22, r16
    4bfa:	8e ea       	ldi	r24, 0xAE	; 174
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%lf",&cal.Int_Thermist3_cal);
    4c02:	81 ee       	ldi	r24, 0xE1	; 225
    4c04:	92 e5       	ldi	r25, 0x52	; 82
    4c06:	9f 93       	push	r25
    4c08:	8f 93       	push	r24
    4c0a:	bf 92       	push	r11
    4c0c:	af 92       	push	r10
    4c0e:	1f 93       	push	r17
    4c10:	0f 93       	push	r16
    4c12:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_Thermistor1,(void*)&buffer,20);
    4c16:	44 e1       	ldi	r20, 0x14	; 20
    4c18:	50 e0       	ldi	r21, 0x00	; 0
    4c1a:	b8 01       	movw	r22, r16
    4c1c:	82 ec       	ldi	r24, 0xC2	; 194
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%lf",&cal.Thermist1_cal);
    4c24:	81 ec       	ldi	r24, 0xC1	; 193
    4c26:	92 e5       	ldi	r25, 0x52	; 82
    4c28:	9f 93       	push	r25
    4c2a:	8f 93       	push	r24
    4c2c:	bf 92       	push	r11
    4c2e:	af 92       	push	r10
    4c30:	1f 93       	push	r17
    4c32:	0f 93       	push	r16
    4c34:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_Thermistor2,(void*)&buffer,20);
    4c38:	44 e1       	ldi	r20, 0x14	; 20
    4c3a:	50 e0       	ldi	r21, 0x00	; 0
    4c3c:	b8 01       	movw	r22, r16
    4c3e:	86 ed       	ldi	r24, 0xD6	; 214
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%lf",&cal.Thermist2_cal);
    4c46:	85 ec       	ldi	r24, 0xC5	; 197
    4c48:	92 e5       	ldi	r25, 0x52	; 82
    4c4a:	9f 93       	push	r25
    4c4c:	8f 93       	push	r24
    4c4e:	bf 92       	push	r11
    4c50:	af 92       	push	r10
    4c52:	1f 93       	push	r17
    4c54:	0f 93       	push	r16
    4c56:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_Thermistor3,(void*)&buffer,20);
    4c5a:	44 e1       	ldi	r20, 0x14	; 20
    4c5c:	50 e0       	ldi	r21, 0x00	; 0
    4c5e:	b8 01       	movw	r22, r16
    4c60:	8a ee       	ldi	r24, 0xEA	; 234
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%lf",&cal.Thermist3_cal);
    4c68:	89 ec       	ldi	r24, 0xC9	; 201
    4c6a:	92 e5       	ldi	r25, 0x52	; 82
    4c6c:	9f 93       	push	r25
    4c6e:	8f 93       	push	r24
    4c70:	bf 92       	push	r11
    4c72:	af 92       	push	r10
    4c74:	1f 93       	push	r17
    4c76:	0f 93       	push	r16
    4c78:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_Exponent1,(void*)&buffer,4);
    4c7c:	44 e0       	ldi	r20, 0x04	; 4
    4c7e:	50 e0       	ldi	r21, 0x00	; 0
    4c80:	b8 01       	movw	r22, r16
    4c82:	8a e0       	ldi	r24, 0x0A	; 10
    4c84:	91 e0       	ldi	r25, 0x01	; 1
    4c86:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%d",&cal.Thermist1_Exp);
    4c8a:	8f ec       	ldi	r24, 0xCF	; 207
    4c8c:	92 e5       	ldi	r25, 0x52	; 82
    4c8e:	9f 93       	push	r25
    4c90:	8f 93       	push	r24
    4c92:	df 92       	push	r13
    4c94:	cf 92       	push	r12
    4c96:	1f 93       	push	r17
    4c98:	0f 93       	push	r16
    4c9a:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_Exponent2,(void*)&buffer,4);
    4c9e:	cd bf       	out	0x3d, r28	; 61
    4ca0:	de bf       	out	0x3e, r29	; 62
    4ca2:	44 e0       	ldi	r20, 0x04	; 4
    4ca4:	50 e0       	ldi	r21, 0x00	; 0
    4ca6:	b8 01       	movw	r22, r16
    4ca8:	8e e0       	ldi	r24, 0x0E	; 14
    4caa:	91 e0       	ldi	r25, 0x01	; 1
    4cac:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%d",&cal.Thermist2_Exp);
    4cb0:	81 ed       	ldi	r24, 0xD1	; 209
    4cb2:	92 e5       	ldi	r25, 0x52	; 82
    4cb4:	9f 93       	push	r25
    4cb6:	8f 93       	push	r24
    4cb8:	df 92       	push	r13
    4cba:	cf 92       	push	r12
    4cbc:	1f 93       	push	r17
    4cbe:	0f 93       	push	r16
    4cc0:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_Exponent3,(void*)&buffer,4);
    4cc4:	44 e0       	ldi	r20, 0x04	; 4
    4cc6:	50 e0       	ldi	r21, 0x00	; 0
    4cc8:	b8 01       	movw	r22, r16
    4cca:	82 e1       	ldi	r24, 0x12	; 18
    4ccc:	91 e0       	ldi	r25, 0x01	; 1
    4cce:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%d",&cal.Thermist3_Exp);
    4cd2:	83 ed       	ldi	r24, 0xD3	; 211
    4cd4:	92 e5       	ldi	r25, 0x52	; 82
    4cd6:	9f 93       	push	r25
    4cd8:	8f 93       	push	r24
    4cda:	df 92       	push	r13
    4cdc:	cf 92       	push	r12
    4cde:	1f 93       	push	r17
    4ce0:	0f 93       	push	r16
    4ce2:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_Int_Exponent1,(void*)&buffer,4);
    4ce6:	44 e0       	ldi	r20, 0x04	; 4
    4ce8:	50 e0       	ldi	r21, 0x00	; 0
    4cea:	b8 01       	movw	r22, r16
    4cec:	8e ef       	ldi	r24, 0xFE	; 254
    4cee:	90 e0       	ldi	r25, 0x00	; 0
    4cf0:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%d",&cal.Int_Thermist1_Exp);			 
    4cf4:	87 ee       	ldi	r24, 0xE7	; 231
    4cf6:	92 e5       	ldi	r25, 0x52	; 82
    4cf8:	9f 93       	push	r25
    4cfa:	8f 93       	push	r24
    4cfc:	df 92       	push	r13
    4cfe:	cf 92       	push	r12
    4d00:	1f 93       	push	r17
    4d02:	0f 93       	push	r16
    4d04:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_Int_Exponent2,(void*)&buffer,4);
    4d08:	44 e0       	ldi	r20, 0x04	; 4
    4d0a:	50 e0       	ldi	r21, 0x00	; 0
    4d0c:	b8 01       	movw	r22, r16
    4d0e:	82 e0       	ldi	r24, 0x02	; 2
    4d10:	91 e0       	ldi	r25, 0x01	; 1
    4d12:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%d",&cal.Int_Thermist2_Exp);
    4d16:	89 ee       	ldi	r24, 0xE9	; 233
    4d18:	92 e5       	ldi	r25, 0x52	; 82
    4d1a:	9f 93       	push	r25
    4d1c:	8f 93       	push	r24
    4d1e:	df 92       	push	r13
    4d20:	cf 92       	push	r12
    4d22:	1f 93       	push	r17
    4d24:	0f 93       	push	r16
    4d26:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_Int_Exponent3,(void*)&buffer,4);
    4d2a:	44 e0       	ldi	r20, 0x04	; 4
    4d2c:	50 e0       	ldi	r21, 0x00	; 0
    4d2e:	b8 01       	movw	r22, r16
    4d30:	86 e0       	ldi	r24, 0x06	; 6
    4d32:	91 e0       	ldi	r25, 0x01	; 1
    4d34:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%d",&cal.Int_Thermist3_Exp);
    4d38:	8b ee       	ldi	r24, 0xEB	; 235
    4d3a:	92 e5       	ldi	r25, 0x52	; 82
    4d3c:	9f 93       	push	r25
    4d3e:	8f 93       	push	r24
    4d40:	df 92       	push	r13
    4d42:	cf 92       	push	r12
    4d44:	1f 93       	push	r17
    4d46:	0f 93       	push	r16
    4d48:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
		//FLASH_0_read_eeprom_block(EEPROM_Preference_Bits,(void*)&buffer,2);
		//sscanf(buffer,"%i",&calibration.Preferences);
	FLASH_0_read_eeprom_block(EEPROM_SYBT_Therm_Res_A,(void*)&buffer,4);
    4d4c:	44 e0       	ldi	r20, 0x04	; 4
    4d4e:	50 e0       	ldi	r21, 0x00	; 0
    4d50:	b8 01       	movw	r22, r16
    4d52:	8d e1       	ldi	r24, 0x1D	; 29
    4d54:	91 e0       	ldi	r25, 0x01	; 1
    4d56:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%4d",&cal.Therm_ResA_cal);
    4d5a:	8d eb       	ldi	r24, 0xBD	; 189
    4d5c:	92 e5       	ldi	r25, 0x52	; 82
    4d5e:	9f 93       	push	r25
    4d60:	8f 93       	push	r24
    4d62:	ff 92       	push	r15
    4d64:	ef 92       	push	r14
    4d66:	1f 93       	push	r17
    4d68:	0f 93       	push	r16
    4d6a:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_Therm_Res_B,(void*)&buffer,4);
    4d6e:	cd bf       	out	0x3d, r28	; 61
    4d70:	de bf       	out	0x3e, r29	; 62
    4d72:	44 e0       	ldi	r20, 0x04	; 4
    4d74:	50 e0       	ldi	r21, 0x00	; 0
    4d76:	b8 01       	movw	r22, r16
    4d78:	81 e2       	ldi	r24, 0x21	; 33
    4d7a:	91 e0       	ldi	r25, 0x01	; 1
    4d7c:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%4d",&cal.Therm_ResB_cal);
    4d80:	8f eb       	ldi	r24, 0xBF	; 191
    4d82:	92 e5       	ldi	r25, 0x52	; 82
    4d84:	9f 93       	push	r25
    4d86:	8f 93       	push	r24
    4d88:	ff 92       	push	r15
    4d8a:	ef 92       	push	r14
    4d8c:	1f 93       	push	r17
    4d8e:	0f 93       	push	r16
    4d90:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_Int_Therm_Res_A,(void*)&buffer,4);
    4d94:	44 e0       	ldi	r20, 0x04	; 4
    4d96:	50 e0       	ldi	r21, 0x00	; 0
    4d98:	b8 01       	movw	r22, r16
    4d9a:	85 e2       	ldi	r24, 0x25	; 37
    4d9c:	91 e0       	ldi	r25, 0x01	; 1
    4d9e:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%4d",&cal.Int_Therm_ResA_cal);
    4da2:	85 ed       	ldi	r24, 0xD5	; 213
    4da4:	92 e5       	ldi	r25, 0x52	; 82
    4da6:	9f 93       	push	r25
    4da8:	8f 93       	push	r24
    4daa:	ff 92       	push	r15
    4dac:	ef 92       	push	r14
    4dae:	1f 93       	push	r17
    4db0:	0f 93       	push	r16
    4db2:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_Int_Therm_Res_B,(void*)&buffer,4);
    4db6:	44 e0       	ldi	r20, 0x04	; 4
    4db8:	50 e0       	ldi	r21, 0x00	; 0
    4dba:	b8 01       	movw	r22, r16
    4dbc:	89 e2       	ldi	r24, 0x29	; 41
    4dbe:	91 e0       	ldi	r25, 0x01	; 1
    4dc0:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%4d",&cal.Int_Therm_ResB_cal);
    4dc4:	87 ed       	ldi	r24, 0xD7	; 215
    4dc6:	92 e5       	ldi	r25, 0x52	; 82
    4dc8:	9f 93       	push	r25
    4dca:	8f 93       	push	r24
    4dcc:	ff 92       	push	r15
    4dce:	ef 92       	push	r14
    4dd0:	1f 93       	push	r17
    4dd2:	0f 93       	push	r16
    4dd4:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_6Volt_Battery_Cal,(void*)&buffer,4);
    4dd8:	44 e0       	ldi	r20, 0x04	; 4
    4dda:	50 e0       	ldi	r21, 0x00	; 0
    4ddc:	b8 01       	movw	r22, r16
    4dde:	81 e3       	ldi	r24, 0x31	; 49
    4de0:	91 e0       	ldi	r25, 0x01	; 1
    4de2:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%4d",&cal.Six_V_ad_cal);
    4de6:	85 eb       	ldi	r24, 0xB5	; 181
    4de8:	92 e5       	ldi	r25, 0x52	; 82
    4dea:	9f 93       	push	r25
    4dec:	8f 93       	push	r24
    4dee:	ff 92       	push	r15
    4df0:	ef 92       	push	r14
    4df2:	1f 93       	push	r17
    4df4:	0f 93       	push	r16
    4df6:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_SYBT_Ident_Tolerance,(void*)&buffer,2);
    4dfa:	42 e0       	ldi	r20, 0x02	; 2
    4dfc:	50 e0       	ldi	r21, 0x00	; 0
    4dfe:	b8 01       	movw	r22, r16
    4e00:	8a e3       	ldi	r24, 0x3A	; 58
    4e02:	91 e0       	ldi	r25, 0x01	; 1
    4e04:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%2d",&cal.SYBT_Idnt_Tolrnc);
    4e08:	83 e3       	ldi	r24, 0x33	; 51
    4e0a:	93 e5       	ldi	r25, 0x53	; 83
    4e0c:	9f 93       	push	r25
    4e0e:	8f 93       	push	r24
    4e10:	0f 2e       	mov	r0, r31
    4e12:	f8 e8       	ldi	r31, 0x88	; 136
    4e14:	af 2e       	mov	r10, r31
    4e16:	f4 e4       	ldi	r31, 0x44	; 68
    4e18:	bf 2e       	mov	r11, r31
    4e1a:	f0 2d       	mov	r31, r0
    4e1c:	bf 92       	push	r11
    4e1e:	af 92       	push	r10
    4e20:	1f 93       	push	r17
    4e22:	0f 93       	push	r16
    4e24:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_LoadTestTolerance_A,(void*)&buffer,3);
    4e28:	43 e0       	ldi	r20, 0x03	; 3
    4e2a:	50 e0       	ldi	r21, 0x00	; 0
    4e2c:	b8 01       	movw	r22, r16
    4e2e:	8d e3       	ldi	r24, 0x3D	; 61
    4e30:	91 e0       	ldi	r25, 0x01	; 1
    4e32:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%3d",&cal.LoadTestTolerance_A);
    4e36:	85 e3       	ldi	r24, 0x35	; 53
    4e38:	93 e5       	ldi	r25, 0x53	; 83
    4e3a:	9f 93       	push	r25
    4e3c:	8f 93       	push	r24
    4e3e:	8c e8       	ldi	r24, 0x8C	; 140
    4e40:	94 e4       	ldi	r25, 0x44	; 68
    4e42:	9f 93       	push	r25
    4e44:	8f 93       	push	r24
    4e46:	1f 93       	push	r17
    4e48:	0f 93       	push	r16
    4e4a:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_LoadTestTolerance_B,(void*)&buffer,2);
    4e4e:	cd bf       	out	0x3d, r28	; 61
    4e50:	de bf       	out	0x3e, r29	; 62
    4e52:	42 e0       	ldi	r20, 0x02	; 2
    4e54:	50 e0       	ldi	r21, 0x00	; 0
    4e56:	b8 01       	movw	r22, r16
    4e58:	80 e4       	ldi	r24, 0x40	; 64
    4e5a:	91 e0       	ldi	r25, 0x01	; 1
    4e5c:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%2d",&cal.LoadTestTolerance_B);
    4e60:	87 e3       	ldi	r24, 0x37	; 55
    4e62:	93 e5       	ldi	r25, 0x53	; 83
    4e64:	9f 93       	push	r25
    4e66:	8f 93       	push	r24
    4e68:	bf 92       	push	r11
    4e6a:	af 92       	push	r10
    4e6c:	1f 93       	push	r17
    4e6e:	0f 93       	push	r16
    4e70:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	
	FLASH_0_read_eeprom_block(EEPROM_HS_Therm_Res_A,(void*)&buffer,4);
    4e74:	44 e0       	ldi	r20, 0x04	; 4
    4e76:	50 e0       	ldi	r21, 0x00	; 0
    4e78:	b8 01       	movw	r22, r16
    4e7a:	85 e8       	ldi	r24, 0x85	; 133
    4e7c:	91 e0       	ldi	r25, 0x01	; 1
    4e7e:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%4d",&cal.HS_Therm_ResA_cal);
    4e82:	8d ee       	ldi	r24, 0xED	; 237
    4e84:	92 e5       	ldi	r25, 0x52	; 82
    4e86:	9f 93       	push	r25
    4e88:	8f 93       	push	r24
    4e8a:	ff 92       	push	r15
    4e8c:	ef 92       	push	r14
    4e8e:	1f 93       	push	r17
    4e90:	0f 93       	push	r16
    4e92:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_HS_Therm_Res_B,(void*)&buffer,4);
    4e96:	44 e0       	ldi	r20, 0x04	; 4
    4e98:	50 e0       	ldi	r21, 0x00	; 0
    4e9a:	b8 01       	movw	r22, r16
    4e9c:	89 e8       	ldi	r24, 0x89	; 137
    4e9e:	91 e0       	ldi	r25, 0x01	; 1
    4ea0:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%4d",&cal.HS_Therm_ResB_cal);
    4ea4:	8f ee       	ldi	r24, 0xEF	; 239
    4ea6:	92 e5       	ldi	r25, 0x52	; 82
    4ea8:	9f 93       	push	r25
    4eaa:	8f 93       	push	r24
    4eac:	ff 92       	push	r15
    4eae:	ef 92       	push	r14
    4eb0:	1f 93       	push	r17
    4eb2:	0f 93       	push	r16
    4eb4:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_HS_Exponent1,(void*)&buffer,4);
    4eb8:	44 e0       	ldi	r20, 0x04	; 4
    4eba:	50 e0       	ldi	r21, 0x00	; 0
    4ebc:	b8 01       	movw	r22, r16
    4ebe:	89 e7       	ldi	r24, 0x79	; 121
    4ec0:	91 e0       	ldi	r25, 0x01	; 1
    4ec2:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%d",&cal.HS_Thermist1_Exp);
    4ec6:	8f ef       	ldi	r24, 0xFF	; 255
    4ec8:	92 e5       	ldi	r25, 0x52	; 82
    4eca:	9f 93       	push	r25
    4ecc:	8f 93       	push	r24
    4ece:	df 92       	push	r13
    4ed0:	cf 92       	push	r12
    4ed2:	1f 93       	push	r17
    4ed4:	0f 93       	push	r16
    4ed6:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_HS_Exponent2,(void*)&buffer,4);
    4eda:	44 e0       	ldi	r20, 0x04	; 4
    4edc:	50 e0       	ldi	r21, 0x00	; 0
    4ede:	b8 01       	movw	r22, r16
    4ee0:	8d e7       	ldi	r24, 0x7D	; 125
    4ee2:	91 e0       	ldi	r25, 0x01	; 1
    4ee4:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%d",&cal.HS_Thermist2_Exp);
    4ee8:	81 e0       	ldi	r24, 0x01	; 1
    4eea:	93 e5       	ldi	r25, 0x53	; 83
    4eec:	9f 93       	push	r25
    4eee:	8f 93       	push	r24
    4ef0:	df 92       	push	r13
    4ef2:	cf 92       	push	r12
    4ef4:	1f 93       	push	r17
    4ef6:	0f 93       	push	r16
    4ef8:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_HS_Exponent3,(void*)&buffer,4);
    4efc:	44 e0       	ldi	r20, 0x04	; 4
    4efe:	50 e0       	ldi	r21, 0x00	; 0
    4f00:	b8 01       	movw	r22, r16
    4f02:	81 e8       	ldi	r24, 0x81	; 129
    4f04:	91 e0       	ldi	r25, 0x01	; 1
    4f06:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%d",&cal.HS_Thermist3_Exp);
    4f0a:	83 e0       	ldi	r24, 0x03	; 3
    4f0c:	93 e5       	ldi	r25, 0x53	; 83
    4f0e:	9f 93       	push	r25
    4f10:	8f 93       	push	r24
    4f12:	df 92       	push	r13
    4f14:	cf 92       	push	r12
    4f16:	1f 93       	push	r17
    4f18:	0f 93       	push	r16
    4f1a:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	FLASH_0_read_eeprom_block(EEPROM_HS_Thermistor_Offset,(void*)&buffer,4);
    4f1e:	cd bf       	out	0x3d, r28	; 61
    4f20:	de bf       	out	0x3e, r29	; 62
    4f22:	44 e0       	ldi	r20, 0x04	; 4
    4f24:	50 e0       	ldi	r21, 0x00	; 0
    4f26:	b8 01       	movw	r22, r16
    4f28:	83 e4       	ldi	r24, 0x43	; 67
    4f2a:	91 e0       	ldi	r25, 0x01	; 1
    4f2c:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%d",&cal.HS_Thermist_Offset);
    4f30:	8d ef       	ldi	r24, 0xFD	; 253
    4f32:	92 e5       	ldi	r25, 0x52	; 82
    4f34:	9f 93       	push	r25
    4f36:	8f 93       	push	r24
    4f38:	df 92       	push	r13
    4f3a:	cf 92       	push	r12
    4f3c:	1f 93       	push	r17
    4f3e:	0f 93       	push	r16
    4f40:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	
	FLASH_0_read_eeprom_block(EEPROM_LXbattery_AD_Cal,(void*)&buffer,4);
    4f44:	44 e0       	ldi	r20, 0x04	; 4
    4f46:	50 e0       	ldi	r21, 0x00	; 0
    4f48:	b8 01       	movw	r22, r16
    4f4a:	8a ee       	ldi	r24, 0xEA	; 234
    4f4c:	91 e0       	ldi	r25, 0x01	; 1
    4f4e:	0e 94 69 34 	call	0x68d2	; 0x68d2 <FLASH_0_read_eeprom_block>
	sscanf(buffer,"%4d",&cal.LXvoltage_cal);
    4f52:	83 e4       	ldi	r24, 0x43	; 67
    4f54:	93 e5       	ldi	r25, 0x53	; 83
    4f56:	9f 93       	push	r25
    4f58:	8f 93       	push	r24
    4f5a:	ff 92       	push	r15
    4f5c:	ef 92       	push	r14
    4f5e:	1f 93       	push	r17
    4f60:	0f 93       	push	r16
    4f62:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <sscanf>
	
	RestoreSleepSettings();									//separated out so it can be used to restore value after exiting demo mode
    4f66:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <RestoreSleepSettings>
//		sscanf(buffer,"%s",&Firmware_Version);
			  
				 //sscanf(buffer,"CA1%i",&temp3);
		//if (!(EEPROMstatus & EEPROM_SYBT_AD_STAT))calibration.SYBT_ad_cal = FLASH_0_read_eeprom_byte(EEPROM_SYBT_AD_Cal);
		//if (!(EEPROMstatus & EEPROM_SYBT_AD_STAT))FLASH_0_write_eeprom_byte(EEPROM_SYBT_AD_Cal, 57);
return true;	
    4f6a:	cd bf       	out	0x3d, r28	; 61
    4f6c:	de bf       	out	0x3e, r29	; 62
}
    4f6e:	81 e0       	ldi	r24, 0x01	; 1
    4f70:	6e 96       	adiw	r28, 0x1e	; 30
    4f72:	cd bf       	out	0x3d, r28	; 61
    4f74:	de bf       	out	0x3e, r29	; 62
    4f76:	df 91       	pop	r29
    4f78:	cf 91       	pop	r28
    4f7a:	1f 91       	pop	r17
    4f7c:	0f 91       	pop	r16
    4f7e:	ff 90       	pop	r15
    4f80:	ef 90       	pop	r14
    4f82:	df 90       	pop	r13
    4f84:	cf 90       	pop	r12
    4f86:	bf 90       	pop	r11
    4f88:	af 90       	pop	r10
    4f8a:	08 95       	ret

00004f8c <SendDataToLEDdrivers>:
	uint16_t RawHSTempData;
	
	RawHSTempData = (ADC_0_get_conversion(ADC_HS) >> 2);				// first get raw numbers from AD converter
	//tempIntTemperature = (((float)RawIntTempData * (float)ptrCal->Int_Therm_ResA_cal)/((float)ptrCal->Int_Therm_ResB_cal- (float)RawIntTempData));
	ptrSYBT->HeatSinkTemp = ConvertToTemperature((((float)RawHSTempData * (float)ptrCal->HS_Therm_ResA_cal)/((float)ptrCal->HS_Therm_ResB_cal- (float)RawHSTempData))) + cal.HS_Thermist_Offset;	
}
    4f8c:	9f 92       	push	r9
    4f8e:	af 92       	push	r10
    4f90:	bf 92       	push	r11
    4f92:	cf 92       	push	r12
    4f94:	df 92       	push	r13
    4f96:	ef 92       	push	r14
    4f98:	ff 92       	push	r15
    4f9a:	0f 93       	push	r16
    4f9c:	1f 93       	push	r17
    4f9e:	cf 93       	push	r28
    4fa0:	df 93       	push	r29
    4fa2:	cd b7       	in	r28, 0x3d	; 61
    4fa4:	de b7       	in	r29, 0x3e	; 62
    4fa6:	6e 97       	sbiw	r28, 0x1e	; 30
    4fa8:	cd bf       	out	0x3d, r28	; 61
    4faa:	de bf       	out	0x3e, r29	; 62
    4fac:	80 91 ba 54 	lds	r24, 0x54BA	; 0x8054ba <ATTINYTimer>
    4fb0:	90 91 bb 54 	lds	r25, 0x54BB	; 0x8054bb <ATTINYTimer+0x1>
    4fb4:	a0 91 bc 54 	lds	r26, 0x54BC	; 0x8054bc <ATTINYTimer+0x2>
    4fb8:	b0 91 bd 54 	lds	r27, 0x54BD	; 0x8054bd <ATTINYTimer+0x3>
    4fbc:	81 3d       	cpi	r24, 0xD1	; 209
    4fbe:	97 40       	sbci	r25, 0x07	; 7
    4fc0:	a1 05       	cpc	r26, r1
    4fc2:	b1 05       	cpc	r27, r1
    4fc4:	08 f4       	brcc	.+2      	; 0x4fc8 <SendDataToLEDdrivers+0x3c>
    4fc6:	b5 c0       	rjmp	.+362    	; 0x5132 <SendDataToLEDdrivers+0x1a6>
    4fc8:	0f 2e       	mov	r0, r31
    4fca:	fe e1       	ldi	r31, 0x1E	; 30
    4fcc:	9f 2e       	mov	r9, r31
    4fce:	f0 2d       	mov	r31, r0
    4fd0:	8e 01       	movw	r16, r28
    4fd2:	0f 5f       	subi	r16, 0xFF	; 255
    4fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    4fd6:	d8 01       	movw	r26, r16
    4fd8:	e9 2d       	mov	r30, r9
    4fda:	1d 92       	st	X+, r1
    4fdc:	ea 95       	dec	r30
    4fde:	e9 f7       	brne	.-6      	; 0x4fda <SendDataToLEDdrivers+0x4e>
    4fe0:	0f 2e       	mov	r0, r31
    4fe2:	fe e5       	ldi	r31, 0x5E	; 94
    4fe4:	ef 2e       	mov	r14, r31
    4fe6:	f4 e5       	ldi	r31, 0x54	; 84
    4fe8:	ff 2e       	mov	r15, r31
    4fea:	f0 2d       	mov	r31, r0
    4fec:	d7 01       	movw	r26, r14
    4fee:	12 96       	adiw	r26, 0x02	; 2
    4ff0:	ec 91       	ld	r30, X
    4ff2:	12 97       	sbiw	r26, 0x02	; 2
    4ff4:	11 96       	adiw	r26, 0x01	; 1
    4ff6:	7c 91       	ld	r23, X
    4ff8:	11 97       	sbiw	r26, 0x01	; 1
    4ffa:	6c 91       	ld	r22, X
    4ffc:	0f 2e       	mov	r0, r31
    4ffe:	f1 e6       	ldi	r31, 0x61	; 97
    5000:	cf 2e       	mov	r12, r31
    5002:	f3 e5       	ldi	r31, 0x53	; 83
    5004:	df 2e       	mov	r13, r31
    5006:	f0 2d       	mov	r31, r0
    5008:	d6 01       	movw	r26, r12
    500a:	12 96       	adiw	r26, 0x02	; 2
    500c:	5c 91       	ld	r21, X
    500e:	12 97       	sbiw	r26, 0x02	; 2
    5010:	11 96       	adiw	r26, 0x01	; 1
    5012:	4c 91       	ld	r20, X
    5014:	11 97       	sbiw	r26, 0x01	; 1
    5016:	3c 91       	ld	r19, X
    5018:	0f 2e       	mov	r0, r31
    501a:	f2 e5       	ldi	r31, 0x52	; 82
    501c:	af 2e       	mov	r10, r31
    501e:	f8 e4       	ldi	r31, 0x48	; 72
    5020:	bf 2e       	mov	r11, r31
    5022:	f0 2d       	mov	r31, r0
    5024:	d5 01       	movw	r26, r10
    5026:	12 96       	adiw	r26, 0x02	; 2
    5028:	2c 91       	ld	r18, X
    502a:	12 97       	sbiw	r26, 0x02	; 2
    502c:	11 96       	adiw	r26, 0x01	; 1
    502e:	9c 91       	ld	r25, X
    5030:	11 97       	sbiw	r26, 0x01	; 1
    5032:	8c 91       	ld	r24, X
    5034:	1f 92       	push	r1
    5036:	ef 93       	push	r30
    5038:	1f 92       	push	r1
    503a:	7f 93       	push	r23
    503c:	1f 92       	push	r1
    503e:	6f 93       	push	r22
    5040:	1f 92       	push	r1
    5042:	5f 93       	push	r21
    5044:	1f 92       	push	r1
    5046:	4f 93       	push	r20
    5048:	1f 92       	push	r1
    504a:	3f 93       	push	r19
    504c:	1f 92       	push	r1
    504e:	2f 93       	push	r18
    5050:	1f 92       	push	r1
    5052:	9f 93       	push	r25
    5054:	1f 92       	push	r1
    5056:	8f 93       	push	r24
    5058:	80 e9       	ldi	r24, 0x90	; 144
    505a:	94 e4       	ldi	r25, 0x44	; 68
    505c:	9f 93       	push	r25
    505e:	8f 93       	push	r24
    5060:	1f 93       	push	r17
    5062:	0f 93       	push	r16
    5064:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    5068:	f8 01       	movw	r30, r16
    506a:	29 2d       	mov	r18, r9
    506c:	11 92       	st	Z+, r1
    506e:	2a 95       	dec	r18
    5070:	e9 f7       	brne	.-6      	; 0x506c <SendDataToLEDdrivers+0xe0>
    5072:	d5 01       	movw	r26, r10
    5074:	12 96       	adiw	r26, 0x02	; 2
    5076:	2c 91       	ld	r18, X
    5078:	12 97       	sbiw	r26, 0x02	; 2
    507a:	11 96       	adiw	r26, 0x01	; 1
    507c:	9c 91       	ld	r25, X
    507e:	11 97       	sbiw	r26, 0x01	; 1
    5080:	8c 91       	ld	r24, X
    5082:	1f 92       	push	r1
    5084:	2f 93       	push	r18
    5086:	1f 92       	push	r1
    5088:	9f 93       	push	r25
    508a:	1f 92       	push	r1
    508c:	8f 93       	push	r24
    508e:	8f ea       	ldi	r24, 0xAF	; 175
    5090:	94 e4       	ldi	r25, 0x44	; 68
    5092:	9f 93       	push	r25
    5094:	8f 93       	push	r24
    5096:	1f 93       	push	r17
    5098:	0f 93       	push	r16
    509a:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    509e:	cd bf       	out	0x3d, r28	; 61
    50a0:	de bf       	out	0x3e, r29	; 62
    50a2:	c8 01       	movw	r24, r16
    50a4:	0e 94 4c 1a 	call	0x3498	; 0x3498 <USART3_sendString>
    50a8:	d8 01       	movw	r26, r16
    50aa:	e9 2d       	mov	r30, r9
    50ac:	1d 92       	st	X+, r1
    50ae:	ea 95       	dec	r30
    50b0:	e9 f7       	brne	.-6      	; 0x50ac <SendDataToLEDdrivers+0x120>
    50b2:	d6 01       	movw	r26, r12
    50b4:	12 96       	adiw	r26, 0x02	; 2
    50b6:	2c 91       	ld	r18, X
    50b8:	12 97       	sbiw	r26, 0x02	; 2
    50ba:	11 96       	adiw	r26, 0x01	; 1
    50bc:	9c 91       	ld	r25, X
    50be:	11 97       	sbiw	r26, 0x01	; 1
    50c0:	8c 91       	ld	r24, X
    50c2:	1f 92       	push	r1
    50c4:	2f 93       	push	r18
    50c6:	1f 92       	push	r1
    50c8:	9f 93       	push	r25
    50ca:	1f 92       	push	r1
    50cc:	8f 93       	push	r24
    50ce:	8a eb       	ldi	r24, 0xBA	; 186
    50d0:	94 e4       	ldi	r25, 0x44	; 68
    50d2:	9f 93       	push	r25
    50d4:	8f 93       	push	r24
    50d6:	1f 93       	push	r17
    50d8:	0f 93       	push	r16
    50da:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    50de:	c8 01       	movw	r24, r16
    50e0:	0e 94 4c 1a 	call	0x3498	; 0x3498 <USART3_sendString>
    50e4:	f8 01       	movw	r30, r16
    50e6:	11 92       	st	Z+, r1
    50e8:	9a 94       	dec	r9
    50ea:	e9 f7       	brne	.-6      	; 0x50e6 <SendDataToLEDdrivers+0x15a>
    50ec:	d7 01       	movw	r26, r14
    50ee:	12 96       	adiw	r26, 0x02	; 2
    50f0:	2c 91       	ld	r18, X
    50f2:	12 97       	sbiw	r26, 0x02	; 2
    50f4:	11 96       	adiw	r26, 0x01	; 1
    50f6:	9c 91       	ld	r25, X
    50f8:	11 97       	sbiw	r26, 0x01	; 1
    50fa:	8c 91       	ld	r24, X
    50fc:	1f 92       	push	r1
    50fe:	2f 93       	push	r18
    5100:	1f 92       	push	r1
    5102:	9f 93       	push	r25
    5104:	1f 92       	push	r1
    5106:	8f 93       	push	r24
    5108:	84 ea       	ldi	r24, 0xA4	; 164
    510a:	94 e4       	ldi	r25, 0x44	; 68
    510c:	9f 93       	push	r25
    510e:	8f 93       	push	r24
    5110:	1f 93       	push	r17
    5112:	0f 93       	push	r16
    5114:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    5118:	c8 01       	movw	r24, r16
    511a:	0e 94 4c 1a 	call	0x3498	; 0x3498 <USART3_sendString>
    511e:	10 92 ba 54 	sts	0x54BA, r1	; 0x8054ba <ATTINYTimer>
    5122:	10 92 bb 54 	sts	0x54BB, r1	; 0x8054bb <ATTINYTimer+0x1>
    5126:	10 92 bc 54 	sts	0x54BC, r1	; 0x8054bc <ATTINYTimer+0x2>
    512a:	10 92 bd 54 	sts	0x54BD, r1	; 0x8054bd <ATTINYTimer+0x3>
    512e:	cd bf       	out	0x3d, r28	; 61
    5130:	de bf       	out	0x3e, r29	; 62
    5132:	6e 96       	adiw	r28, 0x1e	; 30
    5134:	cd bf       	out	0x3d, r28	; 61
    5136:	de bf       	out	0x3e, r29	; 62
    5138:	df 91       	pop	r29
    513a:	cf 91       	pop	r28
    513c:	1f 91       	pop	r17
    513e:	0f 91       	pop	r16
    5140:	ff 90       	pop	r15
    5142:	ef 90       	pop	r14
    5144:	df 90       	pop	r13
    5146:	cf 90       	pop	r12
    5148:	bf 90       	pop	r11
    514a:	af 90       	pop	r10
    514c:	9f 90       	pop	r9
    514e:	08 95       	ret

00005150 <MeasureSYBTvolts>:
    5150:	cf 92       	push	r12
    5152:	df 92       	push	r13
    5154:	ef 92       	push	r14
    5156:	ff 92       	push	r15
    5158:	0f 93       	push	r16
    515a:	1f 93       	push	r17
    515c:	cf 93       	push	r28
    515e:	df 93       	push	r29
    5160:	8c 01       	movw	r16, r24
    5162:	eb 01       	movw	r28, r22
    5164:	60 91 b1 52 	lds	r22, 0x52B1	; 0x8052b1 <cal+0x4>
    5168:	70 91 b2 52 	lds	r23, 0x52B2	; 0x8052b2 <cal+0x5>
    516c:	07 2e       	mov	r0, r23
    516e:	00 0c       	add	r0, r0
    5170:	88 0b       	sbc	r24, r24
    5172:	99 0b       	sbc	r25, r25
    5174:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    5178:	20 e0       	ldi	r18, 0x00	; 0
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	4a e7       	ldi	r20, 0x7A	; 122
    517e:	54 e4       	ldi	r21, 0x44	; 68
    5180:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    5184:	6b 01       	movw	r12, r22
    5186:	7c 01       	movw	r14, r24
    5188:	88 e0       	ldi	r24, 0x08	; 8
    518a:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    518e:	96 95       	lsr	r25
    5190:	87 95       	ror	r24
    5192:	96 95       	lsr	r25
    5194:	87 95       	ror	r24
    5196:	bc 01       	movw	r22, r24
    5198:	80 e0       	ldi	r24, 0x00	; 0
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    51a0:	a7 01       	movw	r20, r14
    51a2:	96 01       	movw	r18, r12
    51a4:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    51a8:	20 e0       	ldi	r18, 0x00	; 0
    51aa:	30 e0       	ldi	r19, 0x00	; 0
    51ac:	40 e2       	ldi	r20, 0x20	; 32
    51ae:	51 e4       	ldi	r21, 0x41	; 65
    51b0:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    51b4:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    51b8:	60 93 7b 48 	sts	0x487B, r22	; 0x80487b <array_SYBT+0x1a>
    51bc:	70 93 7c 48 	sts	0x487C, r23	; 0x80487c <array_SYBT+0x1b>
    51c0:	6b 35       	cpi	r22, 0x5B	; 91
    51c2:	71 05       	cpc	r23, r1
    51c4:	6c f0       	brlt	.+26     	; 0x51e0 <MeasureSYBTvolts+0x90>
    51c6:	8d b1       	in	r24, 0x0d	; 13
    51c8:	80 68       	ori	r24, 0x80	; 128
    51ca:	8d b9       	out	0x0d, r24	; 13
    51cc:	81 e0       	ldi	r24, 0x01	; 1
    51ce:	f8 01       	movw	r30, r16
    51d0:	80 83       	st	Z, r24
    51d2:	80 91 5d 54 	lds	r24, 0x545D	; 0x80545d <Rows>
    51d6:	80 68       	ori	r24, 0x80	; 128
    51d8:	80 93 5d 54 	sts	0x545D, r24	; 0x80545d <Rows>
    51dc:	11 e0       	ldi	r17, 0x01	; 1
    51de:	0c c0       	rjmp	.+24     	; 0x51f8 <MeasureSYBTvolts+0xa8>
    51e0:	8d b1       	in	r24, 0x0d	; 13
    51e2:	8f 77       	andi	r24, 0x7F	; 127
    51e4:	8d b9       	out	0x0d, r24	; 13
    51e6:	f8 01       	movw	r30, r16
    51e8:	10 82       	st	Z, r1
    51ea:	80 91 5d 54 	lds	r24, 0x545D	; 0x80545d <Rows>
    51ee:	80 68       	ori	r24, 0x80	; 128
    51f0:	80 58       	subi	r24, 0x80	; 128
    51f2:	80 93 5d 54 	sts	0x545D, r24	; 0x80545d <Rows>
    51f6:	10 e0       	ldi	r17, 0x00	; 0
    51f8:	80 91 7b 48 	lds	r24, 0x487B	; 0x80487b <array_SYBT+0x1a>
    51fc:	90 91 7c 48 	lds	r25, 0x487C	; 0x80487c <array_SYBT+0x1b>
    5200:	03 97       	sbiw	r24, 0x03	; 3
    5202:	05 97       	sbiw	r24, 0x05	; 5
    5204:	d0 f4       	brcc	.+52     	; 0x523a <MeasureSYBTvolts+0xea>
    5206:	81 e0       	ldi	r24, 0x01	; 1
    5208:	80 93 49 48 	sts	0x4849, r24	; 0x804849 <SYBTconnectedButNoBattery>
    520c:	85 b1       	in	r24, 0x05	; 5
    520e:	80 62       	ori	r24, 0x20	; 32
    5210:	85 b9       	out	0x05, r24	; 5
    5212:	81 b3       	in	r24, 0x11	; 17
    5214:	8b 7f       	andi	r24, 0xFB	; 251
    5216:	81 bb       	out	0x11, r24	; 17
    5218:	80 91 48 48 	lds	r24, 0x4848	; 0x804848 <SYBTalreadyConnectedButNoBattery>
    521c:	81 11       	cpse	r24, r1
    521e:	12 c0       	rjmp	.+36     	; 0x5244 <MeasureSYBTvolts+0xf4>
    5220:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
    5224:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
    5228:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
    522c:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>
    5230:	81 e0       	ldi	r24, 0x01	; 1
    5232:	80 93 48 48 	sts	0x4848, r24	; 0x804848 <SYBTalreadyConnectedButNoBattery>
    5236:	11 e0       	ldi	r17, 0x01	; 1
    5238:	06 c0       	rjmp	.+12     	; 0x5246 <MeasureSYBTvolts+0xf6>
    523a:	10 92 49 48 	sts	0x4849, r1	; 0x804849 <SYBTconnectedButNoBattery>
    523e:	10 92 48 48 	sts	0x4848, r1	; 0x804848 <SYBTalreadyConnectedButNoBattery>
    5242:	01 c0       	rjmp	.+2      	; 0x5246 <MeasureSYBTvolts+0xf6>
    5244:	11 e0       	ldi	r17, 0x01	; 1
    5246:	11 11       	cpse	r17, r1
    5248:	04 c0       	rjmp	.+8      	; 0x5252 <MeasureSYBTvolts+0x102>
    524a:	80 91 49 48 	lds	r24, 0x4849	; 0x804849 <SYBTconnectedButNoBattery>
    524e:	88 23       	and	r24, r24
    5250:	81 f1       	breq	.+96     	; 0x52b2 <MeasureSYBTvolts+0x162>
    5252:	0f 2e       	mov	r0, r31
    5254:	f1 e6       	ldi	r31, 0x61	; 97
    5256:	cf 2e       	mov	r12, r31
    5258:	f8 e4       	ldi	r31, 0x48	; 72
    525a:	df 2e       	mov	r13, r31
    525c:	f0 2d       	mov	r31, r0
    525e:	f6 01       	movw	r30, r12
    5260:	82 8d       	ldd	r24, Z+26	; 0x1a
    5262:	93 8d       	ldd	r25, Z+27	; 0x1b
    5264:	0f 2e       	mov	r0, r31
    5266:	fa e0       	ldi	r31, 0x0A	; 10
    5268:	ef 2e       	mov	r14, r31
    526a:	f1 2c       	mov	r15, r1
    526c:	f0 2d       	mov	r31, r0
    526e:	b7 01       	movw	r22, r14
    5270:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5274:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    5278:	8a 83       	std	Y+2, r24	; 0x02
    527a:	f6 01       	movw	r30, r12
    527c:	82 8d       	ldd	r24, Z+26	; 0x1a
    527e:	93 8d       	ldd	r25, Z+27	; 0x1b
    5280:	b7 01       	movw	r22, r14
    5282:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5286:	cb 01       	movw	r24, r22
    5288:	b7 01       	movw	r22, r14
    528a:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    528e:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    5292:	89 83       	std	Y+1, r24	; 0x01
    5294:	f6 01       	movw	r30, r12
    5296:	82 8d       	ldd	r24, Z+26	; 0x1a
    5298:	93 8d       	ldd	r25, Z+27	; 0x1b
    529a:	64 e6       	ldi	r22, 0x64	; 100
    529c:	70 e0       	ldi	r23, 0x00	; 0
    529e:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    52a2:	cb 01       	movw	r24, r22
    52a4:	b7 01       	movw	r22, r14
    52a6:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    52aa:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    52ae:	88 83       	st	Y, r24
    52b0:	04 c0       	rjmp	.+8      	; 0x52ba <MeasureSYBTvolts+0x16a>
    52b2:	8d e2       	ldi	r24, 0x2D	; 45
    52b4:	8a 83       	std	Y+2, r24	; 0x02
    52b6:	89 83       	std	Y+1, r24	; 0x01
    52b8:	88 83       	st	Y, r24
    52ba:	81 2f       	mov	r24, r17
    52bc:	df 91       	pop	r29
    52be:	cf 91       	pop	r28
    52c0:	1f 91       	pop	r17
    52c2:	0f 91       	pop	r16
    52c4:	ff 90       	pop	r15
    52c6:	ef 90       	pop	r14
    52c8:	df 90       	pop	r13
    52ca:	cf 90       	pop	r12
    52cc:	08 95       	ret

000052ce <MeasureSYBTresistance>:
    52ce:	8f 92       	push	r8
    52d0:	9f 92       	push	r9
    52d2:	af 92       	push	r10
    52d4:	bf 92       	push	r11
    52d6:	cf 92       	push	r12
    52d8:	df 92       	push	r13
    52da:	ef 92       	push	r14
    52dc:	ff 92       	push	r15
    52de:	0f 93       	push	r16
    52e0:	1f 93       	push	r17
    52e2:	cf 93       	push	r28
    52e4:	df 93       	push	r29
    52e6:	ec 01       	movw	r28, r24
    52e8:	35 9b       	sbis	0x06, 5	; 6
    52ea:	75 c0       	rjmp	.+234    	; 0x53d6 <MeasureSYBTresistance+0x108>
    52ec:	80 91 b0 54 	lds	r24, 0x54B0	; 0x8054b0 <SleepTimer>
    52f0:	90 91 b1 54 	lds	r25, 0x54B1	; 0x8054b1 <SleepTimer+0x1>
    52f4:	a0 91 b2 54 	lds	r26, 0x54B2	; 0x8054b2 <SleepTimer+0x2>
    52f8:	b0 91 b3 54 	lds	r27, 0x54B3	; 0x8054b3 <SleepTimer+0x3>
    52fc:	88 3b       	cpi	r24, 0xB8	; 184
    52fe:	9b 40       	sbci	r25, 0x0B	; 11
    5300:	a1 05       	cpc	r26, r1
    5302:	b1 05       	cpc	r27, r1
    5304:	08 f0       	brcs	.+2      	; 0x5308 <MeasureSYBTresistance+0x3a>
    5306:	67 c0       	rjmp	.+206    	; 0x53d6 <MeasureSYBTresistance+0x108>
    5308:	84 e0       	ldi	r24, 0x04	; 4
    530a:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    530e:	84 e0       	ldi	r24, 0x04	; 4
    5310:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    5314:	96 95       	lsr	r25
    5316:	87 95       	ror	r24
    5318:	96 95       	lsr	r25
    531a:	87 95       	ror	r24
    531c:	bc 01       	movw	r22, r24
    531e:	80 e0       	ldi	r24, 0x00	; 0
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    5326:	6b 01       	movw	r12, r22
    5328:	7c 01       	movw	r14, r24
    532a:	60 93 43 48 	sts	0x4843, r22	; 0x804843 <temp.6164>
    532e:	70 93 44 48 	sts	0x4844, r23	; 0x804844 <temp.6164+0x1>
    5332:	80 93 45 48 	sts	0x4845, r24	; 0x804845 <temp.6164+0x2>
    5336:	90 93 46 48 	sts	0x4846, r25	; 0x804846 <temp.6164+0x3>
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	4a e7       	ldi	r20, 0x7A	; 122
    5340:	54 e4       	ldi	r21, 0x44	; 68
    5342:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <__gesf2>
    5346:	18 16       	cp	r1, r24
    5348:	9c f4       	brge	.+38     	; 0x5370 <MeasureSYBTresistance+0xa2>
    534a:	80 e0       	ldi	r24, 0x00	; 0
    534c:	90 ec       	ldi	r25, 0xC0	; 192
    534e:	a9 e7       	ldi	r26, 0x79	; 121
    5350:	b4 e4       	ldi	r27, 0x44	; 68
    5352:	80 93 43 48 	sts	0x4843, r24	; 0x804843 <temp.6164>
    5356:	90 93 44 48 	sts	0x4844, r25	; 0x804844 <temp.6164+0x1>
    535a:	a0 93 45 48 	sts	0x4845, r26	; 0x804845 <temp.6164+0x2>
    535e:	b0 93 46 48 	sts	0x4846, r27	; 0x804846 <temp.6164+0x3>
    5362:	87 ee       	ldi	r24, 0xE7	; 231
    5364:	93 e0       	ldi	r25, 0x03	; 3
    5366:	80 93 8f 48 	sts	0x488F, r24	; 0x80488f <array_SYBT+0x2e>
    536a:	90 93 90 48 	sts	0x4890, r25	; 0x804890 <array_SYBT+0x2f>
    536e:	4d c0       	rjmp	.+154    	; 0x540a <MeasureSYBTresistance+0x13c>
    5370:	0d ea       	ldi	r16, 0xAD	; 173
    5372:	12 e5       	ldi	r17, 0x52	; 82
    5374:	f8 01       	movw	r30, r16
    5376:	64 85       	ldd	r22, Z+12	; 0x0c
    5378:	75 85       	ldd	r23, Z+13	; 0x0d
    537a:	07 2e       	mov	r0, r23
    537c:	00 0c       	add	r0, r0
    537e:	88 0b       	sbc	r24, r24
    5380:	99 0b       	sbc	r25, r25
    5382:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    5386:	9b 01       	movw	r18, r22
    5388:	ac 01       	movw	r20, r24
    538a:	c7 01       	movw	r24, r14
    538c:	b6 01       	movw	r22, r12
    538e:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    5392:	4b 01       	movw	r8, r22
    5394:	5c 01       	movw	r10, r24
    5396:	f8 01       	movw	r30, r16
    5398:	66 85       	ldd	r22, Z+14	; 0x0e
    539a:	77 85       	ldd	r23, Z+15	; 0x0f
    539c:	07 2e       	mov	r0, r23
    539e:	00 0c       	add	r0, r0
    53a0:	88 0b       	sbc	r24, r24
    53a2:	99 0b       	sbc	r25, r25
    53a4:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    53a8:	a7 01       	movw	r20, r14
    53aa:	96 01       	movw	r18, r12
    53ac:	0e 94 bc 39 	call	0x7378	; 0x7378 <__subsf3>
    53b0:	9b 01       	movw	r18, r22
    53b2:	ac 01       	movw	r20, r24
    53b4:	c5 01       	movw	r24, r10
    53b6:	b4 01       	movw	r22, r8
    53b8:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    53bc:	20 e0       	ldi	r18, 0x00	; 0
    53be:	30 e0       	ldi	r19, 0x00	; 0
    53c0:	40 e2       	ldi	r20, 0x20	; 32
    53c2:	51 e4       	ldi	r21, 0x41	; 65
    53c4:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    53c8:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    53cc:	60 93 8f 48 	sts	0x488F, r22	; 0x80488f <array_SYBT+0x2e>
    53d0:	70 93 90 48 	sts	0x4890, r23	; 0x804890 <array_SYBT+0x2f>
    53d4:	1a c0       	rjmp	.+52     	; 0x540a <MeasureSYBTresistance+0x13c>
    53d6:	80 91 4a 48 	lds	r24, 0x484A	; 0x80484a <SYBTisProvidingPower>
    53da:	81 11       	cpse	r24, r1
    53dc:	16 c0       	rjmp	.+44     	; 0x540a <MeasureSYBTresistance+0x13c>
    53de:	80 91 49 48 	lds	r24, 0x4849	; 0x804849 <SYBTconnectedButNoBattery>
    53e2:	81 11       	cpse	r24, r1
    53e4:	12 c0       	rjmp	.+36     	; 0x540a <MeasureSYBTresistance+0x13c>
    53e6:	87 ee       	ldi	r24, 0xE7	; 231
    53e8:	93 e0       	ldi	r25, 0x03	; 3
    53ea:	80 93 8f 48 	sts	0x488F, r24	; 0x80488f <array_SYBT+0x2e>
    53ee:	90 93 90 48 	sts	0x4890, r25	; 0x804890 <array_SYBT+0x2f>
    53f2:	80 e0       	ldi	r24, 0x00	; 0
    53f4:	90 ec       	ldi	r25, 0xC0	; 192
    53f6:	a9 e7       	ldi	r26, 0x79	; 121
    53f8:	b4 e4       	ldi	r27, 0x44	; 68
    53fa:	80 93 43 48 	sts	0x4843, r24	; 0x804843 <temp.6164>
    53fe:	90 93 44 48 	sts	0x4844, r25	; 0x804844 <temp.6164+0x1>
    5402:	a0 93 45 48 	sts	0x4845, r26	; 0x804845 <temp.6164+0x2>
    5406:	b0 93 46 48 	sts	0x4846, r27	; 0x804846 <temp.6164+0x3>
    540a:	60 91 8f 48 	lds	r22, 0x488F	; 0x80488f <array_SYBT+0x2e>
    540e:	70 91 90 48 	lds	r23, 0x4890	; 0x804890 <array_SYBT+0x2f>
    5412:	07 2e       	mov	r0, r23
    5414:	00 0c       	add	r0, r0
    5416:	88 0b       	sbc	r24, r24
    5418:	99 0b       	sbc	r25, r25
    541a:	4d e5       	ldi	r20, 0x5D	; 93
    541c:	54 e5       	ldi	r21, 0x54	; 84
    541e:	0e 94 8a 1a 	call	0x3514	; 0x3514 <Identify_Battery_Type>
    5422:	81 11       	cpse	r24, r1
    5424:	2c c0       	rjmp	.+88     	; 0x547e <MeasureSYBTresistance+0x1b0>
    5426:	0f 2e       	mov	r0, r31
    5428:	f1 e6       	ldi	r31, 0x61	; 97
    542a:	ef 2e       	mov	r14, r31
    542c:	f8 e4       	ldi	r31, 0x48	; 72
    542e:	ff 2e       	mov	r15, r31
    5430:	f0 2d       	mov	r31, r0
    5432:	f7 01       	movw	r30, r14
    5434:	86 a5       	ldd	r24, Z+46	; 0x2e
    5436:	97 a5       	ldd	r25, Z+47	; 0x2f
    5438:	0a e0       	ldi	r16, 0x0A	; 10
    543a:	10 e0       	ldi	r17, 0x00	; 0
    543c:	b8 01       	movw	r22, r16
    543e:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5442:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    5446:	8a 83       	std	Y+2, r24	; 0x02
    5448:	f7 01       	movw	r30, r14
    544a:	86 a5       	ldd	r24, Z+46	; 0x2e
    544c:	97 a5       	ldd	r25, Z+47	; 0x2f
    544e:	b8 01       	movw	r22, r16
    5450:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5454:	cb 01       	movw	r24, r22
    5456:	b8 01       	movw	r22, r16
    5458:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    545c:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    5460:	89 83       	std	Y+1, r24	; 0x01
    5462:	f7 01       	movw	r30, r14
    5464:	86 a5       	ldd	r24, Z+46	; 0x2e
    5466:	97 a5       	ldd	r25, Z+47	; 0x2f
    5468:	64 e6       	ldi	r22, 0x64	; 100
    546a:	70 e0       	ldi	r23, 0x00	; 0
    546c:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5470:	cb 01       	movw	r24, r22
    5472:	b8 01       	movw	r22, r16
    5474:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5478:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    547c:	88 83       	st	Y, r24
    547e:	60 91 43 48 	lds	r22, 0x4843	; 0x804843 <temp.6164>
    5482:	70 91 44 48 	lds	r23, 0x4844	; 0x804844 <temp.6164+0x1>
    5486:	80 91 45 48 	lds	r24, 0x4845	; 0x804845 <temp.6164+0x2>
    548a:	90 91 46 48 	lds	r25, 0x4846	; 0x804846 <temp.6164+0x3>
    548e:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    5492:	cb 01       	movw	r24, r22
    5494:	df 91       	pop	r29
    5496:	cf 91       	pop	r28
    5498:	1f 91       	pop	r17
    549a:	0f 91       	pop	r16
    549c:	ff 90       	pop	r15
    549e:	ef 90       	pop	r14
    54a0:	df 90       	pop	r13
    54a2:	cf 90       	pop	r12
    54a4:	bf 90       	pop	r11
    54a6:	af 90       	pop	r10
    54a8:	9f 90       	pop	r9
    54aa:	8f 90       	pop	r8
    54ac:	08 95       	ret

000054ae <MeasureSYBTtemperature>:
    54ae:	2f 92       	push	r2
    54b0:	3f 92       	push	r3
    54b2:	4f 92       	push	r4
    54b4:	5f 92       	push	r5
    54b6:	6f 92       	push	r6
    54b8:	7f 92       	push	r7
    54ba:	8f 92       	push	r8
    54bc:	9f 92       	push	r9
    54be:	af 92       	push	r10
    54c0:	bf 92       	push	r11
    54c2:	cf 92       	push	r12
    54c4:	df 92       	push	r13
    54c6:	ef 92       	push	r14
    54c8:	ff 92       	push	r15
    54ca:	0f 93       	push	r16
    54cc:	1f 93       	push	r17
    54ce:	cf 93       	push	r28
    54d0:	df 93       	push	r29
    54d2:	cd b7       	in	r28, 0x3d	; 61
    54d4:	de b7       	in	r29, 0x3e	; 62
    54d6:	61 97       	sbiw	r28, 0x11	; 17
    54d8:	cd bf       	out	0x3d, r28	; 61
    54da:	de bf       	out	0x3e, r29	; 62
    54dc:	8f 87       	std	Y+15, r24	; 0x0f
    54de:	7b 01       	movw	r14, r22
    54e0:	6a 01       	movw	r12, r20
    54e2:	39 01       	movw	r6, r18
    54e4:	10 92 b8 54 	sts	0x54B8, r1	; 0x8054b8 <number_of_loops>
    54e8:	10 92 b9 54 	sts	0x54B9, r1	; 0x8054b9 <number_of_loops+0x1>
    54ec:	db 01       	movw	r26, r22
    54ee:	8d 90       	ld	r8, X+
    54f0:	9d 90       	ld	r9, X+
    54f2:	ad 90       	ld	r10, X+
    54f4:	bc 90       	ld	r11, X
    54f6:	80 91 05 53 	lds	r24, 0x5305	; 0x805305 <cal+0x58>
    54fa:	80 ff       	sbrs	r24, 0
    54fc:	1b c0       	rjmp	.+54     	; 0x5534 <MeasureSYBTtemperature+0x86>
    54fe:	60 91 cd 52 	lds	r22, 0x52CD	; 0x8052cd <cal+0x20>
    5502:	70 91 ce 52 	lds	r23, 0x52CE	; 0x8052ce <cal+0x21>
    5506:	07 2e       	mov	r0, r23
    5508:	00 0c       	add	r0, r0
    550a:	88 0b       	sbc	r24, r24
    550c:	99 0b       	sbc	r25, r25
    550e:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    5512:	20 e0       	ldi	r18, 0x00	; 0
    5514:	30 e0       	ldi	r19, 0x00	; 0
    5516:	40 e1       	ldi	r20, 0x10	; 16
    5518:	51 e4       	ldi	r21, 0x41	; 65
    551a:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    551e:	20 e0       	ldi	r18, 0x00	; 0
    5520:	30 e0       	ldi	r19, 0x00	; 0
    5522:	40 ea       	ldi	r20, 0xA0	; 160
    5524:	50 e4       	ldi	r21, 0x40	; 64
    5526:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    552a:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    552e:	68 8b       	std	Y+16, r22	; 0x10
    5530:	79 8b       	std	Y+17, r23	; 0x11
    5532:	06 c0       	rjmp	.+12     	; 0x5540 <MeasureSYBTtemperature+0x92>
    5534:	e0 91 cd 52 	lds	r30, 0x52CD	; 0x8052cd <cal+0x20>
    5538:	f0 91 ce 52 	lds	r31, 0x52CE	; 0x8052ce <cal+0x21>
    553c:	e8 8b       	std	Y+16, r30	; 0x10
    553e:	f9 8b       	std	Y+17, r31	; 0x11
    5540:	35 9b       	sbis	0x06, 5	; 6
    5542:	b3 c0       	rjmp	.+358    	; 0x56aa <MeasureSYBTtemperature+0x1fc>
    5544:	80 91 b0 54 	lds	r24, 0x54B0	; 0x8054b0 <SleepTimer>
    5548:	90 91 b1 54 	lds	r25, 0x54B1	; 0x8054b1 <SleepTimer+0x1>
    554c:	a0 91 b2 54 	lds	r26, 0x54B2	; 0x8054b2 <SleepTimer+0x2>
    5550:	b0 91 b3 54 	lds	r27, 0x54B3	; 0x8054b3 <SleepTimer+0x3>
    5554:	88 3b       	cpi	r24, 0xB8	; 184
    5556:	9b 40       	sbci	r25, 0x0B	; 11
    5558:	a1 05       	cpc	r26, r1
    555a:	b1 05       	cpc	r27, r1
    555c:	08 f0       	brcs	.+2      	; 0x5560 <MeasureSYBTtemperature+0xb2>
    555e:	a5 c0       	rjmp	.+330    	; 0x56aa <MeasureSYBTtemperature+0x1fc>
    5560:	85 e0       	ldi	r24, 0x05	; 5
    5562:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    5566:	8c 01       	movw	r16, r24
    5568:	16 95       	lsr	r17
    556a:	07 95       	ror	r16
    556c:	16 95       	lsr	r17
    556e:	07 95       	ror	r16
    5570:	b8 01       	movw	r22, r16
    5572:	80 e0       	ldi	r24, 0x00	; 0
    5574:	90 e0       	ldi	r25, 0x00	; 0
    5576:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    557a:	6b 87       	std	Y+11, r22	; 0x0b
    557c:	7c 87       	std	Y+12, r23	; 0x0c
    557e:	8d 87       	std	Y+13, r24	; 0x0d
    5580:	9e 87       	std	Y+14, r25	; 0x0e
    5582:	1f 93       	push	r17
    5584:	0f 93       	push	r16
    5586:	85 ec       	ldi	r24, 0xC5	; 197
    5588:	94 e4       	ldi	r25, 0x44	; 68
    558a:	9f 93       	push	r25
    558c:	8f 93       	push	r24
    558e:	8e 01       	movw	r16, r28
    5590:	0f 5f       	subi	r16, 0xFF	; 255
    5592:	1f 4f       	sbci	r17, 0xFF	; 255
    5594:	1f 93       	push	r17
    5596:	0f 93       	push	r16
    5598:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    559c:	c8 01       	movw	r24, r16
    559e:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
    55a2:	80 91 4d 48 	lds	r24, 0x484D	; 0x80484d <TypeOfBatteryConnected>
    55a6:	0f 90       	pop	r0
    55a8:	0f 90       	pop	r0
    55aa:	0f 90       	pop	r0
    55ac:	0f 90       	pop	r0
    55ae:	0f 90       	pop	r0
    55b0:	0f 90       	pop	r0
    55b2:	81 30       	cpi	r24, 0x01	; 1
    55b4:	09 f0       	breq	.+2      	; 0x55b8 <MeasureSYBTtemperature+0x10a>
    55b6:	4d c0       	rjmp	.+154    	; 0x5652 <MeasureSYBTtemperature+0x1a4>
    55b8:	0d ea       	ldi	r16, 0xAD	; 173
    55ba:	12 e5       	ldi	r17, 0x52	; 82
    55bc:	d8 01       	movw	r26, r16
    55be:	50 96       	adiw	r26, 0x10	; 16
    55c0:	6d 91       	ld	r22, X+
    55c2:	7c 91       	ld	r23, X
    55c4:	51 97       	sbiw	r26, 0x11	; 17
    55c6:	07 2e       	mov	r0, r23
    55c8:	00 0c       	add	r0, r0
    55ca:	88 0b       	sbc	r24, r24
    55cc:	99 0b       	sbc	r25, r25
    55ce:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    55d2:	9b 01       	movw	r18, r22
    55d4:	ac 01       	movw	r20, r24
    55d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    55d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    55da:	8d 85       	ldd	r24, Y+13	; 0x0d
    55dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    55de:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    55e2:	1b 01       	movw	r2, r22
    55e4:	2c 01       	movw	r4, r24
    55e6:	f8 01       	movw	r30, r16
    55e8:	62 89       	ldd	r22, Z+18	; 0x12
    55ea:	73 89       	ldd	r23, Z+19	; 0x13
    55ec:	07 2e       	mov	r0, r23
    55ee:	00 0c       	add	r0, r0
    55f0:	88 0b       	sbc	r24, r24
    55f2:	99 0b       	sbc	r25, r25
    55f4:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    55f8:	2b 85       	ldd	r18, Y+11	; 0x0b
    55fa:	3c 85       	ldd	r19, Y+12	; 0x0c
    55fc:	4d 85       	ldd	r20, Y+13	; 0x0d
    55fe:	5e 85       	ldd	r21, Y+14	; 0x0e
    5600:	0e 94 bc 39 	call	0x7378	; 0x7378 <__subsf3>
    5604:	9b 01       	movw	r18, r22
    5606:	ac 01       	movw	r20, r24
    5608:	c2 01       	movw	r24, r4
    560a:	b1 01       	movw	r22, r2
    560c:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    5610:	60 93 3f 48 	sts	0x483F, r22	; 0x80483f <tempTemperature.6176>
    5614:	70 93 40 48 	sts	0x4840, r23	; 0x804840 <tempTemperature.6176+0x1>
    5618:	80 93 41 48 	sts	0x4841, r24	; 0x804841 <tempTemperature.6176+0x2>
    561c:	90 93 42 48 	sts	0x4842, r25	; 0x804842 <tempTemperature.6176+0x3>
    5620:	0e 94 a7 3a 	call	0x754e	; 0x754e <__fixunssfsi>
    5624:	7f 93       	push	r23
    5626:	6f 93       	push	r22
    5628:	80 ed       	ldi	r24, 0xD0	; 208
    562a:	94 e4       	ldi	r25, 0x44	; 68
    562c:	9f 93       	push	r25
    562e:	8f 93       	push	r24
    5630:	8e 01       	movw	r16, r28
    5632:	0f 5f       	subi	r16, 0xFF	; 255
    5634:	1f 4f       	sbci	r17, 0xFF	; 255
    5636:	1f 93       	push	r17
    5638:	0f 93       	push	r16
    563a:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    563e:	c8 01       	movw	r24, r16
    5640:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
    5644:	0f 90       	pop	r0
    5646:	0f 90       	pop	r0
    5648:	0f 90       	pop	r0
    564a:	0f 90       	pop	r0
    564c:	0f 90       	pop	r0
    564e:	0f 90       	pop	r0
    5650:	0c c0       	rjmp	.+24     	; 0x566a <MeasureSYBTtemperature+0x1bc>
    5652:	8b 85       	ldd	r24, Y+11	; 0x0b
    5654:	9c 85       	ldd	r25, Y+12	; 0x0c
    5656:	ad 85       	ldd	r26, Y+13	; 0x0d
    5658:	be 85       	ldd	r27, Y+14	; 0x0e
    565a:	80 93 3f 48 	sts	0x483F, r24	; 0x80483f <tempTemperature.6176>
    565e:	90 93 40 48 	sts	0x4840, r25	; 0x804840 <tempTemperature.6176+0x1>
    5662:	a0 93 41 48 	sts	0x4841, r26	; 0x804841 <tempTemperature.6176+0x2>
    5666:	b0 93 42 48 	sts	0x4842, r27	; 0x804842 <tempTemperature.6176+0x3>
    566a:	60 91 3f 48 	lds	r22, 0x483F	; 0x80483f <tempTemperature.6176>
    566e:	70 91 40 48 	lds	r23, 0x4840	; 0x804840 <tempTemperature.6176+0x1>
    5672:	80 91 41 48 	lds	r24, 0x4841	; 0x804841 <tempTemperature.6176+0x2>
    5676:	90 91 42 48 	lds	r25, 0x4842	; 0x804842 <tempTemperature.6176+0x3>
    567a:	0e 94 a7 3a 	call	0x754e	; 0x754e <__fixunssfsi>
    567e:	7f 93       	push	r23
    5680:	6f 93       	push	r22
    5682:	83 ee       	ldi	r24, 0xE3	; 227
    5684:	94 e4       	ldi	r25, 0x44	; 68
    5686:	9f 93       	push	r25
    5688:	8f 93       	push	r24
    568a:	8e 01       	movw	r16, r28
    568c:	0f 5f       	subi	r16, 0xFF	; 255
    568e:	1f 4f       	sbci	r17, 0xFF	; 255
    5690:	1f 93       	push	r17
    5692:	0f 93       	push	r16
    5694:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    5698:	c8 01       	movw	r24, r16
    569a:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
    569e:	0f 90       	pop	r0
    56a0:	0f 90       	pop	r0
    56a2:	0f 90       	pop	r0
    56a4:	0f 90       	pop	r0
    56a6:	0f 90       	pop	r0
    56a8:	0f 90       	pop	r0
    56aa:	20 90 3f 48 	lds	r2, 0x483F	; 0x80483f <tempTemperature.6176>
    56ae:	30 90 40 48 	lds	r3, 0x4840	; 0x804840 <tempTemperature.6176+0x1>
    56b2:	40 90 41 48 	lds	r4, 0x4841	; 0x804841 <tempTemperature.6176+0x2>
    56b6:	50 90 42 48 	lds	r5, 0x4842	; 0x804842 <tempTemperature.6176+0x3>
    56ba:	20 e0       	ldi	r18, 0x00	; 0
    56bc:	30 e8       	ldi	r19, 0x80	; 128
    56be:	4b e3       	ldi	r20, 0x3B	; 59
    56c0:	55 e4       	ldi	r21, 0x45	; 69
    56c2:	c2 01       	movw	r24, r4
    56c4:	b1 01       	movw	r22, r2
    56c6:	0e 94 29 3a 	call	0x7452	; 0x7452 <__cmpsf2>
    56ca:	88 23       	and	r24, r24
    56cc:	0c f0       	brlt	.+2      	; 0x56d0 <MeasureSYBTtemperature+0x222>
    56ce:	a6 c1       	rjmp	.+844    	; 0x5a1c <MeasureSYBTtemperature+0x56e>
    56d0:	80 91 05 53 	lds	r24, 0x5305	; 0x805305 <cal+0x58>
    56d4:	82 ff       	sbrs	r24, 2
    56d6:	0f c0       	rjmp	.+30     	; 0x56f6 <MeasureSYBTtemperature+0x248>
    56d8:	20 e0       	ldi	r18, 0x00	; 0
    56da:	30 e0       	ldi	r19, 0x00	; 0
    56dc:	40 e2       	ldi	r20, 0x20	; 32
    56de:	51 e4       	ldi	r21, 0x41	; 65
    56e0:	c2 01       	movw	r24, r4
    56e2:	b1 01       	movw	r22, r2
    56e4:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    56e8:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    56ec:	60 93 3d 48 	sts	0x483D, r22	; 0x80483d <Temperature.6171>
    56f0:	70 93 3e 48 	sts	0x483E, r23	; 0x80483e <Temperature.6171+0x1>
    56f4:	54 c0       	rjmp	.+168    	; 0x579e <MeasureSYBTtemperature+0x2f0>
    56f6:	80 91 4d 48 	lds	r24, 0x484D	; 0x80484d <TypeOfBatteryConnected>
    56fa:	81 30       	cpi	r24, 0x01	; 1
    56fc:	31 f5       	brne	.+76     	; 0x574a <MeasureSYBTtemperature+0x29c>
    56fe:	c2 01       	movw	r24, r4
    5700:	b1 01       	movw	r22, r2
    5702:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    5706:	cb 01       	movw	r24, r22
    5708:	0e 94 a1 19 	call	0x3342	; 0x3342 <ConvertToTemperature>
    570c:	a8 89       	ldd	r26, Y+16	; 0x10
    570e:	b9 89       	ldd	r27, Y+17	; 0x11
    5710:	8a 0f       	add	r24, r26
    5712:	9b 1f       	adc	r25, r27
    5714:	80 93 3d 48 	sts	0x483D, r24	; 0x80483d <Temperature.6171>
    5718:	90 93 3e 48 	sts	0x483E, r25	; 0x80483e <Temperature.6171+0x1>
    571c:	9f 93       	push	r25
    571e:	8f 93       	push	r24
    5720:	8e ee       	ldi	r24, 0xEE	; 238
    5722:	94 e4       	ldi	r25, 0x44	; 68
    5724:	9f 93       	push	r25
    5726:	8f 93       	push	r24
    5728:	8e 01       	movw	r16, r28
    572a:	0f 5f       	subi	r16, 0xFF	; 255
    572c:	1f 4f       	sbci	r17, 0xFF	; 255
    572e:	1f 93       	push	r17
    5730:	0f 93       	push	r16
    5732:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    5736:	c8 01       	movw	r24, r16
    5738:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
    573c:	0f 90       	pop	r0
    573e:	0f 90       	pop	r0
    5740:	0f 90       	pop	r0
    5742:	0f 90       	pop	r0
    5744:	0f 90       	pop	r0
    5746:	0f 90       	pop	r0
    5748:	2a c0       	rjmp	.+84     	; 0x579e <MeasureSYBTtemperature+0x2f0>
    574a:	20 e0       	ldi	r18, 0x00	; 0
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	40 e0       	ldi	r20, 0x00	; 0
    5750:	5e e3       	ldi	r21, 0x3E	; 62
    5752:	c2 01       	movw	r24, r4
    5754:	b1 01       	movw	r22, r2
    5756:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    575a:	20 e0       	ldi	r18, 0x00	; 0
    575c:	30 e0       	ldi	r19, 0x00	; 0
    575e:	40 e2       	ldi	r20, 0x20	; 32
    5760:	51 e4       	ldi	r21, 0x41	; 65
    5762:	0e 94 bd 39 	call	0x737a	; 0x737a <__addsf3>
    5766:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    576a:	60 93 3d 48 	sts	0x483D, r22	; 0x80483d <Temperature.6171>
    576e:	70 93 3e 48 	sts	0x483E, r23	; 0x80483e <Temperature.6171+0x1>
    5772:	7f 93       	push	r23
    5774:	6f 93       	push	r22
    5776:	8b ef       	ldi	r24, 0xFB	; 251
    5778:	94 e4       	ldi	r25, 0x44	; 68
    577a:	9f 93       	push	r25
    577c:	8f 93       	push	r24
    577e:	8e 01       	movw	r16, r28
    5780:	0f 5f       	subi	r16, 0xFF	; 255
    5782:	1f 4f       	sbci	r17, 0xFF	; 255
    5784:	1f 93       	push	r17
    5786:	0f 93       	push	r16
    5788:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    578c:	c8 01       	movw	r24, r16
    578e:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
    5792:	0f 90       	pop	r0
    5794:	0f 90       	pop	r0
    5796:	0f 90       	pop	r0
    5798:	0f 90       	pop	r0
    579a:	0f 90       	pop	r0
    579c:	0f 90       	pop	r0
    579e:	80 91 3d 48 	lds	r24, 0x483D	; 0x80483d <Temperature.6171>
    57a2:	90 91 3e 48 	lds	r25, 0x483E	; 0x80483e <Temperature.6171+0x1>
    57a6:	80 93 85 48 	sts	0x4885, r24	; 0x804885 <array_SYBT+0x24>
    57aa:	90 93 86 48 	sts	0x4886, r25	; 0x804886 <array_SYBT+0x25>
    57ae:	f7 01       	movw	r30, r14
    57b0:	40 81       	ld	r20, Z
    57b2:	51 81       	ldd	r21, Z+1	; 0x01
    57b4:	62 81       	ldd	r22, Z+2	; 0x02
    57b6:	73 81       	ldd	r23, Z+3	; 0x03
    57b8:	40 31       	cpi	r20, 0x10	; 16
    57ba:	51 05       	cpc	r21, r1
    57bc:	61 05       	cpc	r22, r1
    57be:	71 05       	cpc	r23, r1
    57c0:	08 f4       	brcc	.+2      	; 0x57c4 <MeasureSYBTtemperature+0x316>
    57c2:	7b c0       	rjmp	.+246    	; 0x58ba <MeasureSYBTtemperature+0x40c>
    57c4:	20 91 05 53 	lds	r18, 0x5305	; 0x805305 <cal+0x58>
    57c8:	20 ff       	sbrs	r18, 0
    57ca:	03 c0       	rjmp	.+6      	; 0x57d2 <MeasureSYBTtemperature+0x324>
    57cc:	2a e5       	ldi	r18, 0x5A	; 90
    57ce:	30 e0       	ldi	r19, 0x00	; 0
    57d0:	02 c0       	rjmp	.+4      	; 0x57d6 <MeasureSYBTtemperature+0x328>
    57d2:	28 e2       	ldi	r18, 0x28	; 40
    57d4:	30 e0       	ldi	r19, 0x00	; 0
    57d6:	82 17       	cp	r24, r18
    57d8:	93 07       	cpc	r25, r19
    57da:	34 f4       	brge	.+12     	; 0x57e8 <MeasureSYBTtemperature+0x33a>
    57dc:	80 91 5d 54 	lds	r24, 0x545D	; 0x80545d <Rows>
    57e0:	80 62       	ori	r24, 0x20	; 32
    57e2:	80 93 5d 54 	sts	0x545D, r24	; 0x80545d <Rows>
    57e6:	07 c0       	rjmp	.+14     	; 0x57f6 <MeasureSYBTtemperature+0x348>
    57e8:	80 91 5d 54 	lds	r24, 0x545D	; 0x80545d <Rows>
    57ec:	80 62       	ori	r24, 0x20	; 32
    57ee:	90 e2       	ldi	r25, 0x20	; 32
    57f0:	89 27       	eor	r24, r25
    57f2:	80 93 5d 54 	sts	0x545D, r24	; 0x80545d <Rows>
    57f6:	01 e6       	ldi	r16, 0x61	; 97
    57f8:	18 e4       	ldi	r17, 0x48	; 72
    57fa:	d8 01       	movw	r26, r16
    57fc:	94 96       	adiw	r26, 0x24	; 36
    57fe:	8d 91       	ld	r24, X+
    5800:	9c 91       	ld	r25, X
    5802:	95 97       	sbiw	r26, 0x25	; 37
    5804:	6a e0       	ldi	r22, 0x0A	; 10
    5806:	70 e0       	ldi	r23, 0x00	; 0
    5808:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    580c:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    5810:	f3 01       	movw	r30, r6
    5812:	82 83       	std	Z+2, r24	; 0x02
    5814:	d8 01       	movw	r26, r16
    5816:	94 96       	adiw	r26, 0x24	; 36
    5818:	8d 91       	ld	r24, X+
    581a:	9c 91       	ld	r25, X
    581c:	95 97       	sbiw	r26, 0x25	; 37
    581e:	85 36       	cpi	r24, 0x65	; 101
    5820:	91 05       	cpc	r25, r1
    5822:	7c f0       	brlt	.+30     	; 0x5842 <MeasureSYBTtemperature+0x394>
    5824:	2a e0       	ldi	r18, 0x0A	; 10
    5826:	30 e0       	ldi	r19, 0x00	; 0
    5828:	b9 01       	movw	r22, r18
    582a:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    582e:	cb 01       	movw	r24, r22
    5830:	b9 01       	movw	r22, r18
    5832:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5836:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    583a:	8f 50       	subi	r24, 0x0F	; 15
    583c:	f3 01       	movw	r30, r6
    583e:	81 83       	std	Z+1, r24	; 0x01
    5840:	0e c0       	rjmp	.+28     	; 0x585e <MeasureSYBTtemperature+0x3b0>
    5842:	2a e0       	ldi	r18, 0x0A	; 10
    5844:	30 e0       	ldi	r19, 0x00	; 0
    5846:	b9 01       	movw	r22, r18
    5848:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    584c:	cb 01       	movw	r24, r22
    584e:	b9 01       	movw	r22, r18
    5850:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5854:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    5858:	d3 01       	movw	r26, r6
    585a:	11 96       	adiw	r26, 0x01	; 1
    585c:	8c 93       	st	X, r24
    585e:	80 91 85 48 	lds	r24, 0x4885	; 0x804885 <array_SYBT+0x24>
    5862:	90 91 86 48 	lds	r25, 0x4886	; 0x804886 <array_SYBT+0x25>
    5866:	64 e6       	ldi	r22, 0x64	; 100
    5868:	70 e0       	ldi	r23, 0x00	; 0
    586a:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    586e:	cb 01       	movw	r24, r22
    5870:	6a e0       	ldi	r22, 0x0A	; 10
    5872:	70 e0       	ldi	r23, 0x00	; 0
    5874:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5878:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    587c:	f3 01       	movw	r30, r6
    587e:	80 83       	st	Z, r24
    5880:	80 91 5d 54 	lds	r24, 0x545D	; 0x80545d <Rows>
    5884:	88 60       	ori	r24, 0x08	; 8
    5886:	98 e0       	ldi	r25, 0x08	; 8
    5888:	89 27       	eor	r24, r25
    588a:	80 93 5d 54 	sts	0x545D, r24	; 0x80545d <Rows>
    588e:	80 91 47 48 	lds	r24, 0x4847	; 0x804847 <DisplayVoltageDropTimerExpired>
    5892:	81 11       	cpse	r24, r1
    5894:	ce c0       	rjmp	.+412    	; 0x5a32 <MeasureSYBTtemperature+0x584>
    5896:	80 91 49 48 	lds	r24, 0x4849	; 0x804849 <SYBTconnectedButNoBattery>
    589a:	81 11       	cpse	r24, r1
    589c:	04 c0       	rjmp	.+8      	; 0x58a6 <MeasureSYBTtemperature+0x3f8>
    589e:	80 91 4a 48 	lds	r24, 0x484A	; 0x80484a <SYBTisProvidingPower>
    58a2:	88 23       	and	r24, r24
    58a4:	31 f0       	breq	.+12     	; 0x58b2 <MeasureSYBTtemperature+0x404>
    58a6:	85 b1       	in	r24, 0x05	; 5
    58a8:	80 62       	ori	r24, 0x20	; 32
    58aa:	85 b9       	out	0x05, r24	; 5
    58ac:	81 b3       	in	r24, 0x11	; 17
    58ae:	8b 7f       	andi	r24, 0xFB	; 251
    58b0:	81 bb       	out	0x11, r24	; 17
    58b2:	81 e0       	ldi	r24, 0x01	; 1
    58b4:	80 93 47 48 	sts	0x4847, r24	; 0x804847 <DisplayVoltageDropTimerExpired>
    58b8:	bc c0       	rjmp	.+376    	; 0x5a32 <MeasureSYBTtemperature+0x584>
    58ba:	ff ef       	ldi	r31, 0xFF	; 255
    58bc:	8f 1a       	sub	r8, r31
    58be:	9f 0a       	sbc	r9, r31
    58c0:	af 0a       	sbc	r10, r31
    58c2:	bf 0a       	sbc	r11, r31
    58c4:	2f 85       	ldd	r18, Y+15	; 0x0f
    58c6:	22 23       	and	r18, r18
    58c8:	09 f4       	brne	.+2      	; 0x58cc <MeasureSYBTtemperature+0x41e>
    58ca:	40 c0       	rjmp	.+128    	; 0x594c <MeasureSYBTtemperature+0x49e>
    58cc:	80 91 4f 53 	lds	r24, 0x534F	; 0x80534f <SYBT+0x8>
    58d0:	90 91 50 53 	lds	r25, 0x5350	; 0x805350 <SYBT+0x9>
    58d4:	84 36       	cpi	r24, 0x64	; 100
    58d6:	91 05       	cpc	r25, r1
    58d8:	dc f4       	brge	.+54     	; 0x5910 <MeasureSYBTtemperature+0x462>
    58da:	0a e0       	ldi	r16, 0x0A	; 10
    58dc:	10 e0       	ldi	r17, 0x00	; 0
    58de:	b8 01       	movw	r22, r16
    58e0:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    58e4:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    58e8:	d3 01       	movw	r26, r6
    58ea:	12 96       	adiw	r26, 0x02	; 2
    58ec:	8c 93       	st	X, r24
    58ee:	80 91 4f 53 	lds	r24, 0x534F	; 0x80534f <SYBT+0x8>
    58f2:	90 91 50 53 	lds	r25, 0x5350	; 0x805350 <SYBT+0x9>
    58f6:	b8 01       	movw	r22, r16
    58f8:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    58fc:	cb 01       	movw	r24, r22
    58fe:	b8 01       	movw	r22, r16
    5900:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5904:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    5908:	8f 50       	subi	r24, 0x0F	; 15
    590a:	f3 01       	movw	r30, r6
    590c:	81 83       	std	Z+1, r24	; 0x01
    590e:	1a c0       	rjmp	.+52     	; 0x5944 <MeasureSYBTtemperature+0x496>
    5910:	0a e0       	ldi	r16, 0x0A	; 10
    5912:	10 e0       	ldi	r17, 0x00	; 0
    5914:	b8 01       	movw	r22, r16
    5916:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    591a:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    591e:	8f 50       	subi	r24, 0x0F	; 15
    5920:	d3 01       	movw	r26, r6
    5922:	12 96       	adiw	r26, 0x02	; 2
    5924:	8c 93       	st	X, r24
    5926:	80 91 4f 53 	lds	r24, 0x534F	; 0x80534f <SYBT+0x8>
    592a:	90 91 50 53 	lds	r25, 0x5350	; 0x805350 <SYBT+0x9>
    592e:	b8 01       	movw	r22, r16
    5930:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5934:	cb 01       	movw	r24, r22
    5936:	b8 01       	movw	r22, r16
    5938:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    593c:	0e 94 82 32 	call	0x6504	; 0x6504 <ConvertToASCII>
    5940:	f3 01       	movw	r30, r6
    5942:	81 83       	std	Z+1, r24	; 0x01
    5944:	80 e4       	ldi	r24, 0x40	; 64
    5946:	d3 01       	movw	r26, r6
    5948:	8c 93       	st	X, r24
    594a:	62 c0       	rjmp	.+196    	; 0x5a10 <MeasureSYBTtemperature+0x562>
    594c:	ba e2       	ldi	r27, 0x2A	; 42
    594e:	cb 16       	cp	r12, r27
    5950:	d1 04       	cpc	r13, r1
    5952:	59 f1       	breq	.+86     	; 0x59aa <MeasureSYBTtemperature+0x4fc>
    5954:	9c f4       	brge	.+38     	; 0x597c <MeasureSYBTtemperature+0x4ce>
    5956:	f5 e1       	ldi	r31, 0x15	; 21
    5958:	cf 16       	cp	r12, r31
    595a:	d1 04       	cpc	r13, r1
    595c:	91 f1       	breq	.+100    	; 0x59c2 <MeasureSYBTtemperature+0x514>
    595e:	2c f4       	brge	.+10     	; 0x596a <MeasureSYBTtemperature+0x4bc>
    5960:	3e e0       	ldi	r19, 0x0E	; 14
    5962:	c3 16       	cp	r12, r19
    5964:	d1 04       	cpc	r13, r1
    5966:	09 f1       	breq	.+66     	; 0x59aa <MeasureSYBTtemperature+0x4fc>
    5968:	53 c0       	rjmp	.+166    	; 0x5a10 <MeasureSYBTtemperature+0x562>
    596a:	8c e1       	ldi	r24, 0x1C	; 28
    596c:	c8 16       	cp	r12, r24
    596e:	d1 04       	cpc	r13, r1
    5970:	e1 f0       	breq	.+56     	; 0x59aa <MeasureSYBTtemperature+0x4fc>
    5972:	93 e2       	ldi	r25, 0x23	; 35
    5974:	c9 16       	cp	r12, r25
    5976:	d1 04       	cpc	r13, r1
    5978:	21 f1       	breq	.+72     	; 0x59c2 <MeasureSYBTtemperature+0x514>
    597a:	4a c0       	rjmp	.+148    	; 0x5a10 <MeasureSYBTtemperature+0x562>
    597c:	a4 e6       	ldi	r26, 0x64	; 100
    597e:	ca 16       	cp	r12, r26
    5980:	d1 04       	cpc	r13, r1
    5982:	99 f1       	breq	.+102    	; 0x59ea <MeasureSYBTtemperature+0x53c>
    5984:	4c f4       	brge	.+18     	; 0x5998 <MeasureSYBTtemperature+0x4ea>
    5986:	e8 e3       	ldi	r30, 0x38	; 56
    5988:	ce 16       	cp	r12, r30
    598a:	d1 04       	cpc	r13, r1
    598c:	71 f0       	breq	.+28     	; 0x59aa <MeasureSYBTtemperature+0x4fc>
    598e:	fb e3       	ldi	r31, 0x3B	; 59
    5990:	cf 16       	cp	r12, r31
    5992:	d1 04       	cpc	r13, r1
    5994:	b1 f0       	breq	.+44     	; 0x59c2 <MeasureSYBTtemperature+0x514>
    5996:	3c c0       	rjmp	.+120    	; 0x5a10 <MeasureSYBTtemperature+0x562>
    5998:	28 ec       	ldi	r18, 0xC8	; 200
    599a:	c2 16       	cp	r12, r18
    599c:	d1 04       	cpc	r13, r1
    599e:	69 f1       	breq	.+90     	; 0x59fa <MeasureSYBTtemperature+0x54c>
    59a0:	3f ef       	ldi	r19, 0xFF	; 255
    59a2:	c3 16       	cp	r12, r19
    59a4:	d1 04       	cpc	r13, r1
    59a6:	a9 f0       	breq	.+42     	; 0x59d2 <MeasureSYBTtemperature+0x524>
    59a8:	33 c0       	rjmp	.+102    	; 0x5a10 <MeasureSYBTtemperature+0x562>
    59aa:	81 e3       	ldi	r24, 0x31	; 49
    59ac:	d3 01       	movw	r26, r6
    59ae:	12 96       	adiw	r26, 0x02	; 2
    59b0:	8c 93       	st	X, r24
    59b2:	12 97       	sbiw	r26, 0x02	; 2
    59b4:	86 e4       	ldi	r24, 0x46	; 70
    59b6:	11 96       	adiw	r26, 0x01	; 1
    59b8:	8c 93       	st	X, r24
    59ba:	11 97       	sbiw	r26, 0x01	; 1
    59bc:	8d e2       	ldi	r24, 0x2D	; 45
    59be:	8c 93       	st	X, r24
    59c0:	27 c0       	rjmp	.+78     	; 0x5a10 <MeasureSYBTtemperature+0x562>
    59c2:	82 e3       	ldi	r24, 0x32	; 50
    59c4:	f3 01       	movw	r30, r6
    59c6:	82 83       	std	Z+2, r24	; 0x02
    59c8:	86 e4       	ldi	r24, 0x46	; 70
    59ca:	81 83       	std	Z+1, r24	; 0x01
    59cc:	8d e2       	ldi	r24, 0x2D	; 45
    59ce:	80 83       	st	Z, r24
    59d0:	1f c0       	rjmp	.+62     	; 0x5a10 <MeasureSYBTtemperature+0x562>
    59d2:	84 e7       	ldi	r24, 0x74	; 116
    59d4:	d3 01       	movw	r26, r6
    59d6:	12 96       	adiw	r26, 0x02	; 2
    59d8:	8c 93       	st	X, r24
    59da:	12 97       	sbiw	r26, 0x02	; 2
    59dc:	8f e6       	ldi	r24, 0x6F	; 111
    59de:	11 96       	adiw	r26, 0x01	; 1
    59e0:	8c 93       	st	X, r24
    59e2:	11 97       	sbiw	r26, 0x01	; 1
    59e4:	88 e6       	ldi	r24, 0x68	; 104
    59e6:	8c 93       	st	X, r24
    59e8:	13 c0       	rjmp	.+38     	; 0x5a10 <MeasureSYBTtemperature+0x562>
    59ea:	89 e7       	ldi	r24, 0x79	; 121
    59ec:	f3 01       	movw	r30, r6
    59ee:	82 83       	std	Z+2, r24	; 0x02
    59f0:	8c e4       	ldi	r24, 0x4C	; 76
    59f2:	81 83       	std	Z+1, r24	; 0x01
    59f4:	84 e6       	ldi	r24, 0x64	; 100
    59f6:	80 83       	st	Z, r24
    59f8:	0b c0       	rjmp	.+22     	; 0x5a10 <MeasureSYBTtemperature+0x562>
    59fa:	83 e3       	ldi	r24, 0x33	; 51
    59fc:	d3 01       	movw	r26, r6
    59fe:	12 96       	adiw	r26, 0x02	; 2
    5a00:	8c 93       	st	X, r24
    5a02:	12 97       	sbiw	r26, 0x02	; 2
    5a04:	86 e4       	ldi	r24, 0x46	; 70
    5a06:	11 96       	adiw	r26, 0x01	; 1
    5a08:	8c 93       	st	X, r24
    5a0a:	11 97       	sbiw	r26, 0x01	; 1
    5a0c:	8d e2       	ldi	r24, 0x2D	; 45
    5a0e:	8c 93       	st	X, r24
    5a10:	80 91 5d 54 	lds	r24, 0x545D	; 0x80545d <Rows>
    5a14:	88 60       	ori	r24, 0x08	; 8
    5a16:	80 93 5d 54 	sts	0x545D, r24	; 0x80545d <Rows>
    5a1a:	0b c0       	rjmp	.+22     	; 0x5a32 <MeasureSYBTtemperature+0x584>
    5a1c:	8d e2       	ldi	r24, 0x2D	; 45
    5a1e:	f3 01       	movw	r30, r6
    5a20:	80 83       	st	Z, r24
    5a22:	81 83       	std	Z+1, r24	; 0x01
    5a24:	82 83       	std	Z+2, r24	; 0x02
    5a26:	88 eb       	ldi	r24, 0xB8	; 184
    5a28:	9b e0       	ldi	r25, 0x0B	; 11
    5a2a:	80 93 85 48 	sts	0x4885, r24	; 0x804885 <array_SYBT+0x24>
    5a2e:	90 93 86 48 	sts	0x4886, r25	; 0x804886 <array_SYBT+0x25>
    5a32:	80 91 4a 48 	lds	r24, 0x484A	; 0x80484a <SYBTisProvidingPower>
    5a36:	81 11       	cpse	r24, r1
    5a38:	12 c0       	rjmp	.+36     	; 0x5a5e <MeasureSYBTtemperature+0x5b0>
    5a3a:	80 91 49 48 	lds	r24, 0x4849	; 0x804849 <SYBTconnectedButNoBattery>
    5a3e:	81 11       	cpse	r24, r1
    5a40:	0e c0       	rjmp	.+28     	; 0x5a5e <MeasureSYBTtemperature+0x5b0>
    5a42:	8d e2       	ldi	r24, 0x2D	; 45
    5a44:	d3 01       	movw	r26, r6
    5a46:	8c 93       	st	X, r24
    5a48:	11 96       	adiw	r26, 0x01	; 1
    5a4a:	8c 93       	st	X, r24
    5a4c:	11 97       	sbiw	r26, 0x01	; 1
    5a4e:	12 96       	adiw	r26, 0x02	; 2
    5a50:	8c 93       	st	X, r24
    5a52:	88 eb       	ldi	r24, 0xB8	; 184
    5a54:	9b e0       	ldi	r25, 0x0B	; 11
    5a56:	80 93 85 48 	sts	0x4885, r24	; 0x804885 <array_SYBT+0x24>
    5a5a:	90 93 86 48 	sts	0x4886, r25	; 0x804886 <array_SYBT+0x25>
    5a5e:	f7 01       	movw	r30, r14
    5a60:	80 82       	st	Z, r8
    5a62:	91 82       	std	Z+1, r9	; 0x01
    5a64:	a2 82       	std	Z+2, r10	; 0x02
    5a66:	b3 82       	std	Z+3, r11	; 0x03
    5a68:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a70:	0e 94 a7 3a 	call	0x754e	; 0x754e <__fixunssfsi>
    5a74:	cb 01       	movw	r24, r22
    5a76:	61 96       	adiw	r28, 0x11	; 17
    5a78:	cd bf       	out	0x3d, r28	; 61
    5a7a:	de bf       	out	0x3e, r29	; 62
    5a7c:	df 91       	pop	r29
    5a7e:	cf 91       	pop	r28
    5a80:	1f 91       	pop	r17
    5a82:	0f 91       	pop	r16
    5a84:	ff 90       	pop	r15
    5a86:	ef 90       	pop	r14
    5a88:	df 90       	pop	r13
    5a8a:	cf 90       	pop	r12
    5a8c:	bf 90       	pop	r11
    5a8e:	af 90       	pop	r10
    5a90:	9f 90       	pop	r9
    5a92:	8f 90       	pop	r8
    5a94:	7f 90       	pop	r7
    5a96:	6f 90       	pop	r6
    5a98:	5f 90       	pop	r5
    5a9a:	4f 90       	pop	r4
    5a9c:	3f 90       	pop	r3
    5a9e:	2f 90       	pop	r2
    5aa0:	08 95       	ret

00005aa2 <MeasureInternalTemperature>:
    5aa2:	8f 92       	push	r8
    5aa4:	9f 92       	push	r9
    5aa6:	af 92       	push	r10
    5aa8:	bf 92       	push	r11
    5aaa:	cf 92       	push	r12
    5aac:	df 92       	push	r13
    5aae:	ef 92       	push	r14
    5ab0:	ff 92       	push	r15
    5ab2:	0f 93       	push	r16
    5ab4:	1f 93       	push	r17
    5ab6:	cf 93       	push	r28
    5ab8:	df 93       	push	r29
    5aba:	ec 01       	movw	r28, r24
    5abc:	8b 01       	movw	r16, r22
    5abe:	81 e0       	ldi	r24, 0x01	; 1
    5ac0:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    5ac4:	96 95       	lsr	r25
    5ac6:	87 95       	ror	r24
    5ac8:	96 95       	lsr	r25
    5aca:	87 95       	ror	r24
    5acc:	bc 01       	movw	r22, r24
    5ace:	80 e0       	ldi	r24, 0x00	; 0
    5ad0:	90 e0       	ldi	r25, 0x00	; 0
    5ad2:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    5ad6:	6b 01       	movw	r12, r22
    5ad8:	7c 01       	movw	r14, r24
    5ada:	f8 01       	movw	r30, r16
    5adc:	60 a5       	ldd	r22, Z+40	; 0x28
    5ade:	71 a5       	ldd	r23, Z+41	; 0x29
    5ae0:	07 2e       	mov	r0, r23
    5ae2:	00 0c       	add	r0, r0
    5ae4:	88 0b       	sbc	r24, r24
    5ae6:	99 0b       	sbc	r25, r25
    5ae8:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    5aec:	9b 01       	movw	r18, r22
    5aee:	ac 01       	movw	r20, r24
    5af0:	c7 01       	movw	r24, r14
    5af2:	b6 01       	movw	r22, r12
    5af4:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    5af8:	4b 01       	movw	r8, r22
    5afa:	5c 01       	movw	r10, r24
    5afc:	f8 01       	movw	r30, r16
    5afe:	62 a5       	ldd	r22, Z+42	; 0x2a
    5b00:	73 a5       	ldd	r23, Z+43	; 0x2b
    5b02:	07 2e       	mov	r0, r23
    5b04:	00 0c       	add	r0, r0
    5b06:	88 0b       	sbc	r24, r24
    5b08:	99 0b       	sbc	r25, r25
    5b0a:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    5b0e:	a7 01       	movw	r20, r14
    5b10:	96 01       	movw	r18, r12
    5b12:	0e 94 bc 39 	call	0x7378	; 0x7378 <__subsf3>
    5b16:	9b 01       	movw	r18, r22
    5b18:	ac 01       	movw	r20, r24
    5b1a:	c5 01       	movw	r24, r10
    5b1c:	b4 01       	movw	r22, r8
    5b1e:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    5b22:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    5b26:	cb 01       	movw	r24, r22
    5b28:	0e 94 a1 19 	call	0x3342	; 0x3342 <ConvertToTemperature>
    5b2c:	60 91 e5 52 	lds	r22, 0x52E5	; 0x8052e5 <cal+0x38>
    5b30:	70 91 e6 52 	lds	r23, 0x52E6	; 0x8052e6 <cal+0x39>
    5b34:	86 0f       	add	r24, r22
    5b36:	97 1f       	adc	r25, r23
    5b38:	bc 01       	movw	r22, r24
    5b3a:	99 0f       	add	r25, r25
    5b3c:	88 0b       	sbc	r24, r24
    5b3e:	99 0b       	sbc	r25, r25
    5b40:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    5b44:	6e 87       	std	Y+14, r22	; 0x0e
    5b46:	7f 87       	std	Y+15, r23	; 0x0f
    5b48:	88 8b       	std	Y+16, r24	; 0x10
    5b4a:	99 8b       	std	Y+17, r25	; 0x11
    5b4c:	df 91       	pop	r29
    5b4e:	cf 91       	pop	r28
    5b50:	1f 91       	pop	r17
    5b52:	0f 91       	pop	r16
    5b54:	ff 90       	pop	r15
    5b56:	ef 90       	pop	r14
    5b58:	df 90       	pop	r13
    5b5a:	cf 90       	pop	r12
    5b5c:	bf 90       	pop	r11
    5b5e:	af 90       	pop	r10
    5b60:	9f 90       	pop	r9
    5b62:	8f 90       	pop	r8
    5b64:	08 95       	ret

00005b66 <SwitchToDemoModePtr>:
	cal.Sleep_1 = 800000;
	cal.Sleep_2 = 800000;
}
*/
//------------------------------------The recommended way. No apparent difference than the wrong way without pointers.----------------------------
void SwitchToDemoModePtr(uint8_t *Rows, struct volts_noload *ptrVolts, struct temperature *ptrTemp, struct resistance *ptrResist, struct cal *ptrCal){
    5b66:	0f 93       	push	r16
    5b68:	1f 93       	push	r17
    5b6a:	cf 93       	push	r28
    5b6c:	df 93       	push	r29
    5b6e:	db 01       	movw	r26, r22
    5b70:	fa 01       	movw	r30, r20
    5b72:	e9 01       	movw	r28, r18

	if(number_of_loops == Cycle_4){
    5b74:	80 91 b8 54 	lds	r24, 0x54B8	; 0x8054b8 <number_of_loops>
    5b78:	90 91 b9 54 	lds	r25, 0x54B9	; 0x8054b9 <number_of_loops+0x1>
    5b7c:	88 37       	cpi	r24, 0x78	; 120
    5b7e:	95 40       	sbci	r25, 0x05	; 5
    5b80:	51 f4       	brne	.+20     	; 0x5b96 <SwitchToDemoModePtr+0x30>
		DemoResistance ++;
    5b82:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <DemoResistance>
    5b86:	8f 5f       	subi	r24, 0xFF	; 255
    5b88:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <DemoResistance>
		if(DemoResistance > 12)DemoResistance = 1;		
    5b8c:	8d 30       	cpi	r24, 0x0D	; 13
    5b8e:	18 f0       	brcs	.+6      	; 0x5b96 <SwitchToDemoModePtr+0x30>
    5b90:	81 e0       	ldi	r24, 0x01	; 1
    5b92:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <DemoResistance>
		ptrTemp->ones = LED_number_2;							// display simulated temperature of 72.1
		ptrTemp->tens = LED_number_1_dp;						// number one plus decimal
		ptrTemp->hundreds = LED_number_7;
	#endif
	#ifdef ATTINY
		ptrVolts->ones = ASCII_8;								// display simulated voltage of 108
    5b96:	88 e3       	ldi	r24, 0x38	; 56
    5b98:	12 96       	adiw	r26, 0x02	; 2
    5b9a:	8c 93       	st	X, r24
    5b9c:	12 97       	sbiw	r26, 0x02	; 2
		ptrVolts->tens = ASCII_0;
    5b9e:	80 e3       	ldi	r24, 0x30	; 48
    5ba0:	11 96       	adiw	r26, 0x01	; 1
    5ba2:	8c 93       	st	X, r24
    5ba4:	11 97       	sbiw	r26, 0x01	; 1
		ptrVolts->hundreds = ASCII_1;							// display simulated temperature of 72.1
    5ba6:	81 e3       	ldi	r24, 0x31	; 49
    5ba8:	8c 93       	st	X, r24
		ptrTemp->ones = ASCII_2;
    5baa:	92 e3       	ldi	r25, 0x32	; 50
    5bac:	92 83       	std	Z+2, r25	; 0x02
		ptrTemp->tens = ASCII_1;								// number one 
    5bae:	81 83       	std	Z+1, r24	; 0x01
		ptrTemp->hundreds = ASCII_7;							//Character will be interpreted by ATTINY as a 7 with decimal.  I removed this idea
    5bb0:	87 e3       	ldi	r24, 0x37	; 55
    5bb2:	80 83       	st	Z, r24
		//ptrTemp->decimal = ASCII_decimal;						// plus decimal
	#endif
	
	switch (DemoResistance){
    5bb4:	e0 91 01 40 	lds	r30, 0x4001	; 0x804001 <DemoResistance>
    5bb8:	8e 2f       	mov	r24, r30
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	fc 01       	movw	r30, r24
    5bbe:	31 97       	sbiw	r30, 0x01	; 1
    5bc0:	ec 30       	cpi	r30, 0x0C	; 12
    5bc2:	f1 05       	cpc	r31, r1
    5bc4:	20 f5       	brcc	.+72     	; 0x5c0e <SwitchToDemoModePtr+0xa8>
    5bc6:	ec 58       	subi	r30, 0x8C	; 140
    5bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bca:	0c 94 ff 3c 	jmp	0x79fe	; 0x79fe <__tablejump2__>
			ptrResist->ones = LED_number_6;						// display simulated battery v.66
			ptrResist->tens = LED_number_6;
			ptrResist->hundreds = Letter_v_dp;
		#endif
		#ifdef ATTINY
			ptrResist->ones = ASCII_6;							// display simulated battery c.10
    5bce:	86 e3       	ldi	r24, 0x36	; 54
    5bd0:	8a 83       	std	Y+2, r24	; 0x02
			ptrResist->tens = ASCII_6;
    5bd2:	89 83       	std	Y+1, r24	; 0x01
			ptrResist->hundreds = ASCII_v_dp;
    5bd4:	8e e5       	ldi	r24, 0x5E	; 94
    5bd6:	88 83       	st	Y, r24
			//ptrResist->hundreds = ASCII_V;						//Capital V will be interpreted by ATTINY as a lowercase V with decimal. 
			//ptrResist->decimal = ASCII_decimal;		
		#endif
		break;
    5bd8:	1a c0       	rjmp	.+52     	; 0x5c0e <SwitchToDemoModePtr+0xa8>
			ptrResist->ones = LED_number_0;							// display simulated battery c.10
			ptrResist->tens = LED_number_1;
			ptrResist->hundreds = Letter_c_dp;				
		#endif
		#ifdef ATTINY
			ptrResist->ones = ASCII_0;							// display simulated battery c.10
    5bda:	80 e3       	ldi	r24, 0x30	; 48
    5bdc:	8a 83       	std	Y+2, r24	; 0x02
			ptrResist->tens = ASCII_1;
    5bde:	81 e3       	ldi	r24, 0x31	; 49
    5be0:	89 83       	std	Y+1, r24	; 0x01
			ptrResist->hundreds = ASCII_c_dp;						//Capital C will be interpreted by ATTINY as a lowercase c with decimal. 
    5be2:	8c e5       	ldi	r24, 0x5C	; 92
    5be4:	88 83       	st	Y, r24
			//ptrResist->decimal = ASCII_decimal;
		#endif	
		break;
    5be6:	13 c0       	rjmp	.+38     	; 0x5c0e <SwitchToDemoModePtr+0xa8>
			ptrResist->ones = LED_number_0;							// display simulated battery b.20
			ptrResist->tens = LED_number_2;
			ptrResist->hundreds = Letter_b_dp;
		#endif
		#ifdef ATTINY
			ptrResist->ones = ASCII_0;							// display simulated battery c.10
    5be8:	80 e3       	ldi	r24, 0x30	; 48
    5bea:	8a 83       	std	Y+2, r24	; 0x02
			ptrResist->tens = ASCII_2;
    5bec:	82 e3       	ldi	r24, 0x32	; 50
    5bee:	89 83       	std	Y+1, r24	; 0x01
			ptrResist->hundreds = ASCII_b_dp;						//Capital B will be interpreted by ATTINY as a lowercase b with decimal. 
    5bf0:	8b e5       	ldi	r24, 0x5B	; 91
    5bf2:	88 83       	st	Y, r24
			//ptrResist->decimal = ASCII_decimal;		
		#endif		
		break;
    5bf4:	0c c0       	rjmp	.+24     	; 0x5c0e <SwitchToDemoModePtr+0xa8>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    5bf6:	81 b1       	in	r24, 0x01	; 1
    5bf8:	80 61       	ori	r24, 0x10	; 16
    5bfa:	81 b9       	out	0x01, r24	; 1
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5bfc:	81 b1       	in	r24, 0x01	; 1
    5bfe:	8f 7e       	andi	r24, 0xEF	; 239
    5c00:	81 b9       	out	0x01, r24	; 1
			ptrResist->hundreds = Letter_c_dp;
		#endif
		#ifdef ATTINY
		//	ReverseMarchingAnts_set_level(false);
			MarchingAnts_set_level(false);
			ptrResist->ones = ASCII_9;							// display simulated battery c.10
    5c02:	89 e3       	ldi	r24, 0x39	; 57
    5c04:	8a 83       	std	Y+2, r24	; 0x02
			ptrResist->tens = ASCII_6;
    5c06:	86 e3       	ldi	r24, 0x36	; 54
    5c08:	89 83       	std	Y+1, r24	; 0x01
			ptrResist->hundreds = ASCII_c_dp;						//Capital C will be interpreted by ATTINY as a lowercase c with decimal. 
    5c0a:	8c e5       	ldi	r24, 0x5C	; 92
    5c0c:	88 83       	st	Y, r24
	#endif
	#ifdef ATTINY
		//Need way to convert LEDs to ASCII	
		
	#endif		
		array_SYBT[1].Resistance = SYBT_DemoR;				//Sends "Demo" to app to display in resistance window.
    5c0e:	e1 e6       	ldi	r30, 0x61	; 97
    5c10:	f8 e4       	ldi	r31, 0x48	; 72
    5c12:	87 ee       	ldi	r24, 0xE7	; 231
    5c14:	93 e0       	ldi	r25, 0x03	; 3
    5c16:	86 a7       	std	Z+46, r24	; 0x2e
    5c18:	97 a7       	std	Z+47, r25	; 0x2f
		array_SYBT[1].Temperature = SYBT_DemoT;					//Sends "Demo" to app to display in resistance window.
    5c1a:	27 eb       	ldi	r18, 0xB7	; 183
    5c1c:	3b e0       	ldi	r19, 0x0B	; 11
    5c1e:	24 a3       	std	Z+36, r18	; 0x24
    5c20:	35 a3       	std	Z+37, r19	; 0x25
		array_SYBT[1].Volts_noload1 = SYBT_DemoR;		
    5c22:	82 8f       	std	Z+26, r24	; 0x1a
    5c24:	93 8f       	std	Z+27, r25	; 0x1b
	
	
		ptrCal->Sleep_1 = 800000;
    5c26:	f8 01       	movw	r30, r16
    5c28:	e6 58       	subi	r30, 0x86	; 134
    5c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c2c:	80 e0       	ldi	r24, 0x00	; 0
    5c2e:	95 e3       	ldi	r25, 0x35	; 53
    5c30:	ac e0       	ldi	r26, 0x0C	; 12
    5c32:	b0 e0       	ldi	r27, 0x00	; 0
    5c34:	80 83       	st	Z, r24
    5c36:	91 83       	std	Z+1, r25	; 0x01
    5c38:	a2 83       	std	Z+2, r26	; 0x02
    5c3a:	b3 83       	std	Z+3, r27	; 0x03
		ptrCal->Sleep_2 = 800000;
    5c3c:	34 96       	adiw	r30, 0x04	; 4
    5c3e:	80 83       	st	Z, r24
    5c40:	91 83       	std	Z+1, r25	; 0x01
    5c42:	a2 83       	std	Z+2, r26	; 0x02
    5c44:	b3 83       	std	Z+3, r27	; 0x03
}
    5c46:	df 91       	pop	r29
    5c48:	cf 91       	pop	r28
    5c4a:	1f 91       	pop	r17
    5c4c:	0f 91       	pop	r16
    5c4e:	08 95       	ret

00005c50 <MeasureLXvoltage>:
//-------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------
bool MeasureLXvoltage( struct volts_noload *ptrVolts){						// Detect and measure if LX battery is connected
    5c50:	cf 92       	push	r12
    5c52:	df 92       	push	r13
    5c54:	ef 92       	push	r14
    5c56:	ff 92       	push	r15
    5c58:	cf 93       	push	r28
    5c5a:	df 93       	push	r29
    5c5c:	ec 01       	movw	r28, r24
			
	SYBT.LXvoltage = (((float)cal.LXvoltage_cal/1000) * (ADC_0_get_conversion(ADC_LXvoltage) >> 2))/10;  // Temporary raised to 2 to get around the E3S adapter adding voltage from thermistor amp to this terminal
    5c5e:	60 91 43 53 	lds	r22, 0x5343	; 0x805343 <cal+0x96>
    5c62:	70 91 44 53 	lds	r23, 0x5344	; 0x805344 <cal+0x97>
    5c66:	07 2e       	mov	r0, r23
    5c68:	00 0c       	add	r0, r0
    5c6a:	88 0b       	sbc	r24, r24
    5c6c:	99 0b       	sbc	r25, r25
    5c6e:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    5c72:	20 e0       	ldi	r18, 0x00	; 0
    5c74:	30 e0       	ldi	r19, 0x00	; 0
    5c76:	4a e7       	ldi	r20, 0x7A	; 122
    5c78:	54 e4       	ldi	r21, 0x44	; 68
    5c7a:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    5c7e:	6b 01       	movw	r12, r22
    5c80:	7c 01       	movw	r14, r24
    5c82:	80 e0       	ldi	r24, 0x00	; 0
    5c84:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    5c88:	96 95       	lsr	r25
    5c8a:	87 95       	ror	r24
    5c8c:	96 95       	lsr	r25
    5c8e:	87 95       	ror	r24
    5c90:	bc 01       	movw	r22, r24
    5c92:	80 e0       	ldi	r24, 0x00	; 0
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    5c9a:	a7 01       	movw	r20, r14
    5c9c:	96 01       	movw	r18, r12
    5c9e:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    5ca2:	20 e0       	ldi	r18, 0x00	; 0
    5ca4:	30 e0       	ldi	r19, 0x00	; 0
    5ca6:	40 e2       	ldi	r20, 0x20	; 32
    5ca8:	51 e4       	ldi	r21, 0x41	; 65
    5caa:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    5cae:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    5cb2:	9b 01       	movw	r18, r22
    5cb4:	60 93 5f 53 	sts	0x535F, r22	; 0x80535f <SYBT+0x18>
    5cb8:	70 93 60 53 	sts	0x5360, r23	; 0x805360 <SYBT+0x19>
		if(SYBT.LXvoltage > 2){
    5cbc:	63 30       	cpi	r22, 0x03	; 3
    5cbe:	71 05       	cpc	r23, r1
    5cc0:	4c f1       	brlt	.+82     	; 0x5d14 <MeasureLXvoltage+0xc4>
		 IsLXbattery = true;
    5cc2:	81 e0       	ldi	r24, 0x01	; 1
    5cc4:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
				ptrVolts->tens = LED_charactermap((SYBT.LXvoltage/10)%10);
				ptrVolts->hundreds = LED_charactermap((SYBT.LXvoltage/100)%10);
			#endif
			#ifdef ATTINY
			
				ptrVolts->ones = (SYBT.LXvoltage%10);						// If connected to a battery, display results.  Otherwise show dashes
    5cc8:	ea e0       	ldi	r30, 0x0A	; 10
    5cca:	f0 e0       	ldi	r31, 0x00	; 0
    5ccc:	c9 01       	movw	r24, r18
    5cce:	bf 01       	movw	r22, r30
    5cd0:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5cd4:	8a 83       	std	Y+2, r24	; 0x02
				ptrVolts->tens = ((SYBT.LXvoltage/10)%10);
    5cd6:	27 e4       	ldi	r18, 0x47	; 71
    5cd8:	33 e5       	ldi	r19, 0x53	; 83
    5cda:	d9 01       	movw	r26, r18
    5cdc:	58 96       	adiw	r26, 0x18	; 24
    5cde:	8d 91       	ld	r24, X+
    5ce0:	9c 91       	ld	r25, X
    5ce2:	59 97       	sbiw	r26, 0x19	; 25
    5ce4:	bf 01       	movw	r22, r30
    5ce6:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5cea:	cb 01       	movw	r24, r22
    5cec:	bf 01       	movw	r22, r30
    5cee:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5cf2:	89 83       	std	Y+1, r24	; 0x01
				ptrVolts->hundreds = ((SYBT.LXvoltage/100)%10);
    5cf4:	d9 01       	movw	r26, r18
    5cf6:	58 96       	adiw	r26, 0x18	; 24
    5cf8:	8d 91       	ld	r24, X+
    5cfa:	9c 91       	ld	r25, X
    5cfc:	59 97       	sbiw	r26, 0x19	; 25
    5cfe:	64 e6       	ldi	r22, 0x64	; 100
    5d00:	70 e0       	ldi	r23, 0x00	; 0
    5d02:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5d06:	cb 01       	movw	r24, r22
    5d08:	bf 01       	movw	r22, r30
    5d0a:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    5d0e:	88 83       	st	Y, r24
				//ptrVolts->hundreds = ConvertToASCII((SYBT.LXvoltage/100)%10);
				#ifndef DemoMode
					SendLXVoltsToLEDs();
				#endif							
			#endif
			return true;
    5d10:	81 e0       	ldi	r24, 0x01	; 1
    5d12:	04 c0       	rjmp	.+8      	; 0x5d1c <MeasureLXvoltage+0xcc>
			#endif	
			#ifdef ATTINY
				//ptrVolts->ones = ASCII_DASH;						// If connected to a battery, display results.  Otherwise show dashes?
				//ptrVolts->tens = ConvertToASCII((SYBT.LXvoltage/10)%10);
				//ptrVolts->hundreds = ASCII_DASH;
				ptrVolts->ones = 0;						// If connected to a battery, display results.  Otherwise show dashes?
    5d14:	1a 82       	std	Y+2, r1	; 0x02
				ptrVolts->tens = 0;
    5d16:	19 82       	std	Y+1, r1	; 0x01
				ptrVolts->hundreds = 0;
    5d18:	18 82       	st	Y, r1
				//SendLXVoltsToLEDs();				
			#endif
			return false;	
    5d1a:	80 e0       	ldi	r24, 0x00	; 0
		}
}
    5d1c:	df 91       	pop	r29
    5d1e:	cf 91       	pop	r28
    5d20:	ff 90       	pop	r15
    5d22:	ef 90       	pop	r14
    5d24:	df 90       	pop	r13
    5d26:	cf 90       	pop	r12
    5d28:	08 95       	ret

00005d2a <IsSYBT5orE3SadapterConnected>:
bool IsSYBT5orE3SadapterConnected(void){						// Detect and measure if LX battery is connected or if E3S battery is connected

char temporaryString[12];
	adc_result_t E3S;
	//uint8_t E3S;
	E3S = (ADC_0_get_conversion(ADC_SYBT5_Or_E3S) >> 2)/1;  //
    5d2a:	82 e0       	ldi	r24, 0x02	; 2
    5d2c:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    5d30:	96 95       	lsr	r25
    5d32:	87 95       	ror	r24
    5d34:	96 95       	lsr	r25
    5d36:	87 95       	ror	r24
	
	//sprintf(temporaryString,"E3S %u\n",E3S);
	//USART0_sendString(temporaryString);

	if(E3S > 200 && E3S < 600 ){				// Is an E3S battery
    5d38:	9c 01       	movw	r18, r24
    5d3a:	29 5c       	subi	r18, 0xC9	; 201
    5d3c:	31 09       	sbc	r19, r1
    5d3e:	2f 38       	cpi	r18, 0x8F	; 143
    5d40:	31 40       	sbci	r19, 0x01	; 1
    5d42:	40 f4       	brcc	.+16     	; 0x5d54 <IsSYBT5orE3SadapterConnected+0x2a>
		//USART0_sendString("E3S_Connected\n");
		IsE3Sbattery = true;
    5d44:	81 e0       	ldi	r24, 0x01	; 1
    5d46:	80 93 5c 54 	sts	0x545C, r24	; 0x80545c <IsE3Sbattery>
		TypeOfBatteryConnected = 3;				//E3S is battery Type 3
    5d4a:	83 e0       	ldi	r24, 0x03	; 3
    5d4c:	80 93 4d 48 	sts	0x484D, r24	; 0x80484d <TypeOfBatteryConnected>
		return true;
    5d50:	81 e0       	ldi	r24, 0x01	; 1
    5d52:	08 95       	ret
	}
	else if(E3S < 100){						// Is an SYBT5 battery
    5d54:	84 36       	cpi	r24, 0x64	; 100
    5d56:	91 05       	cpc	r25, r1
    5d58:	38 f4       	brcc	.+14     	; 0x5d68 <IsSYBT5orE3SadapterConnected+0x3e>
		IsE3Sbattery = false;
    5d5a:	10 92 5c 54 	sts	0x545C, r1	; 0x80545c <IsE3Sbattery>
		TypeOfBatteryConnected = 2;			//SYBT5 is battery Type 2
    5d5e:	82 e0       	ldi	r24, 0x02	; 2
    5d60:	80 93 4d 48 	sts	0x484D, r24	; 0x80484d <TypeOfBatteryConnected>
		return false;
    5d64:	80 e0       	ldi	r24, 0x00	; 0
    5d66:	08 95       	ret
	}
	else if(E3S > 700){						// Must be PX battery
    5d68:	8d 3b       	cpi	r24, 0xBD	; 189
    5d6a:	92 40       	sbci	r25, 0x02	; 2
    5d6c:	30 f0       	brcs	.+12     	; 0x5d7a <IsSYBT5orE3SadapterConnected+0x50>
		IsE3Sbattery = false;
    5d6e:	10 92 5c 54 	sts	0x545C, r1	; 0x80545c <IsE3Sbattery>
		TypeOfBatteryConnected = 1;			//SYBTU is battery Type 1
    5d72:	81 e0       	ldi	r24, 0x01	; 1
    5d74:	80 93 4d 48 	sts	0x484D, r24	; 0x80484d <TypeOfBatteryConnected>
		return true;
    5d78:	08 95       	ret
	}
	else{
		IsE3Sbattery = false;				// Default to PX for safety
    5d7a:	10 92 5c 54 	sts	0x545C, r1	; 0x80545c <IsE3Sbattery>
		TypeOfBatteryConnected = 0;			//Default is battery Type 0
    5d7e:	10 92 4d 48 	sts	0x484D, r1	; 0x80484d <TypeOfBatteryConnected>
		return true;
    5d82:	81 e0       	ldi	r24, 0x01	; 1
	}
    
    5d84:	08 95       	ret

00005d86 <main>:
//float tempTemperature;

struct cal;	// this and extern struct cal are here to satisfy compiler complaints about the struct pointers

int main(void)
{	
    5d86:	cf 93       	push	r28
    5d88:	df 93       	push	r29
    5d8a:	cd b7       	in	r28, 0x3d	; 61
    5d8c:	de b7       	in	r29, 0x3e	; 62
    5d8e:	2b 97       	sbiw	r28, 0x0b	; 11
    5d90:	cd bf       	out	0x3d, r28	; 61
    5d92:	de bf       	out	0x3e, r29	; 62
	int LXvoltageValue;
	int LEDcolumn;
	//uint32_t Resistance = 0;
	uint32_t BluetoothSleepTimer;
	uint32_t InternalBatteryOffDelay;	
	cal.ResistA_cal = 1096;
    5d94:	ed ea       	ldi	r30, 0xAD	; 173
    5d96:	f2 e5       	ldi	r31, 0x52	; 82
    5d98:	88 e4       	ldi	r24, 0x48	; 72
    5d9a:	94 e0       	ldi	r25, 0x04	; 4
    5d9c:	84 87       	std	Z+12, r24	; 0x0c
    5d9e:	95 87       	std	Z+13, r25	; 0x0d
	cal.ResistB_cal= 1027;
    5da0:	83 e0       	ldi	r24, 0x03	; 3
    5da2:	94 e0       	ldi	r25, 0x04	; 4
    5da4:	86 87       	std	Z+14, r24	; 0x0e
    5da6:	97 87       	std	Z+15, r25	; 0x0f
	cal.SYBT_ad_cal = 1497;
    5da8:	89 ed       	ldi	r24, 0xD9	; 217
    5daa:	95 e0       	ldi	r25, 0x05	; 5
    5dac:	84 83       	std	Z+4, r24	; 0x04
    5dae:	95 83       	std	Z+5, r25	; 0x05
	cal.Load_ad_cal = 1390;	
    5db0:	8e e6       	ldi	r24, 0x6E	; 110
    5db2:	95 e0       	ldi	r25, 0x05	; 5
    5db4:	82 87       	std	Z+10, r24	; 0x0a
    5db6:	93 87       	std	Z+11, r25	; 0x0b
	Rows = 1;	
    5db8:	81 e0       	ldi	r24, 0x01	; 1
    5dba:	80 93 5d 54 	sts	0x545D, r24	; 0x80545d <Rows>
	SYBTcount = 1;
    5dbe:	81 e0       	ldi	r24, 0x01	; 1
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	80 93 4e 48 	sts	0x484E, r24	; 0x80484e <SYBTcount>
    5dc6:	90 93 4f 48 	sts	0x484F, r25	; 0x80484f <SYBTcount+0x1>
	DisplayVoltageDropTimer = 10000;
    5dca:	80 e1       	ldi	r24, 0x10	; 16
    5dcc:	97 e2       	ldi	r25, 0x27	; 39
    5dce:	a0 e0       	ldi	r26, 0x00	; 0
    5dd0:	b0 e0       	ldi	r27, 0x00	; 0
    5dd2:	8a 83       	std	Y+2, r24	; 0x02
    5dd4:	9b 83       	std	Y+3, r25	; 0x03
    5dd6:	ac 83       	std	Y+4, r26	; 0x04
    5dd8:	bd 83       	std	Y+5, r27	; 0x05
	
	c1 = 2.399163584e-03;
    5dda:	89 e4       	ldi	r24, 0x49	; 73
    5ddc:	9b e3       	ldi	r25, 0x3B	; 59
    5dde:	ad e1       	ldi	r26, 0x1D	; 29
    5de0:	bb e3       	ldi	r27, 0x3B	; 59
    5de2:	80 93 f7 53 	sts	0x53F7, r24	; 0x8053f7 <c1>
    5de6:	90 93 f8 53 	sts	0x53F8, r25	; 0x8053f8 <c1+0x1>
    5dea:	a0 93 f9 53 	sts	0x53F9, r26	; 0x8053f9 <c1+0x2>
    5dee:	b0 93 fa 53 	sts	0x53FA, r27	; 0x8053fa <c1+0x3>
	c2 = 0.2684971175e-04;
    5df2:	81 e5       	ldi	r24, 0x51	; 81
    5df4:	9b e3       	ldi	r25, 0x3B	; 59
    5df6:	a1 ee       	ldi	r26, 0xE1	; 225
    5df8:	b7 e3       	ldi	r27, 0x37	; 55
    5dfa:	80 93 5d 48 	sts	0x485D, r24	; 0x80485d <c2>
    5dfe:	90 93 5e 48 	sts	0x485E, r25	; 0x80485e <c2+0x1>
    5e02:	a0 93 5f 48 	sts	0x485F, r26	; 0x80485f <c2+0x2>
    5e06:	b0 93 60 48 	sts	0x4860, r27	; 0x804860 <c2+0x3>
	c3 = 8.748793546e-07;
    5e0a:	80 e4       	ldi	r24, 0x40	; 64
    5e0c:	99 ed       	ldi	r25, 0xD9	; 217
    5e0e:	aa e6       	ldi	r26, 0x6A	; 106
    5e10:	b5 e3       	ldi	r27, 0x35	; 53
    5e12:	80 93 76 54 	sts	0x5476, r24	; 0x805476 <c3>
    5e16:	90 93 77 54 	sts	0x5477, r25	; 0x805477 <c3+0x1>
    5e1a:	a0 93 78 54 	sts	0x5478, r26	; 0x805478 <c3+0x2>
    5e1e:	b0 93 79 54 	sts	0x5479, r27	; 0x805479 <c3+0x3>
	//uint8_t string[40];

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    5e22:	0e 94 a0 01 	call	0x340	; 0x340 <atmel_start_init>
	wdt_reset();
    5e26:	a8 95       	wdr
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
    5e28:	8d b1       	in	r24, 0x0d	; 13
    5e2a:	80 68       	ori	r24, 0x80	; 128
    5e2c:	8d b9       	out	0x0d, r24	; 13
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
    5e2e:	85 b3       	in	r24, 0x15	; 21
    5e30:	80 62       	ori	r24, 0x20	; 32
    5e32:	85 bb       	out	0x15, r24	; 21
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    5e34:	85 b1       	in	r24, 0x05	; 5
    5e36:	8f 7d       	andi	r24, 0xDF	; 223
    5e38:	85 b9       	out	0x05, r24	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
    5e3a:	81 b3       	in	r24, 0x11	; 17
    5e3c:	84 60       	ori	r24, 0x04	; 4
    5e3e:	81 bb       	out	0x11, r24	; 17
		FT2_set_level(false);				//start with relay 2 off		
		BlueLED_set_level(true);			//not really needed here, just a reminder that the two are normally used together.  
		#endif	
	#endif		
	//RESET_set_level(true); //start with light load IGBT off
	if(CheckEEPROMvalues()){
    5e40:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <CheckEEPROMvalues>
	}
		
if(New_Bluetooth_Name)RenameBluetooth();			//if new name flag is set, run the renaming function.
    5e44:	80 91 a3 54 	lds	r24, 0x54A3	; 0x8054a3 <New_Bluetooth_Name>
    5e48:	90 91 a4 54 	lds	r25, 0x54A4	; 0x8054a4 <New_Bluetooth_Name+0x1>
    5e4c:	89 2b       	or	r24, r25
    5e4e:	11 f0       	breq	.+4      	; 0x5e54 <main+0xce>
    5e50:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <RenameBluetooth>
		
#ifndef LowBatteryAlert  // if there is no low battery alert, then set display to full brightness. 
	DimDisplay = true;
#endif	

if(startup_delay < 10000){		//This gives the Bluetooth module time to wake up.
    5e54:	80 91 b4 54 	lds	r24, 0x54B4	; 0x8054b4 <startup_delay>
    5e58:	90 91 b5 54 	lds	r25, 0x54B5	; 0x8054b5 <startup_delay+0x1>
    5e5c:	80 31       	cpi	r24, 0x10	; 16
    5e5e:	27 e2       	ldi	r18, 0x27	; 39
    5e60:	92 07       	cpc	r25, r18
    5e62:	40 f4       	brcc	.+16     	; 0x5e74 <main+0xee>
	startup_delay += 1;
    5e64:	01 96       	adiw	r24, 0x01	; 1
    5e66:	80 93 b4 54 	sts	0x54B4, r24	; 0x8054b4 <startup_delay>
    5e6a:	90 93 b5 54 	sts	0x54B5, r25	; 0x8054b5 <startup_delay+0x1>
	wdt_reset();
    5e6e:	a8 95       	wdr
	USART0.RXDATAL;  
    5e70:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
//	else{
//			
//		}
	
FirstRun = true;  // not needed anymore
TurnEverythingOn();					// replaces several lines of code for readability  seeing if this restarts after a watchdog event
    5e74:	0e 94 98 19 	call	0x3330	; 0x3330 <TurnEverythingOn>

	
while (1) {	
	SleepTimer += 1;
    5e78:	80 91 b0 54 	lds	r24, 0x54B0	; 0x8054b0 <SleepTimer>
    5e7c:	90 91 b1 54 	lds	r25, 0x54B1	; 0x8054b1 <SleepTimer+0x1>
    5e80:	a0 91 b2 54 	lds	r26, 0x54B2	; 0x8054b2 <SleepTimer+0x2>
    5e84:	b0 91 b3 54 	lds	r27, 0x54B3	; 0x8054b3 <SleepTimer+0x3>
    5e88:	01 96       	adiw	r24, 0x01	; 1
    5e8a:	a1 1d       	adc	r26, r1
    5e8c:	b1 1d       	adc	r27, r1
    5e8e:	80 93 b0 54 	sts	0x54B0, r24	; 0x8054b0 <SleepTimer>
    5e92:	90 93 b1 54 	sts	0x54B1, r25	; 0x8054b1 <SleepTimer+0x1>
    5e96:	a0 93 b2 54 	sts	0x54B2, r26	; 0x8054b2 <SleepTimer+0x2>
    5e9a:	b0 93 b3 54 	sts	0x54B3, r27	; 0x8054b3 <SleepTimer+0x3>
	BluetoothSleepTimer += 1;	
    5e9e:	8f ef       	ldi	r24, 0xFF	; 255
    5ea0:	48 1a       	sub	r4, r24
    5ea2:	58 0a       	sbc	r5, r24
    5ea4:	68 0a       	sbc	r6, r24
    5ea6:	78 0a       	sbc	r7, r24
	number_of_loops += 1;
    5ea8:	80 91 b8 54 	lds	r24, 0x54B8	; 0x8054b8 <number_of_loops>
    5eac:	90 91 b9 54 	lds	r25, 0x54B9	; 0x8054b9 <number_of_loops+0x1>
    5eb0:	01 96       	adiw	r24, 0x01	; 1
    5eb2:	80 93 b8 54 	sts	0x54B8, r24	; 0x8054b8 <number_of_loops>
    5eb6:	90 93 b9 54 	sts	0x54B9, r25	; 0x8054b9 <number_of_loops+0x1>
	ATTINYTimer ++;
    5eba:	80 91 ba 54 	lds	r24, 0x54BA	; 0x8054ba <ATTINYTimer>
    5ebe:	90 91 bb 54 	lds	r25, 0x54BB	; 0x8054bb <ATTINYTimer+0x1>
    5ec2:	a0 91 bc 54 	lds	r26, 0x54BC	; 0x8054bc <ATTINYTimer+0x2>
    5ec6:	b0 91 bd 54 	lds	r27, 0x54BD	; 0x8054bd <ATTINYTimer+0x3>
    5eca:	01 96       	adiw	r24, 0x01	; 1
    5ecc:	a1 1d       	adc	r26, r1
    5ece:	b1 1d       	adc	r27, r1
    5ed0:	80 93 ba 54 	sts	0x54BA, r24	; 0x8054ba <ATTINYTimer>
    5ed4:	90 93 bb 54 	sts	0x54BB, r25	; 0x8054bb <ATTINYTimer+0x1>
    5ed8:	a0 93 bc 54 	sts	0x54BC, r26	; 0x8054bc <ATTINYTimer+0x2>
    5edc:	b0 93 bd 54 	sts	0x54BD, r27	; 0x8054bd <ATTINYTimer+0x3>
	if(ATTINYTimer > 2147483647)ATTINYTimer = 0;
    5ee0:	bb 23       	and	r27, r27
    5ee2:	44 f4       	brge	.+16     	; 0x5ef4 <main+0x16e>
    5ee4:	10 92 ba 54 	sts	0x54BA, r1	; 0x8054ba <ATTINYTimer>
    5ee8:	10 92 bb 54 	sts	0x54BB, r1	; 0x8054bb <ATTINYTimer+0x1>
    5eec:	10 92 bc 54 	sts	0x54BC, r1	; 0x8054bc <ATTINYTimer+0x2>
    5ef0:	10 92 bd 54 	sts	0x54BD, r1	; 0x8054bd <ATTINYTimer+0x3>
	LED1_set_level(false);
	LED4_set_level(false);
	BlueLED_set_level(true);   
#endif	
	
	if (Unfinished_Business & Unfinished_Beep){
    5ef4:	80 91 a5 54 	lds	r24, 0x54A5	; 0x8054a5 <Unfinished_Business>
    5ef8:	83 ff       	sbrs	r24, 3
    5efa:	21 c0       	rjmp	.+66     	; 0x5f3e <main+0x1b8>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    5efc:	89 b1       	in	r24, 0x09	; 9
    5efe:	80 61       	ori	r24, 0x10	; 16
    5f00:	89 b9       	out	0x09, r24	; 9
    5f02:	9f e7       	ldi	r25, 0x7F	; 127
    5f04:	28 e3       	ldi	r18, 0x38	; 56
    5f06:	81 e0       	ldi	r24, 0x01	; 1
    5f08:	91 50       	subi	r25, 0x01	; 1
    5f0a:	20 40       	sbci	r18, 0x00	; 0
    5f0c:	80 40       	sbci	r24, 0x00	; 0
    5f0e:	e1 f7       	brne	.-8      	; 0x5f08 <main+0x182>
    5f10:	00 c0       	rjmp	.+0      	; 0x5f12 <main+0x18c>
    5f12:	00 00       	nop
	} else {
		VPORTC.OUT &= ~(1 << pin);
    5f14:	89 b1       	in	r24, 0x09	; 9
    5f16:	8f 7e       	andi	r24, 0xEF	; 239
    5f18:	89 b9       	out	0x09, r24	; 9
		Beeper_set_level(true);
		_delay_ms(100);
		Beeper_set_level(false);
		Unfinished_Business ^= Unfinished_Beep;
    5f1a:	80 91 a5 54 	lds	r24, 0x54A5	; 0x8054a5 <Unfinished_Business>
    5f1e:	90 91 a6 54 	lds	r25, 0x54A6	; 0x8054a6 <Unfinished_Business+0x1>
    5f22:	a0 91 a7 54 	lds	r26, 0x54A7	; 0x8054a7 <Unfinished_Business+0x2>
    5f26:	b0 91 a8 54 	lds	r27, 0x54A8	; 0x8054a8 <Unfinished_Business+0x3>
    5f2a:	28 e0       	ldi	r18, 0x08	; 8
    5f2c:	82 27       	eor	r24, r18
    5f2e:	80 93 a5 54 	sts	0x54A5, r24	; 0x8054a5 <Unfinished_Business>
    5f32:	90 93 a6 54 	sts	0x54A6, r25	; 0x8054a6 <Unfinished_Business+0x1>
    5f36:	a0 93 a7 54 	sts	0x54A7, r26	; 0x8054a7 <Unfinished_Business+0x2>
    5f3a:	b0 93 a8 54 	sts	0x54A8, r27	; 0x8054a8 <Unfinished_Business+0x3>
	}
		
	if((8191)==(SleepTimer & 8191)){				//It appears that LX battery prevents 8191 from ever happening
    5f3e:	e0 90 b0 54 	lds	r14, 0x54B0	; 0x8054b0 <SleepTimer>
    5f42:	f0 90 b1 54 	lds	r15, 0x54B1	; 0x8054b1 <SleepTimer+0x1>
    5f46:	00 91 b2 54 	lds	r16, 0x54B2	; 0x8054b2 <SleepTimer+0x2>
    5f4a:	10 91 b3 54 	lds	r17, 0x54B3	; 0x8054b3 <SleepTimer+0x3>
    5f4e:	d8 01       	movw	r26, r16
    5f50:	c7 01       	movw	r24, r14
    5f52:	9f 71       	andi	r25, 0x1F	; 31
    5f54:	aa 27       	eor	r26, r26
    5f56:	bb 27       	eor	r27, r27
    5f58:	8f 3f       	cpi	r24, 0xFF	; 255
    5f5a:	9f 41       	sbci	r25, 0x1F	; 31
    5f5c:	a1 05       	cpc	r26, r1
    5f5e:	b1 05       	cpc	r27, r1
    5f60:	b1 f4       	brne	.+44     	; 0x5f8e <main+0x208>
		//USART0_sendString("8191\n");  Put here to test when 8191 condition is met. 
		if((!DisableBluetooth) && FirstRun){
    5f62:	31 10       	cpse	r3, r1
    5f64:	0d c0       	rjmp	.+26     	; 0x5f80 <main+0x1fa>
			Gather_Battery_Data(SixVoltBattery,FiveVoltBus,LXvoltageValue,SYBTgood,SleepTimer,BluetoothSleepTimer);		
    5f66:	63 01       	movw	r12, r6
    5f68:	52 01       	movw	r10, r4
    5f6a:	29 81       	ldd	r18, Y+1	; 0x01
    5f6c:	40 e0       	ldi	r20, 0x00	; 0
    5f6e:	50 e0       	ldi	r21, 0x00	; 0
    5f70:	60 e0       	ldi	r22, 0x00	; 0
    5f72:	70 e0       	ldi	r23, 0x00	; 0
    5f74:	80 91 85 54 	lds	r24, 0x5485	; 0x805485 <SixVoltBattery>
    5f78:	90 91 86 54 	lds	r25, 0x5486	; 0x805486 <SixVoltBattery+0x1>
    5f7c:	0e 94 4c 20 	call	0x4098	; 0x4098 <Gather_Battery_Data>
		}
		//Gather_Battery_Data(SixVoltBattery,FiveVoltBus,SYBTgood);
		EEpromData1 = FLASH_0_read_eeprom_byte(1);
    5f80:	81 e0       	ldi	r24, 0x01	; 1
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	0e 94 49 34 	call	0x6892	; 0x6892 <FLASH_0_read_eeprom_byte>
    5f88:	80 93 59 48 	sts	0x4859, r24	; 0x804859 <EEpromData1>
    5f8c:	33 c0       	rjmp	.+102    	; 0x5ff4 <main+0x26e>
	}
	else if((4095)==(SleepTimer & 4095)){   //was 8191
    5f8e:	d8 01       	movw	r26, r16
    5f90:	c7 01       	movw	r24, r14
    5f92:	9f 70       	andi	r25, 0x0F	; 15
    5f94:	aa 27       	eor	r26, r26
    5f96:	bb 27       	eor	r27, r27
    5f98:	8f 3f       	cpi	r24, 0xFF	; 255
    5f9a:	9f 40       	sbci	r25, 0x0F	; 15
    5f9c:	a1 05       	cpc	r26, r1
    5f9e:	b1 05       	cpc	r27, r1
    5fa0:	e9 f4       	brne	.+58     	; 0x5fdc <main+0x256>
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
    5fa2:	85 b3       	in	r24, 0x15	; 21
    5fa4:	80 62       	ori	r24, 0x20	; 32
    5fa6:	85 bb       	out	0x15, r24	; 21
	} else {
		VPORTF.OUT &= ~(1 << pin);
    5fa8:	85 b3       	in	r24, 0x15	; 21
    5faa:	8f 7e       	andi	r24, 0xEF	; 239
    5fac:	85 bb       	out	0x15, r24	; 21
		
		Load_IGBT_set_level(true);		//ensure IGBT is off
		Load_Relay_set_level(false);	//ensure relay is off
		
		#ifdef Measure6voltBattery
			SixVoltBattery = MeasureSixVoltBattery(&SixVBatteryOK,cal.Nine_V_ad_cal,SYBTisProvidingPower);
    5fae:	60 91 b3 52 	lds	r22, 0x52B3	; 0x8052b3 <cal+0x6>
    5fb2:	70 91 b4 52 	lds	r23, 0x52B4	; 0x8052b4 <cal+0x7>
    5fb6:	40 91 4a 48 	lds	r20, 0x484A	; 0x80484a <SYBTisProvidingPower>
    5fba:	ce 01       	movw	r24, r28
    5fbc:	08 96       	adiw	r24, 0x08	; 8
    5fbe:	0e 94 1a 23 	call	0x4634	; 0x4634 <MeasureSixVoltBattery>
    5fc2:	80 93 85 54 	sts	0x5485, r24	; 0x805485 <SixVoltBattery>
    5fc6:	90 93 86 54 	sts	0x5486, r25	; 0x805486 <SixVoltBattery+0x1>
			SixVoltBattery = 888;			// this is used to tell the app that there is no 6v battery measurement capability.
		#endif
		
		
		
		if(FirstRun == true)UnfinishedTXbusiness();  //handles timing of Bluetooth transmissions
    5fca:	0e 94 3e 19 	call	0x327c	; 0x327c <UnfinishedTXbusiness>
		MeasureInternalTemperature(&SYBT,&cal);
    5fce:	6d ea       	ldi	r22, 0xAD	; 173
    5fd0:	72 e5       	ldi	r23, 0x52	; 82
    5fd2:	87 e4       	ldi	r24, 0x47	; 71
    5fd4:	93 e5       	ldi	r25, 0x53	; 83
    5fd6:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <MeasureInternalTemperature>
    5fda:	0c c0       	rjmp	.+24     	; 0x5ff4 <main+0x26e>
		#ifdef HeatSinkThermistorInstalled
		MeasureHeatSinkTemperature(&SYBT,&cal);
		#endif		
	}
	else if((2047)==(SleepTimer & 2047)){   //
    5fdc:	d8 01       	movw	r26, r16
    5fde:	c7 01       	movw	r24, r14
    5fe0:	97 70       	andi	r25, 0x07	; 7
    5fe2:	aa 27       	eor	r26, r26
    5fe4:	bb 27       	eor	r27, r27
    5fe6:	8f 3f       	cpi	r24, 0xFF	; 255
    5fe8:	97 40       	sbci	r25, 0x07	; 7
    5fea:	a1 05       	cpc	r26, r1
    5fec:	b1 05       	cpc	r27, r1
    5fee:	11 f4       	brne	.+4      	; 0x5ff4 <main+0x26e>
		
	if(FirstRun == true)UnfinishedTXbusiness();  //handles timing of Bluetooth transmissions
    5ff0:	0e 94 3e 19 	call	0x327c	; 0x327c <UnfinishedTXbusiness>
			else DimDisplay = false;											//turns off temp and resistance when on 6 volt power
		}
		else DimDisplay = true;
	#endif	
	
	if(!Main_Button_get_level()){	
    5ff4:	b3 99       	sbic	0x16, 3	; 22
    5ff6:	02 c0       	rjmp	.+4      	; 0x5ffc <main+0x276>
		if (MainButtonDown){
    5ff8:	21 10       	cpse	r2, r1
			MainButtonDown = false;
    5ffa:	21 2c       	mov	r2, r1
		}		
	//if(MainButtonDown){;}
	//else {;}
//---------------------------------------------------------------------------------------------------------			
//	if(number_of_loops == Cycle_2){
	if((number_of_loops & 0x1FF)==0x1FF ){
    5ffc:	80 91 b8 54 	lds	r24, 0x54B8	; 0x8054b8 <number_of_loops>
    6000:	90 91 b9 54 	lds	r25, 0x54B9	; 0x8054b9 <number_of_loops+0x1>
    6004:	91 70       	andi	r25, 0x01	; 1
    6006:	8f 3f       	cpi	r24, 0xFF	; 255
    6008:	91 40       	sbci	r25, 0x01	; 1
    600a:	91 f4       	brne	.+36     	; 0x6030 <main+0x2aa>
		if(MeasureLXvoltage(&volts_noloadLX)){
    600c:	8e ef       	ldi	r24, 0xFE	; 254
    600e:	93 e5       	ldi	r25, 0x53	; 83
    6010:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <MeasureLXvoltage>
    6014:	88 23       	and	r24, r24
    6016:	21 f0       	breq	.+8      	; 0x6020 <main+0x29a>
			IsLXbattery = true;
    6018:	81 e0       	ldi	r24, 0x01	; 1
    601a:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
    601e:	08 c0       	rjmp	.+16     	; 0x6030 <main+0x2aa>
		}
		else{
			IsLXbattery = false;
    6020:	10 92 00 40 	sts	0x4000, r1	; 0x804000 <__DATA_REGION_ORIGIN__>
			MeasureSYBTvolts(&SYBTgood,&volts_noload);	
    6024:	62 e5       	ldi	r22, 0x52	; 82
    6026:	78 e4       	ldi	r23, 0x48	; 72
    6028:	ce 01       	movw	r24, r28
    602a:	01 96       	adiw	r24, 0x01	; 1
    602c:	0e 94 a8 28 	call	0x5150	; 0x5150 <MeasureSYBTvolts>
	//	if(MeasureSYBTvolts(&SYBTgood,&volts_noload)){
	//					IsLXbattery = false;
	//	}			
	}
//--------------------------------------------Get temperature. Either SYBT or internal temp----------------
	if(number_of_loops == Cycle_3)MeasureSYBTtemperature(BatteryTestOK,&DisplayVoltageDropTimer,Test_Status,&temperature);   // DisplayVoltageDropTimer =  I changed this
    6030:	80 91 b8 54 	lds	r24, 0x54B8	; 0x8054b8 <number_of_loops>
    6034:	90 91 b9 54 	lds	r25, 0x54B9	; 0x8054b9 <number_of_loops+0x1>
    6038:	8c 3d       	cpi	r24, 0xDC	; 220
    603a:	95 40       	sbci	r25, 0x05	; 5
    603c:	51 f4       	brne	.+20     	; 0x6052 <main+0x2cc>
    603e:	4e 81       	ldd	r20, Y+6	; 0x06
    6040:	5f 81       	ldd	r21, Y+7	; 0x07
    6042:	21 e6       	ldi	r18, 0x61	; 97
    6044:	33 e5       	ldi	r19, 0x53	; 83
    6046:	be 01       	movw	r22, r28
    6048:	6e 5f       	subi	r22, 0xFE	; 254
    604a:	7f 4f       	sbci	r23, 0xFF	; 255
    604c:	8b 85       	ldd	r24, Y+11	; 0x0b
    604e:	0e 94 57 2a 	call	0x54ae	; 0x54ae <MeasureSYBTtemperature>
	
//--------------------------------------------------------------------------------------------------										
	//FiveVoltBus = (((float)cal.Six_V_ad_cal/1000)*(ADC_0_get_conversion(ADC_Unused) >> 2));
		twentyfourvoltsupply = Measure24voltSupply();
    6052:	0e 94 cb 23 	call	0x4796	; 0x4796 <Measure24voltSupply>
    6056:	80 93 fc 53 	sts	0x53FC, r24	; 0x8053fc <twentyfourvoltsupply>
    605a:	90 93 fd 53 	sts	0x53FD, r25	; 0x8053fd <twentyfourvoltsupply+0x1>
		//twentyfourvoltsupply = 39;
//-------------------------------------------------------------------------------------------------Following functions are only when LX battery version is required
#ifdef LXbatteryCompatible  	
	SYBT.LXvoltage = (((float)cal.LXvoltage_cal/1000)*(ADC_0_get_conversion(ADC_LXvoltage) >> 2));
    605e:	60 91 43 53 	lds	r22, 0x5343	; 0x805343 <cal+0x96>
    6062:	70 91 44 53 	lds	r23, 0x5344	; 0x805344 <cal+0x97>
    6066:	07 2e       	mov	r0, r23
    6068:	00 0c       	add	r0, r0
    606a:	88 0b       	sbc	r24, r24
    606c:	99 0b       	sbc	r25, r25
    606e:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    6072:	20 e0       	ldi	r18, 0x00	; 0
    6074:	30 e0       	ldi	r19, 0x00	; 0
    6076:	4a e7       	ldi	r20, 0x7A	; 122
    6078:	54 e4       	ldi	r21, 0x44	; 68
    607a:	0e 94 2e 3a 	call	0x745c	; 0x745c <__divsf3>
    607e:	6b 01       	movw	r12, r22
    6080:	7c 01       	movw	r14, r24
    6082:	80 e0       	ldi	r24, 0x00	; 0
    6084:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    6088:	96 95       	lsr	r25
    608a:	87 95       	ror	r24
    608c:	96 95       	lsr	r25
    608e:	87 95       	ror	r24
    6090:	bc 01       	movw	r22, r24
    6092:	80 e0       	ldi	r24, 0x00	; 0
    6094:	90 e0       	ldi	r25, 0x00	; 0
    6096:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__floatunsisf>
    609a:	a7 01       	movw	r20, r14
    609c:	96 01       	movw	r18, r12
    609e:	0e 94 35 3c 	call	0x786a	; 0x786a <__mulsf3>
    60a2:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__fixsfsi>
    60a6:	60 93 5f 53 	sts	0x535F, r22	; 0x80535f <SYBT+0x18>
    60aa:	70 93 60 53 	sts	0x5360, r23	; 0x805360 <SYBT+0x19>
//--------------------------------------------------------------------------------------------------
	if(SleepTimer > 3000){ 
    60ae:	80 91 b0 54 	lds	r24, 0x54B0	; 0x8054b0 <SleepTimer>
    60b2:	90 91 b1 54 	lds	r25, 0x54B1	; 0x8054b1 <SleepTimer+0x1>
    60b6:	a0 91 b2 54 	lds	r26, 0x54B2	; 0x8054b2 <SleepTimer+0x2>
    60ba:	b0 91 b3 54 	lds	r27, 0x54B3	; 0x8054b3 <SleepTimer+0x3>
    60be:	89 3b       	cpi	r24, 0xB9	; 185
    60c0:	9b 40       	sbci	r25, 0x0B	; 11
    60c2:	a1 05       	cpc	r26, r1
    60c4:	b1 05       	cpc	r27, r1
    60c6:	d0 f0       	brcs	.+52     	; 0x60fc <main+0x376>
		if(!(Unfinished_Business & Finished_AutoCAl)){
    60c8:	80 91 a5 54 	lds	r24, 0x54A5	; 0x8054a5 <Unfinished_Business>
    60cc:	90 91 a6 54 	lds	r25, 0x54A6	; 0x8054a6 <Unfinished_Business+0x1>
    60d0:	a0 91 a7 54 	lds	r26, 0x54A7	; 0x8054a7 <Unfinished_Business+0x2>
    60d4:	b0 91 a8 54 	lds	r27, 0x54A8	; 0x8054a8 <Unfinished_Business+0x3>
    60d8:	80 7c       	andi	r24, 0xC0	; 192
    60da:	9f 77       	andi	r25, 0x7F	; 127
    60dc:	aa 27       	eor	r26, r26
    60de:	bb 27       	eor	r27, r27
    60e0:	89 2b       	or	r24, r25
    60e2:	8a 2b       	or	r24, r26
    60e4:	8b 2b       	or	r24, r27
    60e6:	51 f4       	brne	.+20     	; 0x60fc <main+0x376>
			if(!KeepTRelayOn){
    60e8:	80 91 fb 53 	lds	r24, 0x53FB	; 0x8053fb <KeepTRelayOn>
    60ec:	81 11       	cpse	r24, r1
    60ee:	06 c0       	rjmp	.+12     	; 0x60fc <main+0x376>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    60f0:	85 b1       	in	r24, 0x05	; 5
    60f2:	8f 7d       	andi	r24, 0xDF	; 223
    60f4:	85 b9       	out	0x05, r24	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
    60f6:	81 b3       	in	r24, 0x11	; 17
    60f8:	84 60       	ori	r24, 0x04	; 4
    60fa:	81 bb       	out	0x11, r24	; 17
#ifdef LowBatteryAlert
if(((FiveVoltBus > 500) && (!DisableBluetooth)) || SYBTisProvidingPower){				//is there sufficient power for Bluetooth?		Allow Bluetooth to run whenever connected to SYBT								
#endif
		
//if(FirstRun == true){
	if (USART_0_is_rx_ready()){					//listens to Bluetooth module 
    60fc:	0e 94 bb 34 	call	0x6976	; 0x6976 <USART_0_is_rx_ready>
    6100:	81 11       	cpse	r24, r1
//		USART_0_enable_rx();
//		if(FirstRun == true){
			USART0_getString();
    6102:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <USART0_getString>
//else
//	if((SleepTimer & 1024)== 1024)LED0_set_level(true);
	
#endif
//----------------------------------------------------------------------------------
if ((number_of_loops == Cycle_1) && !(Unfinished_Business & Unfinished_AutoCalResStart))MeasureSYBTresistance(&resistance); // Don't measure if auto cal is running
    6106:	80 91 b8 54 	lds	r24, 0x54B8	; 0x8054b8 <number_of_loops>
    610a:	90 91 b9 54 	lds	r25, 0x54B9	; 0x8054b9 <number_of_loops+0x1>
    610e:	84 3f       	cpi	r24, 0xF4	; 244
    6110:	91 40       	sbci	r25, 0x01	; 1
    6112:	41 f4       	brne	.+16     	; 0x6124 <main+0x39e>
    6114:	80 91 a5 54 	lds	r24, 0x54A5	; 0x8054a5 <Unfinished_Business>
    6118:	86 fd       	sbrc	r24, 6
    611a:	04 c0       	rjmp	.+8      	; 0x6124 <main+0x39e>
    611c:	8e e5       	ldi	r24, 0x5E	; 94
    611e:	94 e5       	ldi	r25, 0x54	; 84
    6120:	0e 94 67 29 	call	0x52ce	; 0x52ce <MeasureSYBTresistance>
//	#endif
//	#ifdef LargeChips	
//		LargeChip_Display_set_level(false);
//	#endif
//}
if((SleepTimer > (cal.Sleep_2)) && !SYBTisProvidingPower){									// Put display to sleep ---- SYBT is not providing power
    6124:	40 91 2b 53 	lds	r20, 0x532B	; 0x80532b <cal+0x7e>
    6128:	50 91 2c 53 	lds	r21, 0x532C	; 0x80532c <cal+0x7f>
    612c:	60 91 2d 53 	lds	r22, 0x532D	; 0x80532d <cal+0x80>
    6130:	70 91 2e 53 	lds	r23, 0x532E	; 0x80532e <cal+0x81>
    6134:	80 91 b0 54 	lds	r24, 0x54B0	; 0x8054b0 <SleepTimer>
    6138:	90 91 b1 54 	lds	r25, 0x54B1	; 0x8054b1 <SleepTimer+0x1>
    613c:	a0 91 b2 54 	lds	r26, 0x54B2	; 0x8054b2 <SleepTimer+0x2>
    6140:	b0 91 b3 54 	lds	r27, 0x54B3	; 0x8054b3 <SleepTimer+0x3>
    6144:	48 17       	cp	r20, r24
    6146:	59 07       	cpc	r21, r25
    6148:	6a 07       	cpc	r22, r26
    614a:	7b 07       	cpc	r23, r27
    614c:	a8 f4       	brcc	.+42     	; 0x6178 <main+0x3f2>
    614e:	80 91 4a 48 	lds	r24, 0x484A	; 0x80484a <SYBTisProvidingPower>
    6152:	81 11       	cpse	r24, r1
    6154:	11 c0       	rjmp	.+34     	; 0x6178 <main+0x3f2>
//if((SleepTimer > 300000) && !SYBTisProvidingPower){									// Put display to sleep ---- SYBT is not providing power
	SleepTimer = 0;
    6156:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
    615a:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
    615e:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
    6162:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    6166:	85 b1       	in	r24, 0x05	; 5
    6168:	8f 7d       	andi	r24, 0xDF	; 223
    616a:	85 b9       	out	0x05, r24	; 5
    616c:	85 b1       	in	r24, 0x05	; 5
    616e:	8f 7d       	andi	r24, 0xDF	; 223
    6170:	85 b9       	out	0x05, r24	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
    6172:	81 b3       	in	r24, 0x11	; 17
    6174:	84 60       	ori	r24, 0x04	; 4
    6176:	81 bb       	out	0x11, r24	; 17
		BlueLED_set_level(true); 
		#endif
	#endif
}

if((SleepTimer > (cal.Sleep_1)) && (SYBTisProvidingPower || !IsSYBT5orE3SadapterConnected())){									// Put display to sleep ----SYBT is providing power   Sybt5 as analog input
    6178:	40 91 27 53 	lds	r20, 0x5327	; 0x805327 <cal+0x7a>
    617c:	50 91 28 53 	lds	r21, 0x5328	; 0x805328 <cal+0x7b>
    6180:	60 91 29 53 	lds	r22, 0x5329	; 0x805329 <cal+0x7c>
    6184:	70 91 2a 53 	lds	r23, 0x532A	; 0x80532a <cal+0x7d>
    6188:	80 91 b0 54 	lds	r24, 0x54B0	; 0x8054b0 <SleepTimer>
    618c:	90 91 b1 54 	lds	r25, 0x54B1	; 0x8054b1 <SleepTimer+0x1>
    6190:	a0 91 b2 54 	lds	r26, 0x54B2	; 0x8054b2 <SleepTimer+0x2>
    6194:	b0 91 b3 54 	lds	r27, 0x54B3	; 0x8054b3 <SleepTimer+0x3>
    6198:	48 17       	cp	r20, r24
    619a:	59 07       	cpc	r21, r25
    619c:	6a 07       	cpc	r22, r26
    619e:	7b 07       	cpc	r23, r27
    61a0:	e8 f4       	brcc	.+58     	; 0x61dc <main+0x456>
    61a2:	80 91 4a 48 	lds	r24, 0x484A	; 0x80484a <SYBTisProvidingPower>
    61a6:	81 11       	cpse	r24, r1
    61a8:	04 c0       	rjmp	.+8      	; 0x61b2 <main+0x42c>
    61aa:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <IsSYBT5orE3SadapterConnected>
    61ae:	81 11       	cpse	r24, r1
    61b0:	15 c0       	rjmp	.+42     	; 0x61dc <main+0x456>
//if((SleepTimer > (cal.Sleep_1)) && (SYBTisProvidingPower || !SYBT5_Connected_get_level())){								// Put display to sleep ----SYBT is providing power  Sybt5 as digital input
//if((SleepTimer > 200000) && SYBTisProvidingPower){									// Put display to sleep ----SYBT is providing power
	if(!(Unfinished_Business & Unfinished_Sleep)){										// keep display on indefinitely
    61b2:	80 91 a5 54 	lds	r24, 0x54A5	; 0x8054a5 <Unfinished_Business>
    61b6:	85 fd       	sbrc	r24, 5
    61b8:	11 c0       	rjmp	.+34     	; 0x61dc <main+0x456>
		SleepTimer = 0;
    61ba:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
    61be:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
    61c2:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
    61c6:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    61ca:	85 b1       	in	r24, 0x05	; 5
    61cc:	8f 7d       	andi	r24, 0xDF	; 223
    61ce:	85 b9       	out	0x05, r24	; 5
    61d0:	85 b1       	in	r24, 0x05	; 5
    61d2:	8f 7d       	andi	r24, 0xDF	; 223
    61d4:	85 b9       	out	0x05, r24	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
    61d6:	81 b3       	in	r24, 0x11	; 17
    61d8:	84 60       	ori	r24, 0x04	; 4
    61da:	81 bb       	out	0x11, r24	; 17
			BlueLED_set_level(true);
			#endif
		#endif
	}	
}
if(SleepTimer > 800000)  SleepTimer = 0;			
    61dc:	80 91 b0 54 	lds	r24, 0x54B0	; 0x8054b0 <SleepTimer>
    61e0:	90 91 b1 54 	lds	r25, 0x54B1	; 0x8054b1 <SleepTimer+0x1>
    61e4:	a0 91 b2 54 	lds	r26, 0x54B2	; 0x8054b2 <SleepTimer+0x2>
    61e8:	b0 91 b3 54 	lds	r27, 0x54B3	; 0x8054b3 <SleepTimer+0x3>
    61ec:	81 30       	cpi	r24, 0x01	; 1
    61ee:	95 43       	sbci	r25, 0x35	; 53
    61f0:	ac 40       	sbci	r26, 0x0C	; 12
    61f2:	b1 05       	cpc	r27, r1
    61f4:	40 f0       	brcs	.+16     	; 0x6206 <main+0x480>
    61f6:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
    61fa:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
    61fe:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
    6202:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>

//if((BluetoothSleepTimer > 600000) && !SYBTisProvidingPower)PWR_ON_set_level(false);  // Put everything to sleep if running on internal battery
if((BluetoothSleepTimer > cal.Sleep_3) && !SYBTisProvidingPower)PWR_ON_set_level(false);  // Put everything to sleep if running on internal battery
    6206:	80 91 2f 53 	lds	r24, 0x532F	; 0x80532f <cal+0x82>
    620a:	90 91 30 53 	lds	r25, 0x5330	; 0x805330 <cal+0x83>
    620e:	a0 91 31 53 	lds	r26, 0x5331	; 0x805331 <cal+0x84>
    6212:	b0 91 32 53 	lds	r27, 0x5332	; 0x805332 <cal+0x85>
    6216:	84 15       	cp	r24, r4
    6218:	95 05       	cpc	r25, r5
    621a:	a6 05       	cpc	r26, r6
    621c:	b7 05       	cpc	r27, r7
    621e:	38 f4       	brcc	.+14     	; 0x622e <main+0x4a8>
    6220:	80 91 4a 48 	lds	r24, 0x484A	; 0x80484a <SYBTisProvidingPower>
    6224:	81 11       	cpse	r24, r1
    6226:	03 c0       	rjmp	.+6      	; 0x622e <main+0x4a8>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    6228:	85 b1       	in	r24, 0x05	; 5
    622a:	8f 7e       	andi	r24, 0xEF	; 239
    622c:	85 b9       	out	0x05, r24	; 5
//	SleepTimer = 0;	
	//Gather_Battery_Data();
//	if(Take_Measurements)Test_Battery(1,&DisplayVoltageDropTimer,&Test_Status,&calibration.SYBT_ad_cal,&calibration.Load_ad_cal);
//}

if(number_of_loops > 20000){
    622e:	80 91 b8 54 	lds	r24, 0x54B8	; 0x8054b8 <number_of_loops>
    6232:	90 91 b9 54 	lds	r25, 0x54B9	; 0x8054b9 <number_of_loops+0x1>
    6236:	81 32       	cpi	r24, 0x21	; 33
    6238:	9e 44       	sbci	r25, 0x4E	; 78
    623a:	20 f0       	brcs	.+8      	; 0x6244 <main+0x4be>
	number_of_loops = 0;
    623c:	10 92 b8 54 	sts	0x54B8, r1	; 0x8054b8 <number_of_loops>
    6240:	10 92 b9 54 	sts	0x54B9, r1	; 0x8054b9 <number_of_loops+0x1>
}

if(Main_Button_get_level()){							// Main button turns on logic power, if not already on. It does this by way of a temporary hardware power connection, and then the 
    6244:	b3 9b       	sbis	0x16, 3	; 22
    6246:	0d c0       	rjmp	.+26     	; 0x6262 <main+0x4dc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    6248:	89 b1       	in	r24, 0x09	; 9
    624a:	80 62       	ori	r24, 0x20	; 32
    624c:	89 b9       	out	0x09, r24	; 9
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    624e:	85 b1       	in	r24, 0x05	; 5
    6250:	80 61       	ori	r24, 0x10	; 16
    6252:	85 b9       	out	0x05, r24	; 5
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    6254:	89 b1       	in	r24, 0x09	; 9
    6256:	8f 7b       	andi	r24, 0xBF	; 191
    6258:	89 b9       	out	0x09, r24	; 9
	//SleepTimer = 0;
	BluetoothSleepTimer = 0;
    625a:	41 2c       	mov	r4, r1
    625c:	51 2c       	mov	r5, r1
    625e:	32 01       	movw	r6, r4
    6260:	03 c0       	rjmp	.+6      	; 0x6268 <main+0x4e2>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    6262:	89 b1       	in	r24, 0x09	; 9
    6264:	80 64       	ori	r24, 0x40	; 64
    6266:	89 b9       	out	0x09, r24	; 9
}
else{
	LED1_set_level(true);
}

if (Main_Button_get_level() && !MainButtonDown) {		// Main button turns on logic power, if not already on.
    6268:	b3 9b       	sbis	0x16, 3	; 22
    626a:	3d c0       	rjmp	.+122    	; 0x62e6 <main+0x560>
    626c:	21 10       	cpse	r2, r1
    626e:	3b c0       	rjmp	.+118    	; 0x62e6 <main+0x560>
		MainButtonDown = true;
		// I don't like this below
		//if((ADC_0_get_conversion(ADC_LXvoltage) < 200) || (ADC_0_get_conversion(ADC_SYBT_Volts) < 1000) || !FT2_get_level()){   //If there is no voltage present on the LX input, then close relay-----------------------------------------------------------------------------------------------------------
		//	;
		//}
		if(SYBTgood && (DelayAfterSYBTisConnected == 2000) && (DisplayVoltageDropTimer > DisplayVoltageDropTime)){
    6270:	89 81       	ldd	r24, Y+1	; 0x01
    6272:	88 23       	and	r24, r24
    6274:	29 f1       	breq	.+74     	; 0x62c0 <main+0x53a>
    6276:	80 ed       	ldi	r24, 0xD0	; 208
    6278:	88 16       	cp	r8, r24
    627a:	87 e0       	ldi	r24, 0x07	; 7
    627c:	98 06       	cpc	r9, r24
    627e:	01 f5       	brne	.+64     	; 0x62c0 <main+0x53a>
    6280:	8a 81       	ldd	r24, Y+2	; 0x02
    6282:	9b 81       	ldd	r25, Y+3	; 0x03
    6284:	ac 81       	ldd	r26, Y+4	; 0x04
    6286:	bd 81       	ldd	r27, Y+5	; 0x05
    6288:	40 97       	sbiw	r24, 0x10	; 16
    628a:	a1 05       	cpc	r26, r1
    628c:	b1 05       	cpc	r27, r1
    628e:	c0 f0       	brcs	.+48     	; 0x62c0 <main+0x53a>
			SleepTimer = 0;
    6290:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
    6294:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
    6298:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
    629c:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>
			BatteryTestOK = Test_Battery(1,&DisplayVoltageDropTimer,&Test_Status,&cal.SYBT_ad_cal,&cal.Load_ad_cal);
    62a0:	07 eb       	ldi	r16, 0xB7	; 183
    62a2:	12 e5       	ldi	r17, 0x52	; 82
    62a4:	21 eb       	ldi	r18, 0xB1	; 177
    62a6:	32 e5       	ldi	r19, 0x52	; 82
    62a8:	ae 01       	movw	r20, r28
    62aa:	4a 5f       	subi	r20, 0xFA	; 250
    62ac:	5f 4f       	sbci	r21, 0xFF	; 255
    62ae:	be 01       	movw	r22, r28
    62b0:	6e 5f       	subi	r22, 0xFE	; 254
    62b2:	7f 4f       	sbci	r23, 0xFF	; 255
    62b4:	81 e0       	ldi	r24, 0x01	; 1
    62b6:	90 e0       	ldi	r25, 0x00	; 0
    62b8:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <Test_Battery>
    62bc:	8b 87       	std	Y+11, r24	; 0x0b
    62be:	0f c0       	rjmp	.+30     	; 0x62de <main+0x558>
		{
					//
		//} //if(!SYBTconnectedButNoBattery)   // this isn't working  ---------------------------------------------------------
		//{
			BatteryTestOK = false;
			DisplayVoltageDropTimer = 16;
    62c0:	80 e1       	ldi	r24, 0x10	; 16
    62c2:	90 e0       	ldi	r25, 0x00	; 0
    62c4:	a0 e0       	ldi	r26, 0x00	; 0
    62c6:	b0 e0       	ldi	r27, 0x00	; 0
    62c8:	8a 83       	std	Y+2, r24	; 0x02
    62ca:	9b 83       	std	Y+3, r25	; 0x03
    62cc:	ac 83       	std	Y+4, r26	; 0x04
    62ce:	bd 83       	std	Y+5, r27	; 0x05
			DisplayVoltageDropTimerExpired = false;
    62d0:	10 92 47 48 	sts	0x4847, r1	; 0x804847 <DisplayVoltageDropTimerExpired>
			//if(DisplayVoltageDropTimer <= DisplayVoltageDropTime)
			 Test_Status = 100;  // this is going to be less than time, every time. 
    62d4:	84 e6       	ldi	r24, 0x64	; 100
    62d6:	90 e0       	ldi	r25, 0x00	; 0
    62d8:	8e 83       	std	Y+6, r24	; 0x06
    62da:	9f 83       	std	Y+7, r25	; 0x07
		else
		{
					//
		//} //if(!SYBTconnectedButNoBattery)   // this isn't working  ---------------------------------------------------------
		//{
			BatteryTestOK = false;
    62dc:	1b 86       	std	Y+11, r1	; 0x0b
			//if(DisplayVoltageDropTimer <= DisplayVoltageDropTime)
			 Test_Status = 100;  // this is going to be less than time, every time. 
			//else Test_Status = 200;
		}
		//SleepTimer = 0;
		TurnEverythingOn();					// replaces several lines of code for readability 
    62de:	0e 94 98 19 	call	0x3330	; 0x3330 <TurnEverythingOn>

if (Main_Button_get_level() && !MainButtonDown) {		// Main button turns on logic power, if not already on.
														// button has both hardware direct power connection, and software input.
	//if (!MainButtonDown){								// appears to be redundant
		//Load_IGBT_set_level(false);}
		MainButtonDown = true;
    62e2:	22 24       	eor	r2, r2
    62e4:	23 94       	inc	r2
		//MainButtonCount = MainButtonCount + 1;					// Not using this and I forget the original idea behind it
	//}
}
//-----------------------------Test for disconnect from SYBT----------------------------------------------------------------------------
//																			raw data from AD converter should be about 2457
if((ADC_0_get_conversion(ADC_SYBT_Volts) < 2200) && SYBTisProvidingPower){ //no need for accuracy, just see battery voltage is at a low level.  I didn't use zero so it would have faster response.
    62e6:	88 e0       	ldi	r24, 0x08	; 8
    62e8:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    62ec:	88 39       	cpi	r24, 0x98	; 152
    62ee:	98 40       	sbci	r25, 0x08	; 8
    62f0:	50 f5       	brcc	.+84     	; 0x6346 <main+0x5c0>
    62f2:	80 91 4a 48 	lds	r24, 0x484A	; 0x80484a <SYBTisProvidingPower>
    62f6:	88 23       	and	r24, r24
    62f8:	31 f1       	breq	.+76     	; 0x6346 <main+0x5c0>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    62fa:	85 b1       	in	r24, 0x05	; 5
    62fc:	80 61       	ori	r24, 0x10	; 16
    62fe:	85 b9       	out	0x05, r24	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    6300:	89 b1       	in	r24, 0x09	; 9
    6302:	80 62       	ori	r24, 0x20	; 32
    6304:	89 b9       	out	0x09, r24	; 9
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    6306:	85 b1       	in	r24, 0x05	; 5
    6308:	8f 7d       	andi	r24, 0xDF	; 223
    630a:	85 b9       	out	0x05, r24	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
    630c:	81 b3       	in	r24, 0x11	; 17
    630e:	84 60       	ori	r24, 0x04	; 4
    6310:	81 bb       	out	0x11, r24	; 17
		#endif
	#endif

	DisableBluetooth = true;
	//_delay_ms(200);
	SleepTimer = 0;
    6312:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
    6316:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
    631a:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
    631e:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>
	BluetoothSleepTimer = 0;
	SYBTisProvidingPower = false;
    6322:	10 92 4a 48 	sts	0x484A, r1	; 0x80484a <SYBTisProvidingPower>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    6326:	89 b1       	in	r24, 0x09	; 9
    6328:	80 64       	ori	r24, 0x40	; 64
    632a:	89 b9       	out	0x09, r24	; 9
	LED1_set_level(true);
	DelayAfterSYBTisConnected = 0;
	array_SYBT[1].Temperature = 3000;			//open circuit value
    632c:	88 eb       	ldi	r24, 0xB8	; 184
    632e:	9b e0       	ldi	r25, 0x0B	; 11
    6330:	80 93 85 48 	sts	0x4885, r24	; 0x804885 <array_SYBT+0x24>
    6334:	90 93 86 48 	sts	0x4886, r25	; 0x804886 <array_SYBT+0x25>
	#endif

	DisableBluetooth = true;
	//_delay_ms(200);
	SleepTimer = 0;
	BluetoothSleepTimer = 0;
    6338:	41 2c       	mov	r4, r1
    633a:	51 2c       	mov	r5, r1
    633c:	32 01       	movw	r6, r4
		FT2_set_level(false);						// is relay 2 control on large chip board
		BlueLED_set_level(true);
		#endif
	#endif

	DisableBluetooth = true;
    633e:	33 24       	eor	r3, r3
    6340:	33 94       	inc	r3
	//_delay_ms(200);
	SleepTimer = 0;
	BluetoothSleepTimer = 0;
	SYBTisProvidingPower = false;
	LED1_set_level(true);
	DelayAfterSYBTisConnected = 0;
    6342:	81 2c       	mov	r8, r1
    6344:	91 2c       	mov	r9, r1
	array_SYBT[1].Temperature = 3000;			//open circuit value
}
//-----------------------------Test for connected to SYBT----------------------------------------------------------------------------
#ifndef QualityControlTesting
	if((ADC_0_get_conversion(ADC_SYBT_Volts) > 2200)){				// no need for accuracy, just see if AD converter is reading some battery voltage. 
    6346:	88 e0       	ldi	r24, 0x08	; 8
    6348:	0e 94 c2 32 	call	0x6584	; 0x6584 <ADC_0_get_conversion>
    634c:	89 39       	cpi	r24, 0x99	; 153
    634e:	98 40       	sbci	r25, 0x08	; 8
    6350:	a0 f1       	brcs	.+104    	; 0x63ba <main+0x634>
		if(!SYBTisProvidingPower){
    6352:	80 91 4a 48 	lds	r24, 0x484A	; 0x80484a <SYBTisProvidingPower>
    6356:	81 11       	cpse	r24, r1
    6358:	22 c0       	rjmp	.+68     	; 0x639e <main+0x618>
			SleepTimer = 0;
    635a:	10 92 b0 54 	sts	0x54B0, r1	; 0x8054b0 <SleepTimer>
    635e:	10 92 b1 54 	sts	0x54B1, r1	; 0x8054b1 <SleepTimer+0x1>
    6362:	10 92 b2 54 	sts	0x54B2, r1	; 0x8054b2 <SleepTimer+0x2>
    6366:	10 92 b3 54 	sts	0x54B3, r1	; 0x8054b3 <SleepTimer+0x3>
			BluetoothSleepTimer = 0;
			if(!SYBTisProvidingPower)DisableBluetooth = true;
    636a:	81 11       	cpse	r24, r1
    636c:	02 c0       	rjmp	.+4      	; 0x6372 <main+0x5ec>
    636e:	33 24       	eor	r3, r3
    6370:	33 94       	inc	r3
    6372:	89 b1       	in	r24, 0x09	; 9
    6374:	80 62       	ori	r24, 0x20	; 32
    6376:	89 b9       	out	0x09, r24	; 9
			LargeChip_Display_set_level(true);
			USART0_sendString("PXconnected\n\r");
    6378:	86 e0       	ldi	r24, 0x06	; 6
    637a:	95 e4       	ldi	r25, 0x45	; 69
    637c:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    6380:	85 b3       	in	r24, 0x15	; 21
    6382:	8f 7e       	andi	r24, 0xEF	; 239
    6384:	85 bb       	out	0x15, r24	; 21
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    6386:	89 b1       	in	r24, 0x09	; 9
    6388:	8f 77       	andi	r24, 0x7F	; 127
    638a:	89 b9       	out	0x09, r24	; 9
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    638c:	85 b1       	in	r24, 0x05	; 5
    638e:	80 62       	ori	r24, 0x20	; 32
    6390:	85 b9       	out	0x05, r24	; 5
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
    6392:	81 b3       	in	r24, 0x11	; 17
    6394:	8b 7f       	andi	r24, 0xFB	; 251
    6396:	81 bb       	out	0x11, r24	; 17
//-----------------------------Test for connected to SYBT----------------------------------------------------------------------------
#ifndef QualityControlTesting
	if((ADC_0_get_conversion(ADC_SYBT_Volts) > 2200)){				// no need for accuracy, just see if AD converter is reading some battery voltage. 
		if(!SYBTisProvidingPower){
			SleepTimer = 0;
			BluetoothSleepTimer = 0;
    6398:	41 2c       	mov	r4, r1
    639a:	51 2c       	mov	r5, r1
    639c:	32 01       	movw	r6, r4
			#ifdef LXbatteryCompatible
				FT2_set_level(true);								// Close RY2 so temp and resistance can be read.##############################################disabled for troubleshooting 
				BlueLED_set_level(false);							// Turn on Blue LED 
			#endif		
			}
		SYBTisProvidingPower = true;
    639e:	81 e0       	ldi	r24, 0x01	; 1
    63a0:	80 93 4a 48 	sts	0x484A, r24	; 0x80484a <SYBTisProvidingPower>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    63a4:	89 b1       	in	r24, 0x09	; 9
    63a6:	8f 7b       	andi	r24, 0xBF	; 191
    63a8:	89 b9       	out	0x09, r24	; 9
		LED1_set_level(false);										// Turn on LED 1
		if(DelayAfterSYBTisConnected < 2000){						// Brief delay to allow time for a reliable connection
    63aa:	80 ed       	ldi	r24, 0xD0	; 208
    63ac:	88 16       	cp	r8, r24
    63ae:	87 e0       	ldi	r24, 0x07	; 7
    63b0:	98 06       	cpc	r9, r24
    63b2:	18 f4       	brcc	.+6      	; 0x63ba <main+0x634>
			DelayAfterSYBTisConnected++;
    63b4:	9f ef       	ldi	r25, 0xFF	; 255
    63b6:	89 1a       	sub	r8, r25
    63b8:	99 0a       	sbc	r9, r25
			//DelayAfterSYBTisConnected = 2000;						//not needed but here as a reminder that the counter is supposed to stop at 2000
		//	PWR_ON_set_level(false);						// turn off 6v battery	I moved here to provide overlap
		}
	}
	//-------------------------Test for connected to SYBT5------------------------------------------------------------------------------------------------------------
	if(IsConnectedToSYBT5()){
    63ba:	0e 94 09 39 	call	0x7212	; 0x7212 <IsConnectedToSYBT5>
    63be:	88 23       	and	r24, r24
    63c0:	d1 f0       	breq	.+52     	; 0x63f6 <main+0x670>
		MeasureLXvoltage(&volts_noloadLX);
    63c2:	8e ef       	ldi	r24, 0xFE	; 254
    63c4:	93 e5       	ldi	r25, 0x53	; 83
    63c6:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <MeasureLXvoltage>
		FastSYBT5query();
    63ca:	0e 94 52 39 	call	0x72a4	; 0x72a4 <FastSYBT5query>
		SleepTimer = SleepTimer + 10000;			//This has the effect of skipping past 8191, where SYBT for LX readings are made.
    63ce:	80 91 b0 54 	lds	r24, 0x54B0	; 0x8054b0 <SleepTimer>
    63d2:	90 91 b1 54 	lds	r25, 0x54B1	; 0x8054b1 <SleepTimer+0x1>
    63d6:	a0 91 b2 54 	lds	r26, 0x54B2	; 0x8054b2 <SleepTimer+0x2>
    63da:	b0 91 b3 54 	lds	r27, 0x54B3	; 0x8054b3 <SleepTimer+0x3>
    63de:	80 5f       	subi	r24, 0xF0	; 240
    63e0:	98 4d       	sbci	r25, 0xD8	; 216
    63e2:	af 4f       	sbci	r26, 0xFF	; 255
    63e4:	bf 4f       	sbci	r27, 0xFF	; 255
    63e6:	80 93 b0 54 	sts	0x54B0, r24	; 0x8054b0 <SleepTimer>
    63ea:	90 93 b1 54 	sts	0x54B1, r25	; 0x8054b1 <SleepTimer+0x1>
    63ee:	a0 93 b2 54 	sts	0x54B2, r26	; 0x8054b2 <SleepTimer+0x2>
    63f2:	b0 93 b3 54 	sts	0x54B3, r27	; 0x8054b3 <SleepTimer+0x3>

//-------------------------------------------------------------------------------------------------------------------------------------


#ifdef DemoMode
	SwitchToDemoModePtr(&Rows,&volts_noload,&temperature,&resistance,&cal);
    63f6:	0d ea       	ldi	r16, 0xAD	; 173
    63f8:	12 e5       	ldi	r17, 0x52	; 82
    63fa:	2e e5       	ldi	r18, 0x5E	; 94
    63fc:	34 e5       	ldi	r19, 0x54	; 84
    63fe:	41 e6       	ldi	r20, 0x61	; 97
    6400:	53 e5       	ldi	r21, 0x53	; 83
    6402:	62 e5       	ldi	r22, 0x52	; 82
    6404:	78 e4       	ldi	r23, 0x48	; 72
    6406:	8d e5       	ldi	r24, 0x5D	; 93
    6408:	94 e5       	ldi	r25, 0x54	; 84
    640a:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <SwitchToDemoModePtr>
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
    640e:	81 b3       	in	r24, 0x11	; 17
    6410:	8b 7f       	andi	r24, 0xFB	; 251
    6412:	81 bb       	out	0x11, r24	; 17
#endif



//-------------------------------------SPI bus signals to LED drivers are sent one column at a time, with the next column sent on the next program loop.----------------------------------
SendDataToLEDdrivers(&LEDcolumn,DimDisplay);
    6414:	61 e0       	ldi	r22, 0x01	; 1
    6416:	ce 01       	movw	r24, r28
    6418:	09 96       	adiw	r24, 0x09	; 9
    641a:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <SendDataToLEDdrivers>
//--------------------------------------------------------------------------------------------------------------
	if(DisableBluetooth){
    641e:	33 20       	and	r3, r3
    6420:	89 f0       	breq	.+34     	; 0x6444 <main+0x6be>
		BluetoothDelay ++;
    6422:	80 91 b6 54 	lds	r24, 0x54B6	; 0x8054b6 <BluetoothDelay>
    6426:	90 91 b7 54 	lds	r25, 0x54B7	; 0x8054b7 <BluetoothDelay+0x1>
    642a:	01 96       	adiw	r24, 0x01	; 1
    642c:	80 93 b6 54 	sts	0x54B6, r24	; 0x8054b6 <BluetoothDelay>
    6430:	90 93 b7 54 	sts	0x54B7, r25	; 0x8054b7 <BluetoothDelay+0x1>
		if(BluetoothDelay > 10000){
    6434:	81 31       	cpi	r24, 0x11	; 17
    6436:	97 42       	sbci	r25, 0x27	; 39
    6438:	2c f0       	brlt	.+10     	; 0x6444 <main+0x6be>
			DisableBluetooth = false;
			BluetoothDelay = 0;
    643a:	10 92 b6 54 	sts	0x54B6, r1	; 0x8054b6 <BluetoothDelay>
    643e:	10 92 b7 54 	sts	0x54B7, r1	; 0x8054b7 <BluetoothDelay+0x1>
SendDataToLEDdrivers(&LEDcolumn,DimDisplay);
//--------------------------------------------------------------------------------------------------------------
	if(DisableBluetooth){
		BluetoothDelay ++;
		if(BluetoothDelay > 10000){
			DisableBluetooth = false;
    6442:	31 2c       	mov	r3, r1
			BluetoothDelay = 0;
			}
		}	
	if(ATTINY_PB0_get_level()){						//checks for USART received OK signal from ATTINY
    6444:	13 9b       	sbis	0x02, 3	; 2
    6446:	04 c0       	rjmp	.+8      	; 0x6450 <main+0x6ca>
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    6448:	85 b3       	in	r24, 0x15	; 21
    644a:	8d 7f       	andi	r24, 0xFD	; 253
    644c:	85 bb       	out	0x15, r24	; 21
    644e:	03 c0       	rjmp	.+6      	; 0x6456 <main+0x6d0>
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
    6450:	85 b3       	in	r24, 0x15	; 21
    6452:	82 60       	ori	r24, 0x02	; 2
    6454:	85 bb       	out	0x15, r24	; 21
		}
	else{
	//	BlueLED_set_level(false);
	YellowLED_set_level(true);
	}			
	wdt_reset();									//watchdog time is set with fuses in programmer.
    6456:	a8 95       	wdr
	}												// end of while loop
    6458:	0f cd       	rjmp	.-1506   	; 0x5e78 <main+0xf2>

0000645a <ASCII_charactermap>:
    645a:	90 e0       	ldi	r25, 0x00	; 0
    645c:	fc 01       	movw	r30, r24
    645e:	f0 97       	sbiw	r30, 0x30	; 48
    6460:	eb 34       	cpi	r30, 0x4B	; 75
    6462:	f1 05       	cpc	r31, r1
    6464:	08 f0       	brcs	.+2      	; 0x6468 <ASCII_charactermap+0xe>
    6466:	4a c0       	rjmp	.+148    	; 0x64fc <ASCII_charactermap+0xa2>
    6468:	e0 58       	subi	r30, 0x80	; 128
    646a:	ff 4f       	sbci	r31, 0xFF	; 255
    646c:	0c 94 ff 3c 	jmp	0x79fe	; 0x79fe <__tablejump2__>
    6470:	8f e3       	ldi	r24, 0x3F	; 63
    6472:	08 95       	ret
    6474:	8b e5       	ldi	r24, 0x5B	; 91
    6476:	08 95       	ret
    6478:	8f e4       	ldi	r24, 0x4F	; 79
    647a:	08 95       	ret
    647c:	86 e6       	ldi	r24, 0x66	; 102
    647e:	08 95       	ret
    6480:	8d e6       	ldi	r24, 0x6D	; 109
    6482:	08 95       	ret
    6484:	8d e7       	ldi	r24, 0x7D	; 125
    6486:	08 95       	ret
    6488:	87 e0       	ldi	r24, 0x07	; 7
    648a:	08 95       	ret
    648c:	8f e7       	ldi	r24, 0x7F	; 127
    648e:	08 95       	ret
    6490:	87 e6       	ldi	r24, 0x67	; 103
    6492:	08 95       	ret
    6494:	8f e5       	ldi	r24, 0x5F	; 95
    6496:	08 95       	ret
    6498:	8c e7       	ldi	r24, 0x7C	; 124
    649a:	08 95       	ret
    649c:	88 e5       	ldi	r24, 0x58	; 88
    649e:	08 95       	ret
    64a0:	8e e5       	ldi	r24, 0x5E	; 94
    64a2:	08 95       	ret
    64a4:	84 e7       	ldi	r24, 0x74	; 116
    64a6:	08 95       	ret
    64a8:	84 e7       	ldi	r24, 0x74	; 116
    64aa:	08 95       	ret
    64ac:	84 e7       	ldi	r24, 0x74	; 116
    64ae:	08 95       	ret
    64b0:	84 e7       	ldi	r24, 0x74	; 116
    64b2:	08 95       	ret
    64b4:	84 e7       	ldi	r24, 0x74	; 116
    64b6:	08 95       	ret
    64b8:	84 e7       	ldi	r24, 0x74	; 116
    64ba:	08 95       	ret
    64bc:	84 e7       	ldi	r24, 0x74	; 116
    64be:	08 95       	ret
    64c0:	84 e7       	ldi	r24, 0x74	; 116
    64c2:	08 95       	ret
    64c4:	84 e7       	ldi	r24, 0x74	; 116
    64c6:	08 95       	ret
    64c8:	84 e7       	ldi	r24, 0x74	; 116
    64ca:	08 95       	ret
    64cc:	8c e5       	ldi	r24, 0x5C	; 92
    64ce:	08 95       	ret
    64d0:	84 e7       	ldi	r24, 0x74	; 116
    64d2:	08 95       	ret
    64d4:	84 e7       	ldi	r24, 0x74	; 116
    64d6:	08 95       	ret
    64d8:	84 e7       	ldi	r24, 0x74	; 116
    64da:	08 95       	ret
    64dc:	84 e7       	ldi	r24, 0x74	; 116
    64de:	08 95       	ret
    64e0:	84 e7       	ldi	r24, 0x74	; 116
    64e2:	08 95       	ret
    64e4:	8c e1       	ldi	r24, 0x1C	; 28
    64e6:	08 95       	ret
    64e8:	8c e1       	ldi	r24, 0x1C	; 28
    64ea:	08 95       	ret
    64ec:	84 e7       	ldi	r24, 0x74	; 116
    64ee:	08 95       	ret
    64f0:	84 e7       	ldi	r24, 0x74	; 116
    64f2:	08 95       	ret
    64f4:	84 e7       	ldi	r24, 0x74	; 116
    64f6:	08 95       	ret
    64f8:	84 e7       	ldi	r24, 0x74	; 116
    64fa:	08 95       	ret
    64fc:	80 e4       	ldi	r24, 0x40	; 64
    64fe:	08 95       	ret
    6500:	86 e0       	ldi	r24, 0x06	; 6
    6502:	08 95       	ret

00006504 <ConvertToASCII>:
    6504:	90 e0       	ldi	r25, 0x00	; 0
    6506:	81 38       	cpi	r24, 0x81	; 129
    6508:	91 05       	cpc	r25, r1
    650a:	08 f5       	brcc	.+66     	; 0x654e <ConvertToASCII+0x4a>
    650c:	fc 01       	movw	r30, r24
    650e:	e5 53       	subi	r30, 0x35	; 53
    6510:	ff 4f       	sbci	r31, 0xFF	; 255
    6512:	0c 94 ff 3c 	jmp	0x79fe	; 0x79fe <__tablejump2__>
    6516:	80 e3       	ldi	r24, 0x30	; 48
    6518:	08 95       	ret
    651a:	82 e3       	ldi	r24, 0x32	; 50
    651c:	08 95       	ret
    651e:	83 e3       	ldi	r24, 0x33	; 51
    6520:	08 95       	ret
    6522:	84 e3       	ldi	r24, 0x34	; 52
    6524:	08 95       	ret
    6526:	85 e3       	ldi	r24, 0x35	; 53
    6528:	08 95       	ret
    652a:	86 e3       	ldi	r24, 0x36	; 54
    652c:	08 95       	ret
    652e:	87 e3       	ldi	r24, 0x37	; 55
    6530:	08 95       	ret
    6532:	88 e3       	ldi	r24, 0x38	; 56
    6534:	08 95       	ret
    6536:	89 e3       	ldi	r24, 0x39	; 57
    6538:	08 95       	ret
    653a:	82 e6       	ldi	r24, 0x62	; 98
    653c:	08 95       	ret
    653e:	83 e6       	ldi	r24, 0x63	; 99
    6540:	08 95       	ret
    6542:	86 e7       	ldi	r24, 0x76	; 118
    6544:	08 95       	ret
    6546:	8d e2       	ldi	r24, 0x2D	; 45
    6548:	08 95       	ret
    654a:	8e e2       	ldi	r24, 0x2E	; 46
    654c:	08 95       	ret
    654e:	8d e2       	ldi	r24, 0x2D	; 45
    6550:	08 95       	ret
    6552:	81 e3       	ldi	r24, 0x31	; 49
    6554:	08 95       	ret

00006556 <ADC_0_init>:
    6556:	81 e0       	ldi	r24, 0x01	; 1
    6558:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7e0600>
    655c:	80 e0       	ldi	r24, 0x00	; 0
    655e:	08 95       	ret

00006560 <ADC_0_start_conversion>:
    6560:	e0 e0       	ldi	r30, 0x00	; 0
    6562:	f6 e0       	ldi	r31, 0x06	; 6
    6564:	90 81       	ld	r25, Z
    6566:	9f 7d       	andi	r25, 0xDF	; 223
    6568:	90 83       	st	Z, r25
    656a:	80 87       	std	Z+8, r24	; 0x08
    656c:	81 e0       	ldi	r24, 0x01	; 1
    656e:	82 87       	std	Z+10, r24	; 0x0a
    6570:	08 95       	ret

00006572 <ADC_0_is_conversion_done>:
    6572:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
    6576:	81 70       	andi	r24, 0x01	; 1
    6578:	08 95       	ret

0000657a <ADC_0_get_conversion_result>:
    657a:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    657e:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    6582:	08 95       	ret

00006584 <ADC_0_get_conversion>:
    6584:	0e 94 b0 32 	call	0x6560	; 0x6560 <ADC_0_start_conversion>
    6588:	0e 94 b9 32 	call	0x6572	; 0x6572 <ADC_0_is_conversion_done>
    658c:	88 23       	and	r24, r24
    658e:	e1 f3       	breq	.-8      	; 0x6588 <ADC_0_get_conversion+0x4>
    6590:	0e 94 bd 32 	call	0x657a	; 0x657a <ADC_0_get_conversion_result>
    6594:	e0 e0       	ldi	r30, 0x00	; 0
    6596:	f6 e0       	ldi	r31, 0x06	; 6
    6598:	25 85       	ldd	r18, Z+13	; 0x0d
    659a:	21 60       	ori	r18, 0x01	; 1
    659c:	25 87       	std	Z+13, r18	; 0x0d
    659e:	08 95       	ret

000065a0 <BOD_init>:
    65a0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    65a4:	80 e0       	ldi	r24, 0x00	; 0
    65a6:	08 95       	ret

000065a8 <CLKCTRL_init>:
    65a8:	80 e0       	ldi	r24, 0x00	; 0
    65aa:	08 95       	ret

000065ac <CPUINT_init>:
    65ac:	80 e0       	ldi	r24, 0x00	; 0
    65ae:	08 95       	ret

000065b0 <mcu_init>:
    65b0:	80 e0       	ldi	r24, 0x00	; 0
    65b2:	08 c0       	rjmp	.+16     	; 0x65c4 <mcu_init+0x14>
    65b4:	e8 2f       	mov	r30, r24
    65b6:	f0 e0       	ldi	r31, 0x00	; 0
    65b8:	e0 5f       	subi	r30, 0xF0	; 240
    65ba:	fb 4f       	sbci	r31, 0xFB	; 251
    65bc:	90 81       	ld	r25, Z
    65be:	98 60       	ori	r25, 0x08	; 8
    65c0:	90 83       	st	Z, r25
    65c2:	8f 5f       	subi	r24, 0xFF	; 255
    65c4:	88 30       	cpi	r24, 0x08	; 8
    65c6:	b0 f3       	brcs	.-20     	; 0x65b4 <mcu_init+0x4>
    65c8:	80 e0       	ldi	r24, 0x00	; 0
    65ca:	08 c0       	rjmp	.+16     	; 0x65dc <mcu_init+0x2c>
    65cc:	e8 2f       	mov	r30, r24
    65ce:	f0 e0       	ldi	r31, 0x00	; 0
    65d0:	e0 5d       	subi	r30, 0xD0	; 208
    65d2:	fb 4f       	sbci	r31, 0xFB	; 251
    65d4:	90 81       	ld	r25, Z
    65d6:	98 60       	ori	r25, 0x08	; 8
    65d8:	90 83       	st	Z, r25
    65da:	8f 5f       	subi	r24, 0xFF	; 255
    65dc:	88 30       	cpi	r24, 0x08	; 8
    65de:	b0 f3       	brcs	.-20     	; 0x65cc <mcu_init+0x1c>
    65e0:	80 e0       	ldi	r24, 0x00	; 0
    65e2:	08 c0       	rjmp	.+16     	; 0x65f4 <mcu_init+0x44>
    65e4:	e8 2f       	mov	r30, r24
    65e6:	f0 e0       	ldi	r31, 0x00	; 0
    65e8:	e0 5b       	subi	r30, 0xB0	; 176
    65ea:	fb 4f       	sbci	r31, 0xFB	; 251
    65ec:	90 81       	ld	r25, Z
    65ee:	98 60       	ori	r25, 0x08	; 8
    65f0:	90 83       	st	Z, r25
    65f2:	8f 5f       	subi	r24, 0xFF	; 255
    65f4:	88 30       	cpi	r24, 0x08	; 8
    65f6:	b0 f3       	brcs	.-20     	; 0x65e4 <mcu_init+0x34>
    65f8:	80 e0       	ldi	r24, 0x00	; 0
    65fa:	08 c0       	rjmp	.+16     	; 0x660c <mcu_init+0x5c>
    65fc:	e8 2f       	mov	r30, r24
    65fe:	f0 e0       	ldi	r31, 0x00	; 0
    6600:	e0 59       	subi	r30, 0x90	; 144
    6602:	fb 4f       	sbci	r31, 0xFB	; 251
    6604:	90 81       	ld	r25, Z
    6606:	98 60       	ori	r25, 0x08	; 8
    6608:	90 83       	st	Z, r25
    660a:	8f 5f       	subi	r24, 0xFF	; 255
    660c:	88 30       	cpi	r24, 0x08	; 8
    660e:	b0 f3       	brcs	.-20     	; 0x65fc <mcu_init+0x4c>
    6610:	80 e0       	ldi	r24, 0x00	; 0
    6612:	08 c0       	rjmp	.+16     	; 0x6624 <mcu_init+0x74>
    6614:	e8 2f       	mov	r30, r24
    6616:	f0 e0       	ldi	r31, 0x00	; 0
    6618:	e0 57       	subi	r30, 0x70	; 112
    661a:	fb 4f       	sbci	r31, 0xFB	; 251
    661c:	90 81       	ld	r25, Z
    661e:	98 60       	ori	r25, 0x08	; 8
    6620:	90 83       	st	Z, r25
    6622:	8f 5f       	subi	r24, 0xFF	; 255
    6624:	88 30       	cpi	r24, 0x08	; 8
    6626:	b0 f3       	brcs	.-20     	; 0x6614 <mcu_init+0x64>
    6628:	80 e0       	ldi	r24, 0x00	; 0
    662a:	08 c0       	rjmp	.+16     	; 0x663c <mcu_init+0x8c>
    662c:	e8 2f       	mov	r30, r24
    662e:	f0 e0       	ldi	r31, 0x00	; 0
    6630:	e0 55       	subi	r30, 0x50	; 80
    6632:	fb 4f       	sbci	r31, 0xFB	; 251
    6634:	90 81       	ld	r25, Z
    6636:	98 60       	ori	r25, 0x08	; 8
    6638:	90 83       	st	Z, r25
    663a:	8f 5f       	subi	r24, 0xFF	; 255
    663c:	88 30       	cpi	r24, 0x08	; 8
    663e:	b0 f3       	brcs	.-20     	; 0x662c <mcu_init+0x7c>
    6640:	08 95       	ret

00006642 <USART_0_initialization>:
    6642:	80 b1       	in	r24, 0x00	; 0
    6644:	8d 7f       	andi	r24, 0xFD	; 253
    6646:	80 b9       	out	0x00, r24	; 0
    6648:	e1 e1       	ldi	r30, 0x11	; 17
    664a:	f4 e0       	ldi	r31, 0x04	; 4
    664c:	80 81       	ld	r24, Z
    664e:	87 7f       	andi	r24, 0xF7	; 247
    6650:	80 83       	st	Z, r24
    6652:	81 b1       	in	r24, 0x01	; 1
    6654:	8e 7f       	andi	r24, 0xFE	; 254
    6656:	81 b9       	out	0x01, r24	; 1
    6658:	80 b1       	in	r24, 0x00	; 0
    665a:	81 60       	ori	r24, 0x01	; 1
    665c:	80 b9       	out	0x00, r24	; 0
    665e:	0e 94 a5 34 	call	0x694a	; 0x694a <USART_0_init>
    6662:	08 95       	ret

00006664 <USART_1_initialization>:
    6664:	88 b1       	in	r24, 0x08	; 8
    6666:	8d 7f       	andi	r24, 0xFD	; 253
    6668:	88 b9       	out	0x08, r24	; 8
    666a:	e1 e5       	ldi	r30, 0x51	; 81
    666c:	f4 e0       	ldi	r31, 0x04	; 4
    666e:	80 81       	ld	r24, Z
    6670:	87 7f       	andi	r24, 0xF7	; 247
    6672:	80 83       	st	Z, r24
    6674:	89 b1       	in	r24, 0x09	; 9
    6676:	8e 7f       	andi	r24, 0xFE	; 254
    6678:	89 b9       	out	0x09, r24	; 9
    667a:	88 b1       	in	r24, 0x08	; 8
    667c:	81 60       	ori	r24, 0x01	; 1
    667e:	88 b9       	out	0x08, r24	; 8
    6680:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <USART_1_init>
    6684:	08 95       	ret

00006686 <USART_3_initialization>:
    6686:	84 b1       	in	r24, 0x04	; 4
    6688:	8d 7f       	andi	r24, 0xFD	; 253
    668a:	84 b9       	out	0x04, r24	; 4
    668c:	e1 e3       	ldi	r30, 0x31	; 49
    668e:	f4 e0       	ldi	r31, 0x04	; 4
    6690:	80 81       	ld	r24, Z
    6692:	87 7f       	andi	r24, 0xF7	; 247
    6694:	80 83       	st	Z, r24
    6696:	85 b1       	in	r24, 0x05	; 5
    6698:	8e 7f       	andi	r24, 0xFE	; 254
    669a:	85 b9       	out	0x05, r24	; 5
    669c:	84 b1       	in	r24, 0x04	; 4
    669e:	81 60       	ori	r24, 0x01	; 1
    66a0:	84 b9       	out	0x04, r24	; 4
    66a2:	0e 94 eb 34 	call	0x69d6	; 0x69d6 <USART_3_init>
    66a6:	08 95       	ret

000066a8 <EVENT_SYSTEM_0_initialization>:
    66a8:	0e 94 45 34 	call	0x688a	; 0x688a <EVENT_SYSTEM_0_init>
    66ac:	08 95       	ret

000066ae <ADC_0_initialization>:
    66ae:	e0 e7       	ldi	r30, 0x70	; 112
    66b0:	f4 e0       	ldi	r31, 0x04	; 4
    66b2:	80 81       	ld	r24, Z
    66b4:	88 7f       	andi	r24, 0xF8	; 248
    66b6:	84 60       	ori	r24, 0x04	; 4
    66b8:	80 83       	st	Z, r24
    66ba:	80 81       	ld	r24, Z
    66bc:	87 7f       	andi	r24, 0xF7	; 247
    66be:	80 83       	st	Z, r24
    66c0:	e1 e7       	ldi	r30, 0x71	; 113
    66c2:	f4 e0       	ldi	r31, 0x04	; 4
    66c4:	80 81       	ld	r24, Z
    66c6:	88 7f       	andi	r24, 0xF8	; 248
    66c8:	84 60       	ori	r24, 0x04	; 4
    66ca:	80 83       	st	Z, r24
    66cc:	80 81       	ld	r24, Z
    66ce:	87 7f       	andi	r24, 0xF7	; 247
    66d0:	80 83       	st	Z, r24
    66d2:	e2 e7       	ldi	r30, 0x72	; 114
    66d4:	f4 e0       	ldi	r31, 0x04	; 4
    66d6:	80 81       	ld	r24, Z
    66d8:	88 7f       	andi	r24, 0xF8	; 248
    66da:	84 60       	ori	r24, 0x04	; 4
    66dc:	80 83       	st	Z, r24
    66de:	80 81       	ld	r24, Z
    66e0:	87 7f       	andi	r24, 0xF7	; 247
    66e2:	80 83       	st	Z, r24
    66e4:	e3 e7       	ldi	r30, 0x73	; 115
    66e6:	f4 e0       	ldi	r31, 0x04	; 4
    66e8:	80 81       	ld	r24, Z
    66ea:	88 7f       	andi	r24, 0xF8	; 248
    66ec:	84 60       	ori	r24, 0x04	; 4
    66ee:	80 83       	st	Z, r24
    66f0:	80 81       	ld	r24, Z
    66f2:	87 7f       	andi	r24, 0xF7	; 247
    66f4:	80 83       	st	Z, r24
    66f6:	e4 e7       	ldi	r30, 0x74	; 116
    66f8:	f4 e0       	ldi	r31, 0x04	; 4
    66fa:	80 81       	ld	r24, Z
    66fc:	88 7f       	andi	r24, 0xF8	; 248
    66fe:	84 60       	ori	r24, 0x04	; 4
    6700:	80 83       	st	Z, r24
    6702:	80 81       	ld	r24, Z
    6704:	87 7f       	andi	r24, 0xF7	; 247
    6706:	80 83       	st	Z, r24
    6708:	e5 e7       	ldi	r30, 0x75	; 117
    670a:	f4 e0       	ldi	r31, 0x04	; 4
    670c:	80 81       	ld	r24, Z
    670e:	88 7f       	andi	r24, 0xF8	; 248
    6710:	84 60       	ori	r24, 0x04	; 4
    6712:	80 83       	st	Z, r24
    6714:	80 81       	ld	r24, Z
    6716:	87 7f       	andi	r24, 0xF7	; 247
    6718:	80 83       	st	Z, r24
    671a:	e6 e7       	ldi	r30, 0x76	; 118
    671c:	f4 e0       	ldi	r31, 0x04	; 4
    671e:	80 81       	ld	r24, Z
    6720:	88 7f       	andi	r24, 0xF8	; 248
    6722:	84 60       	ori	r24, 0x04	; 4
    6724:	80 83       	st	Z, r24
    6726:	80 81       	ld	r24, Z
    6728:	87 7f       	andi	r24, 0xF7	; 247
    672a:	80 83       	st	Z, r24
    672c:	e0 e9       	ldi	r30, 0x90	; 144
    672e:	f4 e0       	ldi	r31, 0x04	; 4
    6730:	80 81       	ld	r24, Z
    6732:	88 7f       	andi	r24, 0xF8	; 248
    6734:	84 60       	ori	r24, 0x04	; 4
    6736:	80 83       	st	Z, r24
    6738:	80 81       	ld	r24, Z
    673a:	87 7f       	andi	r24, 0xF7	; 247
    673c:	80 83       	st	Z, r24
    673e:	e1 e9       	ldi	r30, 0x91	; 145
    6740:	f4 e0       	ldi	r31, 0x04	; 4
    6742:	80 81       	ld	r24, Z
    6744:	88 7f       	andi	r24, 0xF8	; 248
    6746:	84 60       	ori	r24, 0x04	; 4
    6748:	80 83       	st	Z, r24
    674a:	80 81       	ld	r24, Z
    674c:	87 7f       	andi	r24, 0xF7	; 247
    674e:	80 83       	st	Z, r24
    6750:	e3 e9       	ldi	r30, 0x93	; 147
    6752:	f4 e0       	ldi	r31, 0x04	; 4
    6754:	80 81       	ld	r24, Z
    6756:	88 7f       	andi	r24, 0xF8	; 248
    6758:	84 60       	ori	r24, 0x04	; 4
    675a:	80 83       	st	Z, r24
    675c:	80 81       	ld	r24, Z
    675e:	87 7f       	andi	r24, 0xF7	; 247
    6760:	80 83       	st	Z, r24
    6762:	e2 eb       	ldi	r30, 0xB2	; 178
    6764:	f4 e0       	ldi	r31, 0x04	; 4
    6766:	80 81       	ld	r24, Z
    6768:	88 7f       	andi	r24, 0xF8	; 248
    676a:	84 60       	ori	r24, 0x04	; 4
    676c:	80 83       	st	Z, r24
    676e:	80 81       	ld	r24, Z
    6770:	87 7f       	andi	r24, 0xF7	; 247
    6772:	80 83       	st	Z, r24
    6774:	0e 94 ab 32 	call	0x6556	; 0x6556 <ADC_0_init>
    6778:	08 95       	ret

0000677a <FLASH_0_initialization>:
    677a:	0e 94 47 34 	call	0x688e	; 0x688e <FLASH_0_init>
    677e:	08 95       	ret

00006780 <system_init>:
    6780:	0e 94 d8 32 	call	0x65b0	; 0x65b0 <mcu_init>
    6784:	80 b1       	in	r24, 0x00	; 0
    6786:	87 7f       	andi	r24, 0xF7	; 247
    6788:	80 b9       	out	0x00, r24	; 0
    678a:	e3 e1       	ldi	r30, 0x13	; 19
    678c:	f4 e0       	ldi	r31, 0x04	; 4
    678e:	80 81       	ld	r24, Z
    6790:	88 60       	ori	r24, 0x08	; 8
    6792:	80 83       	st	Z, r24
    6794:	81 b1       	in	r24, 0x01	; 1
    6796:	8f 7e       	andi	r24, 0xEF	; 239
    6798:	81 b9       	out	0x01, r24	; 1
    679a:	80 b1       	in	r24, 0x00	; 0
    679c:	80 61       	ori	r24, 0x10	; 16
    679e:	80 b9       	out	0x00, r24	; 0
    67a0:	81 b1       	in	r24, 0x01	; 1
    67a2:	8f 7d       	andi	r24, 0xDF	; 223
    67a4:	81 b9       	out	0x01, r24	; 1
    67a6:	80 b1       	in	r24, 0x00	; 0
    67a8:	80 62       	ori	r24, 0x20	; 32
    67aa:	80 b9       	out	0x00, r24	; 0
    67ac:	81 b1       	in	r24, 0x01	; 1
    67ae:	8f 7b       	andi	r24, 0xBF	; 191
    67b0:	81 b9       	out	0x01, r24	; 1
    67b2:	80 b1       	in	r24, 0x00	; 0
    67b4:	80 64       	ori	r24, 0x40	; 64
    67b6:	80 b9       	out	0x00, r24	; 0
    67b8:	85 b1       	in	r24, 0x05	; 5
    67ba:	80 61       	ori	r24, 0x10	; 16
    67bc:	85 b9       	out	0x05, r24	; 5
    67be:	84 b1       	in	r24, 0x04	; 4
    67c0:	80 61       	ori	r24, 0x10	; 16
    67c2:	84 b9       	out	0x04, r24	; 4
    67c4:	85 b1       	in	r24, 0x05	; 5
    67c6:	8f 7d       	andi	r24, 0xDF	; 223
    67c8:	85 b9       	out	0x05, r24	; 5
    67ca:	84 b1       	in	r24, 0x04	; 4
    67cc:	80 62       	ori	r24, 0x20	; 32
    67ce:	84 b9       	out	0x04, r24	; 4
    67d0:	89 b1       	in	r24, 0x09	; 9
    67d2:	84 60       	ori	r24, 0x04	; 4
    67d4:	89 b9       	out	0x09, r24	; 9
    67d6:	88 b1       	in	r24, 0x08	; 8
    67d8:	84 60       	ori	r24, 0x04	; 4
    67da:	88 b9       	out	0x08, r24	; 8
    67dc:	89 b1       	in	r24, 0x09	; 9
    67de:	8f 7e       	andi	r24, 0xEF	; 239
    67e0:	89 b9       	out	0x09, r24	; 9
    67e2:	88 b1       	in	r24, 0x08	; 8
    67e4:	80 61       	ori	r24, 0x10	; 16
    67e6:	88 b9       	out	0x08, r24	; 8
    67e8:	89 b1       	in	r24, 0x09	; 9
    67ea:	80 62       	ori	r24, 0x20	; 32
    67ec:	89 b9       	out	0x09, r24	; 9
    67ee:	88 b1       	in	r24, 0x08	; 8
    67f0:	80 62       	ori	r24, 0x20	; 32
    67f2:	88 b9       	out	0x08, r24	; 8
    67f4:	89 b1       	in	r24, 0x09	; 9
    67f6:	8f 7b       	andi	r24, 0xBF	; 191
    67f8:	89 b9       	out	0x09, r24	; 9
    67fa:	88 b1       	in	r24, 0x08	; 8
    67fc:	80 64       	ori	r24, 0x40	; 64
    67fe:	88 b9       	out	0x08, r24	; 8
    6800:	89 b1       	in	r24, 0x09	; 9
    6802:	8f 77       	andi	r24, 0x7F	; 127
    6804:	89 b9       	out	0x09, r24	; 9
    6806:	88 b1       	in	r24, 0x08	; 8
    6808:	80 68       	ori	r24, 0x80	; 128
    680a:	88 b9       	out	0x08, r24	; 8
    680c:	8d b1       	in	r24, 0x0d	; 13
    680e:	80 68       	ori	r24, 0x80	; 128
    6810:	8d b9       	out	0x0d, r24	; 13
    6812:	8c b1       	in	r24, 0x0c	; 12
    6814:	80 68       	ori	r24, 0x80	; 128
    6816:	8c b9       	out	0x0c, r24	; 12
    6818:	81 b3       	in	r24, 0x11	; 17
    681a:	8b 7f       	andi	r24, 0xFB	; 251
    681c:	81 bb       	out	0x11, r24	; 17
    681e:	80 b3       	in	r24, 0x10	; 16
    6820:	84 60       	ori	r24, 0x04	; 4
    6822:	80 bb       	out	0x10, r24	; 16
    6824:	85 b3       	in	r24, 0x15	; 21
    6826:	82 60       	ori	r24, 0x02	; 2
    6828:	85 bb       	out	0x15, r24	; 21
    682a:	84 b3       	in	r24, 0x14	; 20
    682c:	82 60       	ori	r24, 0x02	; 2
    682e:	84 bb       	out	0x14, r24	; 20
    6830:	84 b3       	in	r24, 0x14	; 20
    6832:	87 7f       	andi	r24, 0xF7	; 247
    6834:	84 bb       	out	0x14, r24	; 20
    6836:	e3 eb       	ldi	r30, 0xB3	; 179
    6838:	f4 e0       	ldi	r31, 0x04	; 4
    683a:	80 81       	ld	r24, Z
    683c:	87 7f       	andi	r24, 0xF7	; 247
    683e:	80 83       	st	Z, r24
    6840:	85 b3       	in	r24, 0x15	; 21
    6842:	8f 7e       	andi	r24, 0xEF	; 239
    6844:	85 bb       	out	0x15, r24	; 21
    6846:	84 b3       	in	r24, 0x14	; 20
    6848:	80 61       	ori	r24, 0x10	; 16
    684a:	84 bb       	out	0x14, r24	; 20
    684c:	85 b3       	in	r24, 0x15	; 21
    684e:	8f 7d       	andi	r24, 0xDF	; 223
    6850:	85 bb       	out	0x15, r24	; 21
    6852:	84 b3       	in	r24, 0x14	; 20
    6854:	80 62       	ori	r24, 0x20	; 32
    6856:	84 bb       	out	0x14, r24	; 20
    6858:	0e 94 d4 32 	call	0x65a8	; 0x65a8 <CLKCTRL_init>
    685c:	0e 94 21 33 	call	0x6642	; 0x6642 <USART_0_initialization>
    6860:	0e 94 32 33 	call	0x6664	; 0x6664 <USART_1_initialization>
    6864:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_3_initialization>
    6868:	0e 94 54 33 	call	0x66a8	; 0x66a8 <EVENT_SYSTEM_0_initialization>
    686c:	0e 94 a3 34 	call	0x6946	; 0x6946 <SLPCTRL_init>
    6870:	0e 94 d6 32 	call	0x65ac	; 0x65ac <CPUINT_init>
    6874:	0e 94 57 33 	call	0x66ae	; 0x66ae <ADC_0_initialization>
    6878:	0e 94 bd 33 	call	0x677a	; 0x677a <FLASH_0_initialization>
    687c:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <VREF_0_init>
    6880:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <BOD_init>
    6884:	0e 94 01 35 	call	0x6a02	; 0x6a02 <WDT_0_init>
    6888:	08 95       	ret

0000688a <EVENT_SYSTEM_0_init>:
    688a:	80 e0       	ldi	r24, 0x00	; 0
    688c:	08 95       	ret

0000688e <FLASH_0_init>:
    688e:	80 e0       	ldi	r24, 0x00	; 0
    6890:	08 95       	ret

00006892 <FLASH_0_read_eeprom_byte>:
    6892:	9c 5e       	subi	r25, 0xEC	; 236
    6894:	fc 01       	movw	r30, r24
    6896:	80 81       	ld	r24, Z
    6898:	08 95       	ret

0000689a <FLASH_0_write_eeprom_byte>:
    689a:	1f 93       	push	r17
    689c:	cf 93       	push	r28
    689e:	df 93       	push	r29
    68a0:	ec 01       	movw	r28, r24
    68a2:	16 2f       	mov	r17, r22
    68a4:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    68a8:	83 70       	andi	r24, 0x03	; 3
    68aa:	e1 f7       	brne	.-8      	; 0x68a4 <FLASH_0_write_eeprom_byte+0xa>
    68ac:	43 e1       	ldi	r20, 0x13	; 19
    68ae:	6d e9       	ldi	r22, 0x9D	; 157
    68b0:	80 e0       	ldi	r24, 0x00	; 0
    68b2:	90 e1       	ldi	r25, 0x10	; 16
    68b4:	0e 94 9e 34 	call	0x693c	; 0x693c <protected_write_io>
    68b8:	dc 5e       	subi	r29, 0xEC	; 236
    68ba:	18 83       	st	Y, r17
    68bc:	40 e0       	ldi	r20, 0x00	; 0
    68be:	6d e9       	ldi	r22, 0x9D	; 157
    68c0:	80 e0       	ldi	r24, 0x00	; 0
    68c2:	90 e1       	ldi	r25, 0x10	; 16
    68c4:	0e 94 9e 34 	call	0x693c	; 0x693c <protected_write_io>
    68c8:	80 e0       	ldi	r24, 0x00	; 0
    68ca:	df 91       	pop	r29
    68cc:	cf 91       	pop	r28
    68ce:	1f 91       	pop	r17
    68d0:	08 95       	ret

000068d2 <FLASH_0_read_eeprom_block>:
    68d2:	9b 01       	movw	r18, r22
    68d4:	bc 01       	movw	r22, r24
    68d6:	7c 5e       	subi	r23, 0xEC	; 236
    68d8:	c9 01       	movw	r24, r18
    68da:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <memcpy>
    68de:	08 95       	ret

000068e0 <FLASH_0_write_eeprom_block>:
    68e0:	ef 92       	push	r14
    68e2:	ff 92       	push	r15
    68e4:	0f 93       	push	r16
    68e6:	1f 93       	push	r17
    68e8:	cf 93       	push	r28
    68ea:	df 93       	push	r29
    68ec:	8b 01       	movw	r16, r22
    68ee:	7a 01       	movw	r14, r20
    68f0:	ec 01       	movw	r28, r24
    68f2:	dc 5e       	subi	r29, 0xEC	; 236
    68f4:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    68f8:	83 70       	andi	r24, 0x03	; 3
    68fa:	e1 f7       	brne	.-8      	; 0x68f4 <FLASH_0_write_eeprom_block+0x14>
    68fc:	43 e1       	ldi	r20, 0x13	; 19
    68fe:	6d e9       	ldi	r22, 0x9D	; 157
    6900:	80 e0       	ldi	r24, 0x00	; 0
    6902:	90 e1       	ldi	r25, 0x10	; 16
    6904:	0e 94 9e 34 	call	0x693c	; 0x693c <protected_write_io>
    6908:	f8 01       	movw	r30, r16
    690a:	80 81       	ld	r24, Z
    690c:	88 83       	st	Y, r24
    690e:	f1 e0       	ldi	r31, 0x01	; 1
    6910:	ef 1a       	sub	r14, r31
    6912:	f1 08       	sbc	r15, r1
    6914:	0f 5f       	subi	r16, 0xFF	; 255
    6916:	1f 4f       	sbci	r17, 0xFF	; 255
    6918:	21 96       	adiw	r28, 0x01	; 1
    691a:	e1 14       	cp	r14, r1
    691c:	f1 04       	cpc	r15, r1
    691e:	a1 f7       	brne	.-24     	; 0x6908 <FLASH_0_write_eeprom_block+0x28>
    6920:	40 e0       	ldi	r20, 0x00	; 0
    6922:	6d e9       	ldi	r22, 0x9D	; 157
    6924:	80 e0       	ldi	r24, 0x00	; 0
    6926:	90 e1       	ldi	r25, 0x10	; 16
    6928:	0e 94 9e 34 	call	0x693c	; 0x693c <protected_write_io>
    692c:	80 e0       	ldi	r24, 0x00	; 0
    692e:	df 91       	pop	r29
    6930:	cf 91       	pop	r28
    6932:	1f 91       	pop	r17
    6934:	0f 91       	pop	r16
    6936:	ff 90       	pop	r15
    6938:	ef 90       	pop	r14
    693a:	08 95       	ret

0000693c <protected_write_io>:
    693c:	1b be       	out	0x3b, r1	; 59
    693e:	fc 01       	movw	r30, r24
    6940:	64 bf       	out	0x34, r22	; 52
    6942:	40 83       	st	Z, r20
    6944:	08 95       	ret

00006946 <SLPCTRL_init>:
    6946:	80 e0       	ldi	r24, 0x00	; 0
    6948:	08 95       	ret

0000694a <USART_0_init>:
    694a:	e0 e0       	ldi	r30, 0x00	; 0
    694c:	f8 e0       	ldi	r31, 0x08	; 8
    694e:	81 ea       	ldi	r24, 0xA1	; 161
    6950:	91 e0       	ldi	r25, 0x01	; 1
    6952:	80 87       	std	Z+8, r24	; 0x08
    6954:	91 87       	std	Z+9, r25	; 0x09
    6956:	80 ec       	ldi	r24, 0xC0	; 192
    6958:	86 83       	std	Z+6, r24	; 0x06
    695a:	82 e0       	ldi	r24, 0x02	; 2
    695c:	90 e4       	ldi	r25, 0x40	; 64
    695e:	80 93 c0 54 	sts	0x54C0, r24	; 0x8054c0 <__iob+0x2>
    6962:	90 93 c1 54 	sts	0x54C1, r25	; 0x8054c1 <__iob+0x3>
    6966:	80 e0       	ldi	r24, 0x00	; 0
    6968:	08 95       	ret

0000696a <USART_0_enable_rx>:
    696a:	e0 e0       	ldi	r30, 0x00	; 0
    696c:	f8 e0       	ldi	r31, 0x08	; 8
    696e:	86 81       	ldd	r24, Z+6	; 0x06
    6970:	80 68       	ori	r24, 0x80	; 128
    6972:	86 83       	std	Z+6, r24	; 0x06
    6974:	08 95       	ret

00006976 <USART_0_is_rx_ready>:
    6976:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7e0804>
    697a:	88 1f       	adc	r24, r24
    697c:	88 27       	eor	r24, r24
    697e:	88 1f       	adc	r24, r24
    6980:	08 95       	ret

00006982 <USART_0_read>:
    6982:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7e0804>
    6986:	88 23       	and	r24, r24
    6988:	e4 f7       	brge	.-8      	; 0x6982 <USART_0_read>
    698a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
    698e:	08 95       	ret

00006990 <USART_0_write>:
    6990:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7e0804>
    6994:	95 ff       	sbrs	r25, 5
    6996:	fc cf       	rjmp	.-8      	; 0x6990 <USART_0_write>
    6998:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    699c:	08 95       	ret

0000699e <USART_0_printCHAR>:
    699e:	0e 94 c8 34 	call	0x6990	; 0x6990 <USART_0_write>
    69a2:	80 e0       	ldi	r24, 0x00	; 0
    69a4:	90 e0       	ldi	r25, 0x00	; 0
    69a6:	08 95       	ret

000069a8 <USART_1_init>:
    69a8:	e0 e2       	ldi	r30, 0x20	; 32
    69aa:	f8 e0       	ldi	r31, 0x08	; 8
    69ac:	8b e0       	ldi	r24, 0x0B	; 11
    69ae:	9a e1       	ldi	r25, 0x1A	; 26
    69b0:	80 87       	std	Z+8, r24	; 0x08
    69b2:	91 87       	std	Z+9, r25	; 0x09
    69b4:	80 ec       	ldi	r24, 0xC0	; 192
    69b6:	86 83       	std	Z+6, r24	; 0x06
    69b8:	80 e0       	ldi	r24, 0x00	; 0
    69ba:	08 95       	ret

000069bc <USART_1_enable_rx>:
    69bc:	e0 e2       	ldi	r30, 0x20	; 32
    69be:	f8 e0       	ldi	r31, 0x08	; 8
    69c0:	86 81       	ldd	r24, Z+6	; 0x06
    69c2:	80 68       	ori	r24, 0x80	; 128
    69c4:	86 83       	std	Z+6, r24	; 0x06
    69c6:	08 95       	ret

000069c8 <USART_1_write>:
    69c8:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7e0824>
    69cc:	95 ff       	sbrs	r25, 5
    69ce:	fc cf       	rjmp	.-8      	; 0x69c8 <USART_1_write>
    69d0:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    69d4:	08 95       	ret

000069d6 <USART_3_init>:
    69d6:	e0 e6       	ldi	r30, 0x60	; 96
    69d8:	f8 e0       	ldi	r31, 0x08	; 8
    69da:	80 e2       	ldi	r24, 0x20	; 32
    69dc:	93 e0       	ldi	r25, 0x03	; 3
    69de:	80 87       	std	Z+8, r24	; 0x08
    69e0:	91 87       	std	Z+9, r25	; 0x09
    69e2:	80 ec       	ldi	r24, 0xC0	; 192
    69e4:	86 83       	std	Z+6, r24	; 0x06
    69e6:	80 e0       	ldi	r24, 0x00	; 0
    69e8:	08 95       	ret

000069ea <USART_3_write>:
    69ea:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    69ee:	95 ff       	sbrs	r25, 5
    69f0:	fc cf       	rjmp	.-8      	; 0x69ea <USART_3_write>
    69f2:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
    69f6:	08 95       	ret

000069f8 <VREF_0_init>:
    69f8:	85 e0       	ldi	r24, 0x05	; 5
    69fa:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    69fe:	80 e0       	ldi	r24, 0x00	; 0
    6a00:	08 95       	ret

00006a02 <WDT_0_init>:
    6a02:	4a e0       	ldi	r20, 0x0A	; 10
    6a04:	68 ed       	ldi	r22, 0xD8	; 216
    6a06:	80 e0       	ldi	r24, 0x00	; 0
    6a08:	91 e0       	ldi	r25, 0x01	; 1
    6a0a:	0e 94 9e 34 	call	0x693c	; 0x693c <protected_write_io>
    6a0e:	80 e0       	ldi	r24, 0x00	; 0
    6a10:	08 95       	ret

00006a12 <ConvertShuntBitsToValue>:
	YellowLED_toggle_level();
	}
	USART0_sendHEX(compiledDataString,maxcount);
	USART0_sendString(" ENdata\n");

}
    6a12:	28 2f       	mov	r18, r24
    6a14:	36 2f       	mov	r19, r22
    6a16:	8a 33       	cpi	r24, 0x3A	; 58
    6a18:	89 f4       	brne	.+34     	; 0x6a3c <ConvertShuntBitsToValue+0x2a>
    6a1a:	46 2f       	mov	r20, r22
    6a1c:	50 e0       	ldi	r21, 0x00	; 0
    6a1e:	4f 5f       	subi	r20, 0xFF	; 255
    6a20:	51 09       	sbc	r21, r1
    6a22:	65 e5       	ldi	r22, 0x55	; 85
    6a24:	64 9f       	mul	r22, r20
    6a26:	c0 01       	movw	r24, r0
    6a28:	65 9f       	mul	r22, r21
    6a2a:	90 0d       	add	r25, r0
    6a2c:	11 24       	eor	r1, r1
    6a2e:	64 e6       	ldi	r22, 0x64	; 100
    6a30:	70 e0       	ldi	r23, 0x00	; 0
    6a32:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    6a36:	83 ec       	ldi	r24, 0xC3	; 195
    6a38:	86 0f       	add	r24, r22
    6a3a:	01 c0       	rjmp	.+2      	; 0x6a3e <ConvertShuntBitsToValue+0x2c>
    6a3c:	8f ef       	ldi	r24, 0xFF	; 255
    6a3e:	2b 33       	cpi	r18, 0x3B	; 59
    6a40:	69 f4       	brne	.+26     	; 0x6a5c <ConvertShuntBitsToValue+0x4a>
    6a42:	4b e6       	ldi	r20, 0x6B	; 107
    6a44:	56 e0       	ldi	r21, 0x06	; 6
    6a46:	34 9f       	mul	r19, r20
    6a48:	c0 01       	movw	r24, r0
    6a4a:	35 9f       	mul	r19, r21
    6a4c:	90 0d       	add	r25, r0
    6a4e:	11 24       	eor	r1, r1
    6a50:	68 ee       	ldi	r22, 0xE8	; 232
    6a52:	73 e0       	ldi	r23, 0x03	; 3
    6a54:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    6a58:	83 ec       	ldi	r24, 0xC3	; 195
    6a5a:	86 0f       	add	r24, r22
    6a5c:	08 95       	ret

00006a5e <WriteToSYBT>:
    6a5e:	cf 93       	push	r28
    6a60:	c8 2f       	mov	r28, r24
    6a62:	0e 94 84 1a 	call	0x3508	; 0x3508 <USART_1_disable_rx>
    6a66:	8c 2f       	mov	r24, r28
    6a68:	0e 94 e4 34 	call	0x69c8	; 0x69c8 <USART_1_write>
    6a6c:	8b e7       	ldi	r24, 0x7B	; 123
    6a6e:	95 e1       	ldi	r25, 0x15	; 21
    6a70:	01 97       	sbiw	r24, 0x01	; 1
    6a72:	f1 f7       	brne	.-4      	; 0x6a70 <WriteToSYBT+0x12>
    6a74:	00 c0       	rjmp	.+0      	; 0x6a76 <WriteToSYBT+0x18>
    6a76:	00 00       	nop
    6a78:	80 e0       	ldi	r24, 0x00	; 0
    6a7a:	0e 94 e4 34 	call	0x69c8	; 0x69c8 <USART_1_write>
    6a7e:	95 e8       	ldi	r25, 0x85	; 133
    6a80:	9a 95       	dec	r25
    6a82:	f1 f7       	brne	.-4      	; 0x6a80 <WriteToSYBT+0x22>
    6a84:	00 00       	nop
    6a86:	0e 94 de 34 	call	0x69bc	; 0x69bc <USART_1_enable_rx>
    6a8a:	cf 91       	pop	r28
    6a8c:	08 95       	ret

00006a8e <GetDataFromSYBT>:
    6a8e:	cf 93       	push	r28
    6a90:	c8 2f       	mov	r28, r24
    6a92:	0e 94 2f 35 	call	0x6a5e	; 0x6a5e <WriteToSYBT>
    6a96:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <USART_1_read_with_timeout>
    6a9a:	c8 13       	cpse	r28, r24
    6a9c:	09 c0       	rjmp	.+18     	; 0x6ab0 <GetDataFromSYBT+0x22>
    6a9e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <USART_1_read_with_timeout>
    6aa2:	80 93 84 54 	sts	0x5484, r24	; 0x805484 <SYBTreturnedData>
    6aa6:	8d b1       	in	r24, 0x0d	; 13
    6aa8:	8f 77       	andi	r24, 0x7F	; 127
    6aaa:	8d b9       	out	0x0d, r24	; 13
    6aac:	81 e0       	ldi	r24, 0x01	; 1
    6aae:	07 c0       	rjmp	.+14     	; 0x6abe <GetDataFromSYBT+0x30>
    6ab0:	8a e2       	ldi	r24, 0x2A	; 42
    6ab2:	80 93 84 54 	sts	0x5484, r24	; 0x805484 <SYBTreturnedData>
    6ab6:	8d b1       	in	r24, 0x0d	; 13
    6ab8:	80 68       	ori	r24, 0x80	; 128
    6aba:	8d b9       	out	0x0d, r24	; 13
    6abc:	80 e0       	ldi	r24, 0x00	; 0
    6abe:	cf 91       	pop	r28
    6ac0:	08 95       	ret

00006ac2 <GoToAddress>:
    6ac2:	cf 93       	push	r28
    6ac4:	c8 2f       	mov	r28, r24
    6ac6:	0e 94 84 1a 	call	0x3508	; 0x3508 <USART_1_disable_rx>
    6aca:	83 e0       	ldi	r24, 0x03	; 3
    6acc:	0e 94 e4 34 	call	0x69c8	; 0x69c8 <USART_1_write>
    6ad0:	8b e7       	ldi	r24, 0x7B	; 123
    6ad2:	95 e1       	ldi	r25, 0x15	; 21
    6ad4:	01 97       	sbiw	r24, 0x01	; 1
    6ad6:	f1 f7       	brne	.-4      	; 0x6ad4 <GoToAddress+0x12>
    6ad8:	00 c0       	rjmp	.+0      	; 0x6ada <GoToAddress+0x18>
    6ada:	00 00       	nop
    6adc:	8c 2f       	mov	r24, r28
    6ade:	0e 94 e4 34 	call	0x69c8	; 0x69c8 <USART_1_write>
    6ae2:	87 ee       	ldi	r24, 0xE7	; 231
    6ae4:	93 e0       	ldi	r25, 0x03	; 3
    6ae6:	01 97       	sbiw	r24, 0x01	; 1
    6ae8:	f1 f7       	brne	.-4      	; 0x6ae6 <GoToAddress+0x24>
    6aea:	00 c0       	rjmp	.+0      	; 0x6aec <GoToAddress+0x2a>
    6aec:	00 00       	nop
    6aee:	0e 94 de 34 	call	0x69bc	; 0x69bc <USART_1_enable_rx>
    6af2:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <USART_1_read_with_timeout>
    6af6:	c8 13       	cpse	r28, r24
    6af8:	02 c0       	rjmp	.+4      	; 0x6afe <GoToAddress+0x3c>
    6afa:	81 e0       	ldi	r24, 0x01	; 1
    6afc:	01 c0       	rjmp	.+2      	; 0x6b00 <GoToAddress+0x3e>
    6afe:	80 e0       	ldi	r24, 0x00	; 0
    6b00:	cf 91       	pop	r28
    6b02:	08 95       	ret

00006b04 <GetSYBT5serialNumber>:
    6b04:	1f 93       	push	r17
    6b06:	cf 93       	push	r28
    6b08:	df 93       	push	r29
    6b0a:	cd b7       	in	r28, 0x3d	; 61
    6b0c:	de b7       	in	r29, 0x3e	; 62
    6b0e:	2f 97       	sbiw	r28, 0x0f	; 15
    6b10:	cd bf       	out	0x3d, r28	; 61
    6b12:	de bf       	out	0x3e, r29	; 62
    6b14:	fe 01       	movw	r30, r28
    6b16:	31 96       	adiw	r30, 0x01	; 1
    6b18:	8f e0       	ldi	r24, 0x0F	; 15
    6b1a:	df 01       	movw	r26, r30
    6b1c:	1d 92       	st	X+, r1
    6b1e:	8a 95       	dec	r24
    6b20:	e9 f7       	brne	.-6      	; 0x6b1c <GetSYBT5serialNumber+0x18>
    6b22:	8c e2       	ldi	r24, 0x2C	; 44
    6b24:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <GoToAddress>
    6b28:	bf ef       	ldi	r27, 0xFF	; 255
    6b2a:	26 e7       	ldi	r18, 0x76	; 118
    6b2c:	31 e0       	ldi	r19, 0x01	; 1
    6b2e:	b1 50       	subi	r27, 0x01	; 1
    6b30:	20 40       	sbci	r18, 0x00	; 0
    6b32:	30 40       	sbci	r19, 0x00	; 0
    6b34:	e1 f7       	brne	.-8      	; 0x6b2e <GetSYBT5serialNumber+0x2a>
    6b36:	00 c0       	rjmp	.+0      	; 0x6b38 <GetSYBT5serialNumber+0x34>
    6b38:	00 00       	nop
    6b3a:	10 e0       	ldi	r17, 0x00	; 0
    6b3c:	1a c0       	rjmp	.+52     	; 0x6b72 <GetSYBT5serialNumber+0x6e>
    6b3e:	87 e0       	ldi	r24, 0x07	; 7
    6b40:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <GetDataFromSYBT>
    6b44:	90 91 45 53 	lds	r25, 0x5345	; 0x805345 <savedBatteryStringBitPosition>
    6b48:	e1 2f       	mov	r30, r17
    6b4a:	f0 e0       	ldi	r31, 0x00	; 0
    6b4c:	e9 0f       	add	r30, r25
    6b4e:	f1 1d       	adc	r31, r1
    6b50:	90 91 84 54 	lds	r25, 0x5484	; 0x805484 <SYBTreturnedData>
    6b54:	eb 55       	subi	r30, 0x5B	; 91
    6b56:	fc 4a       	sbci	r31, 0xAC	; 172
    6b58:	90 83       	st	Z, r25
    6b5a:	a8 95       	wdr
    6b5c:	9f ef       	ldi	r25, 0xFF	; 255
    6b5e:	a6 e7       	ldi	r26, 0x76	; 118
    6b60:	b1 e0       	ldi	r27, 0x01	; 1
    6b62:	91 50       	subi	r25, 0x01	; 1
    6b64:	a0 40       	sbci	r26, 0x00	; 0
    6b66:	b0 40       	sbci	r27, 0x00	; 0
    6b68:	e1 f7       	brne	.-8      	; 0x6b62 <GetSYBT5serialNumber+0x5e>
    6b6a:	00 c0       	rjmp	.+0      	; 0x6b6c <GetSYBT5serialNumber+0x68>
    6b6c:	00 00       	nop
    6b6e:	a8 95       	wdr
    6b70:	1f 5f       	subi	r17, 0xFF	; 255
    6b72:	1c 30       	cpi	r17, 0x0C	; 12
    6b74:	20 f3       	brcs	.-56     	; 0x6b3e <GetSYBT5serialNumber+0x3a>
    6b76:	e0 91 45 53 	lds	r30, 0x5345	; 0x805345 <savedBatteryStringBitPosition>
    6b7a:	f0 e0       	ldi	r31, 0x00	; 0
    6b7c:	ef 54       	subi	r30, 0x4F	; 79
    6b7e:	fc 4a       	sbci	r31, 0xAC	; 172
    6b80:	9c e2       	ldi	r25, 0x2C	; 44
    6b82:	90 83       	st	Z, r25
    6b84:	2f 96       	adiw	r28, 0x0f	; 15
    6b86:	cd bf       	out	0x3d, r28	; 61
    6b88:	de bf       	out	0x3e, r29	; 62
    6b8a:	df 91       	pop	r29
    6b8c:	cf 91       	pop	r28
    6b8e:	1f 91       	pop	r17
    6b90:	08 95       	ret

00006b92 <GetSYBTdate>:
    6b92:	1f 93       	push	r17
    6b94:	cf 93       	push	r28
    6b96:	df 93       	push	r29
    6b98:	cd b7       	in	r28, 0x3d	; 61
    6b9a:	de b7       	in	r29, 0x3e	; 62
    6b9c:	29 97       	sbiw	r28, 0x09	; 9
    6b9e:	cd bf       	out	0x3d, r28	; 61
    6ba0:	de bf       	out	0x3e, r29	; 62
    6ba2:	fe 01       	movw	r30, r28
    6ba4:	31 96       	adiw	r30, 0x01	; 1
    6ba6:	89 e0       	ldi	r24, 0x09	; 9
    6ba8:	df 01       	movw	r26, r30
    6baa:	1d 92       	st	X+, r1
    6bac:	8a 95       	dec	r24
    6bae:	e9 f7       	brne	.-6      	; 0x6baa <GetSYBTdate+0x18>
    6bb0:	88 e4       	ldi	r24, 0x48	; 72
    6bb2:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <GoToAddress>
    6bb6:	bf ef       	ldi	r27, 0xFF	; 255
    6bb8:	26 e7       	ldi	r18, 0x76	; 118
    6bba:	31 e0       	ldi	r19, 0x01	; 1
    6bbc:	b1 50       	subi	r27, 0x01	; 1
    6bbe:	20 40       	sbci	r18, 0x00	; 0
    6bc0:	30 40       	sbci	r19, 0x00	; 0
    6bc2:	e1 f7       	brne	.-8      	; 0x6bbc <GetSYBTdate+0x2a>
    6bc4:	00 c0       	rjmp	.+0      	; 0x6bc6 <GetSYBTdate+0x34>
    6bc6:	00 00       	nop
    6bc8:	10 e0       	ldi	r17, 0x00	; 0
    6bca:	23 c0       	rjmp	.+70     	; 0x6c12 <GetSYBTdate+0x80>
    6bcc:	87 e0       	ldi	r24, 0x07	; 7
    6bce:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <GetDataFromSYBT>
    6bd2:	21 2f       	mov	r18, r17
    6bd4:	30 e0       	ldi	r19, 0x00	; 0
    6bd6:	90 91 84 54 	lds	r25, 0x5484	; 0x805484 <SYBTreturnedData>
    6bda:	e1 e0       	ldi	r30, 0x01	; 1
    6bdc:	f0 e0       	ldi	r31, 0x00	; 0
    6bde:	ec 0f       	add	r30, r28
    6be0:	fd 1f       	adc	r31, r29
    6be2:	e2 0f       	add	r30, r18
    6be4:	f3 1f       	adc	r31, r19
    6be6:	90 83       	st	Z, r25
    6be8:	90 91 45 53 	lds	r25, 0x5345	; 0x805345 <savedBatteryStringBitPosition>
    6bec:	29 0f       	add	r18, r25
    6bee:	31 1d       	adc	r19, r1
    6bf0:	90 91 84 54 	lds	r25, 0x5484	; 0x805484 <SYBTreturnedData>
    6bf4:	f9 01       	movw	r30, r18
    6bf6:	eb 55       	subi	r30, 0x5B	; 91
    6bf8:	fc 4a       	sbci	r31, 0xAC	; 172
    6bfa:	90 83       	st	Z, r25
    6bfc:	9f ef       	ldi	r25, 0xFF	; 255
    6bfe:	a6 e7       	ldi	r26, 0x76	; 118
    6c00:	b1 e0       	ldi	r27, 0x01	; 1
    6c02:	91 50       	subi	r25, 0x01	; 1
    6c04:	a0 40       	sbci	r26, 0x00	; 0
    6c06:	b0 40       	sbci	r27, 0x00	; 0
    6c08:	e1 f7       	brne	.-8      	; 0x6c02 <GetSYBTdate+0x70>
    6c0a:	00 c0       	rjmp	.+0      	; 0x6c0c <GetSYBTdate+0x7a>
    6c0c:	00 00       	nop
    6c0e:	a8 95       	wdr
    6c10:	1f 5f       	subi	r17, 0xFF	; 255
    6c12:	18 30       	cpi	r17, 0x08	; 8
    6c14:	d8 f2       	brcs	.-74     	; 0x6bcc <GetSYBTdate+0x3a>
    6c16:	90 91 45 53 	lds	r25, 0x5345	; 0x805345 <savedBatteryStringBitPosition>
    6c1a:	e9 2f       	mov	r30, r25
    6c1c:	f0 e0       	ldi	r31, 0x00	; 0
    6c1e:	e3 55       	subi	r30, 0x53	; 83
    6c20:	fc 4a       	sbci	r31, 0xAC	; 172
    6c22:	2c e2       	ldi	r18, 0x2C	; 44
    6c24:	20 83       	st	Z, r18
    6c26:	97 5f       	subi	r25, 0xF7	; 247
    6c28:	90 93 45 53 	sts	0x5345, r25	; 0x805345 <savedBatteryStringBitPosition>
    6c2c:	29 96       	adiw	r28, 0x09	; 9
    6c2e:	cd bf       	out	0x3d, r28	; 61
    6c30:	de bf       	out	0x3e, r29	; 62
    6c32:	df 91       	pop	r29
    6c34:	cf 91       	pop	r28
    6c36:	1f 91       	pop	r17
    6c38:	08 95       	ret

00006c3a <GetSYBTname>:
    6c3a:	0f 93       	push	r16
    6c3c:	1f 93       	push	r17
    6c3e:	cf 93       	push	r28
    6c40:	df 93       	push	r29
    6c42:	cd b7       	in	r28, 0x3d	; 61
    6c44:	de b7       	in	r29, 0x3e	; 62
    6c46:	27 97       	sbiw	r28, 0x07	; 7
    6c48:	cd bf       	out	0x3d, r28	; 61
    6c4a:	de bf       	out	0x3e, r29	; 62
    6c4c:	fe 01       	movw	r30, r28
    6c4e:	31 96       	adiw	r30, 0x01	; 1
    6c50:	87 e0       	ldi	r24, 0x07	; 7
    6c52:	df 01       	movw	r26, r30
    6c54:	1d 92       	st	X+, r1
    6c56:	8a 95       	dec	r24
    6c58:	e9 f7       	brne	.-6      	; 0x6c54 <GetSYBTname+0x1a>
    6c5a:	05 ea       	ldi	r16, 0xA5	; 165
    6c5c:	13 e5       	ldi	r17, 0x53	; 83
    6c5e:	80 e5       	ldi	r24, 0x50	; 80
    6c60:	f8 01       	movw	r30, r16
    6c62:	11 92       	st	Z+, r1
    6c64:	8a 95       	dec	r24
    6c66:	e9 f7       	brne	.-6      	; 0x6c62 <GetSYBTname+0x28>
    6c68:	10 92 45 53 	sts	0x5345, r1	; 0x805345 <savedBatteryStringBitPosition>
    6c6c:	8c e3       	ldi	r24, 0x3C	; 60
    6c6e:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <GoToAddress>
    6c72:	ff ef       	ldi	r31, 0xFF	; 255
    6c74:	26 e7       	ldi	r18, 0x76	; 118
    6c76:	31 e0       	ldi	r19, 0x01	; 1
    6c78:	f1 50       	subi	r31, 0x01	; 1
    6c7a:	20 40       	sbci	r18, 0x00	; 0
    6c7c:	30 40       	sbci	r19, 0x00	; 0
    6c7e:	e1 f7       	brne	.-8      	; 0x6c78 <GetSYBTname+0x3e>
    6c80:	00 c0       	rjmp	.+0      	; 0x6c82 <GetSYBTname+0x48>
    6c82:	00 00       	nop
    6c84:	93 e7       	ldi	r25, 0x73	; 115
    6c86:	d8 01       	movw	r26, r16
    6c88:	9c 93       	st	X, r25
    6c8a:	99 e7       	ldi	r25, 0x79	; 121
    6c8c:	11 96       	adiw	r26, 0x01	; 1
    6c8e:	9c 93       	st	X, r25
    6c90:	11 97       	sbiw	r26, 0x01	; 1
    6c92:	92 e6       	ldi	r25, 0x62	; 98
    6c94:	12 96       	adiw	r26, 0x02	; 2
    6c96:	9c 93       	st	X, r25
    6c98:	12 97       	sbiw	r26, 0x02	; 2
    6c9a:	94 e7       	ldi	r25, 0x74	; 116
    6c9c:	13 96       	adiw	r26, 0x03	; 3
    6c9e:	9c 93       	st	X, r25
    6ca0:	13 97       	sbiw	r26, 0x03	; 3
    6ca2:	96 e7       	ldi	r25, 0x76	; 118
    6ca4:	14 96       	adiw	r26, 0x04	; 4
    6ca6:	9c 93       	st	X, r25
    6ca8:	15 e0       	ldi	r17, 0x05	; 5
    6caa:	1f c0       	rjmp	.+62     	; 0x6cea <GetSYBTname+0xb0>
    6cac:	87 e0       	ldi	r24, 0x07	; 7
    6cae:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <GetDataFromSYBT>
    6cb2:	21 2f       	mov	r18, r17
    6cb4:	30 e0       	ldi	r19, 0x00	; 0
    6cb6:	90 91 84 54 	lds	r25, 0x5484	; 0x805484 <SYBTreturnedData>
    6cba:	e1 e0       	ldi	r30, 0x01	; 1
    6cbc:	f0 e0       	ldi	r31, 0x00	; 0
    6cbe:	ec 0f       	add	r30, r28
    6cc0:	fd 1f       	adc	r31, r29
    6cc2:	e2 0f       	add	r30, r18
    6cc4:	f3 1f       	adc	r31, r19
    6cc6:	90 83       	st	Z, r25
    6cc8:	90 91 84 54 	lds	r25, 0x5484	; 0x805484 <SYBTreturnedData>
    6ccc:	f9 01       	movw	r30, r18
    6cce:	eb 55       	subi	r30, 0x5B	; 91
    6cd0:	fc 4a       	sbci	r31, 0xAC	; 172
    6cd2:	90 83       	st	Z, r25
    6cd4:	bf ef       	ldi	r27, 0xFF	; 255
    6cd6:	e6 e7       	ldi	r30, 0x76	; 118
    6cd8:	f1 e0       	ldi	r31, 0x01	; 1
    6cda:	b1 50       	subi	r27, 0x01	; 1
    6cdc:	e0 40       	sbci	r30, 0x00	; 0
    6cde:	f0 40       	sbci	r31, 0x00	; 0
    6ce0:	e1 f7       	brne	.-8      	; 0x6cda <GetSYBTname+0xa0>
    6ce2:	00 c0       	rjmp	.+0      	; 0x6ce4 <GetSYBTname+0xaa>
    6ce4:	00 00       	nop
    6ce6:	a8 95       	wdr
    6ce8:	1f 5f       	subi	r17, 0xFF	; 255
    6cea:	1a 30       	cpi	r17, 0x0A	; 10
    6cec:	f8 f2       	brcs	.-66     	; 0x6cac <GetSYBTname+0x72>
    6cee:	9c e2       	ldi	r25, 0x2C	; 44
    6cf0:	90 93 af 53 	sts	0x53AF, r25	; 0x8053af <savedBatteryString+0xa>
    6cf4:	9b e0       	ldi	r25, 0x0B	; 11
    6cf6:	90 93 45 53 	sts	0x5345, r25	; 0x805345 <savedBatteryStringBitPosition>
    6cfa:	27 96       	adiw	r28, 0x07	; 7
    6cfc:	cd bf       	out	0x3d, r28	; 61
    6cfe:	de bf       	out	0x3e, r29	; 62
    6d00:	df 91       	pop	r29
    6d02:	cf 91       	pop	r28
    6d04:	1f 91       	pop	r17
    6d06:	0f 91       	pop	r16
    6d08:	08 95       	ret

00006d0a <GetSYBT5emperature>:
//----------------------------------------------------------------------------------------------------------------
bool GetSYBT5emperature(void){  //Reads directly from PIC, not from EEPROM, but needs 2 cycles because one cycle is used to calculate the temperature from raw data. 
    6d0a:	cf 93       	push	r28
    6d0c:	df 93       	push	r29
    6d0e:	cd b7       	in	r28, 0x3d	; 61
    6d10:	de b7       	in	r29, 0x3e	; 62
    6d12:	2c 97       	sbiw	r28, 0x0c	; 12
    6d14:	cd bf       	out	0x3d, r28	; 61
    6d16:	de bf       	out	0x3e, r29	; 62
	
	bool ReceivedOK;

	char SYBT5temperatureLocal[8];
	char SYBT5temperatureApp[4];
	memset(SYBT5temperatureLocal,0,8*sizeof(char));
    6d18:	fe 01       	movw	r30, r28
    6d1a:	31 96       	adiw	r30, 0x01	; 1
    6d1c:	88 e0       	ldi	r24, 0x08	; 8
    6d1e:	df 01       	movw	r26, r30
    6d20:	1d 92       	st	X+, r1
    6d22:	8a 95       	dec	r24
    6d24:	e9 f7       	brne	.-6      	; 0x6d20 <GetSYBT5emperature+0x16>
	memset(SYBT5temperatureApp,0,4*sizeof(char));
    6d26:	38 96       	adiw	r30, 0x08	; 8
    6d28:	84 e0       	ldi	r24, 0x04	; 4
    6d2a:	df 01       	movw	r26, r30
    6d2c:	1d 92       	st	X+, r1
    6d2e:	8a 95       	dec	r24
    6d30:	e9 f7       	brne	.-6      	; 0x6d2c <GetSYBT5emperature+0x22>
	//ReceivedOK = GetDataFromSYBT(ReadTemperature);
	if(GetDataFromSYBT(ReadTemperature)){
    6d32:	89 e0       	ldi	r24, 0x09	; 9
    6d34:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <GetDataFromSYBT>
    6d38:	88 23       	and	r24, r24
    6d3a:	09 f4       	brne	.+2      	; 0x6d3e <GetSYBT5emperature+0x34>
    6d3c:	49 c0       	rjmp	.+146    	; 0x6dd0 <GetSYBT5emperature+0xc6>
			if(SYBTreturnedData < 100){
    6d3e:	80 91 84 54 	lds	r24, 0x5484	; 0x805484 <SYBTreturnedData>
    6d42:	84 36       	cpi	r24, 0x64	; 100
    6d44:	e0 f4       	brcc	.+56     	; 0x6d7e <GetSYBT5emperature+0x74>
			//	SYBTreturnedData = SYBTreturnedData *10;
				sprintf(SYBT5temperatureLocal,"TMP%03i\n",SYBTreturnedData);
    6d46:	80 91 84 54 	lds	r24, 0x5484	; 0x805484 <SYBTreturnedData>
    6d4a:	1f 92       	push	r1
    6d4c:	8f 93       	push	r24
    6d4e:	85 e8       	ldi	r24, 0x85	; 133
    6d50:	95 e4       	ldi	r25, 0x45	; 69
    6d52:	9f 93       	push	r25
    6d54:	8f 93       	push	r24
    6d56:	ce 01       	movw	r24, r28
    6d58:	01 96       	adiw	r24, 0x01	; 1
    6d5a:	9f 93       	push	r25
    6d5c:	8f 93       	push	r24
    6d5e:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
				SYBT5temperatureLocal[3] = SYBT5temperatureLocal[4];
    6d62:	8d 81       	ldd	r24, Y+5	; 0x05
    6d64:	8c 83       	std	Y+4, r24	; 0x04
				SYBT5temperatureLocal[4] = SYBT5temperatureLocal[5] - AddDecimalToASCII;
    6d66:	8e 81       	ldd	r24, Y+6	; 0x06
    6d68:	8f 50       	subi	r24, 0x0F	; 15
    6d6a:	8d 83       	std	Y+5, r24	; 0x05
				SYBT5temperatureLocal[5] = ASCII_0;
    6d6c:	80 e3       	ldi	r24, 0x30	; 48
    6d6e:	8e 83       	std	Y+6, r24	; 0x06
    6d70:	0f 90       	pop	r0
    6d72:	0f 90       	pop	r0
    6d74:	0f 90       	pop	r0
    6d76:	0f 90       	pop	r0
    6d78:	0f 90       	pop	r0
    6d7a:	0f 90       	pop	r0
    6d7c:	14 c0       	rjmp	.+40     	; 0x6da6 <GetSYBT5emperature+0x9c>
			}
			else{
				sprintf(SYBT5temperatureLocal,"TMP%03i\n",SYBTreturnedData);			
    6d7e:	80 91 84 54 	lds	r24, 0x5484	; 0x805484 <SYBTreturnedData>
    6d82:	1f 92       	push	r1
    6d84:	8f 93       	push	r24
    6d86:	85 e8       	ldi	r24, 0x85	; 133
    6d88:	95 e4       	ldi	r25, 0x45	; 69
    6d8a:	9f 93       	push	r25
    6d8c:	8f 93       	push	r24
    6d8e:	ce 01       	movw	r24, r28
    6d90:	01 96       	adiw	r24, 0x01	; 1
    6d92:	9f 93       	push	r25
    6d94:	8f 93       	push	r24
    6d96:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    6d9a:	0f 90       	pop	r0
    6d9c:	0f 90       	pop	r0
    6d9e:	0f 90       	pop	r0
    6da0:	0f 90       	pop	r0
    6da2:	0f 90       	pop	r0
    6da4:	0f 90       	pop	r0
			}		
		sprintf(SYBT5temperatureApp,"%03i,",SYBTreturnedData);
    6da6:	80 91 84 54 	lds	r24, 0x5484	; 0x805484 <SYBTreturnedData>
    6daa:	1f 92       	push	r1
    6dac:	8f 93       	push	r24
    6dae:	8e e8       	ldi	r24, 0x8E	; 142
    6db0:	95 e4       	ldi	r25, 0x45	; 69
    6db2:	9f 93       	push	r25
    6db4:	8f 93       	push	r24
    6db6:	ce 01       	movw	r24, r28
    6db8:	09 96       	adiw	r24, 0x09	; 9
    6dba:	9f 93       	push	r25
    6dbc:	8f 93       	push	r24
    6dbe:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    6dc2:	0f 90       	pop	r0
    6dc4:	0f 90       	pop	r0
    6dc6:	0f 90       	pop	r0
    6dc8:	0f 90       	pop	r0
    6dca:	0f 90       	pop	r0
    6dcc:	0f 90       	pop	r0
    6dce:	12 c0       	rjmp	.+36     	; 0x6df4 <GetSYBT5emperature+0xea>
	}
	else{
		sprintf(SYBT5temperatureLocal,"TMP---\n");
    6dd0:	88 e0       	ldi	r24, 0x08	; 8
    6dd2:	e9 e9       	ldi	r30, 0x99	; 153
    6dd4:	f5 e4       	ldi	r31, 0x45	; 69
    6dd6:	de 01       	movw	r26, r28
    6dd8:	11 96       	adiw	r26, 0x01	; 1
    6dda:	01 90       	ld	r0, Z+
    6ddc:	0d 92       	st	X+, r0
    6dde:	8a 95       	dec	r24
    6de0:	e1 f7       	brne	.-8      	; 0x6dda <GetSYBT5emperature+0xd0>
		sprintf(SYBT5temperatureApp,"***,");
    6de2:	85 e0       	ldi	r24, 0x05	; 5
    6de4:	e4 e9       	ldi	r30, 0x94	; 148
    6de6:	f5 e4       	ldi	r31, 0x45	; 69
    6de8:	de 01       	movw	r26, r28
    6dea:	19 96       	adiw	r26, 0x09	; 9
    6dec:	01 90       	ld	r0, Z+
    6dee:	0d 92       	st	X+, r0
    6df0:	8a 95       	dec	r24
    6df2:	e1 f7       	brne	.-8      	; 0x6dec <GetSYBT5emperature+0xe2>
	}
	//USART_0_write(ReceivedOK);
	//_delay_ms(50);
	wdt_reset();
    6df4:	a8 95       	wdr
	strcat(savedBatteryString,SYBT5temperatureApp);						//Next is GetSYBT5shuntValue
    6df6:	be 01       	movw	r22, r28
    6df8:	67 5f       	subi	r22, 0xF7	; 247
    6dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    6dfc:	85 ea       	ldi	r24, 0xA5	; 165
    6dfe:	93 e5       	ldi	r25, 0x53	; 83
    6e00:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <strcat>
	USART3_sendString(SYBT5temperatureLocal);
    6e04:	ce 01       	movw	r24, r28
    6e06:	01 96       	adiw	r24, 0x01	; 1
    6e08:	0e 94 4c 1a 	call	0x3498	; 0x3498 <USART3_sendString>
	//USART0_sendString(SYBT5temperatureLocal);
	
	return ReceivedOK;
}
    6e0c:	80 e0       	ldi	r24, 0x00	; 0
    6e0e:	2c 96       	adiw	r28, 0x0c	; 12
    6e10:	cd bf       	out	0x3d, r28	; 61
    6e12:	de bf       	out	0x3e, r29	; 62
    6e14:	df 91       	pop	r29
    6e16:	cf 91       	pop	r28
    6e18:	08 95       	ret

00006e1a <GetSYBT5highTemperature>:
//----------------------------------------------------------------------------------------------------------------
bool GetSYBT5highTemperature(void){		//Go to high temperature address. 
    6e1a:	cf 93       	push	r28
    6e1c:	df 93       	push	r29
    6e1e:	cd b7       	in	r28, 0x3d	; 61
    6e20:	de b7       	in	r29, 0x3e	; 62
    6e22:	2c 97       	sbiw	r28, 0x0c	; 12
    6e24:	cd bf       	out	0x3d, r28	; 61
    6e26:	de bf       	out	0x3e, r29	; 62
	
	bool ReceivedOK;
	uint8_t temperature;
	char SYBT5highTemperature[12];
	
	memset(SYBT5highTemperature,0,12*sizeof(char));
    6e28:	fe 01       	movw	r30, r28
    6e2a:	31 96       	adiw	r30, 0x01	; 1
    6e2c:	8c e0       	ldi	r24, 0x0C	; 12
    6e2e:	df 01       	movw	r26, r30
    6e30:	1d 92       	st	X+, r1
    6e32:	8a 95       	dec	r24
    6e34:	e9 f7       	brne	.-6      	; 0x6e30 <GetSYBT5highTemperature+0x16>
	GoToAddress(GotoHighTemperatureAddress);
    6e36:	86 e7       	ldi	r24, 0x76	; 118
    6e38:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <GoToAddress>
    6e3c:	8f e4       	ldi	r24, 0x4F	; 79
    6e3e:	93 ec       	ldi	r25, 0xC3	; 195
    6e40:	01 97       	sbiw	r24, 0x01	; 1
    6e42:	f1 f7       	brne	.-4      	; 0x6e40 <GetSYBT5highTemperature+0x26>
    6e44:	00 c0       	rjmp	.+0      	; 0x6e46 <GetSYBT5highTemperature+0x2c>
    6e46:	00 00       	nop
		_delay_ms(50);
	if(GetDataFromSYBT(ReadEEPROM)){
    6e48:	87 e0       	ldi	r24, 0x07	; 7
    6e4a:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <GetDataFromSYBT>
    6e4e:	88 23       	and	r24, r24
    6e50:	69 f1       	breq	.+90     	; 0x6eac <GetSYBT5highTemperature+0x92>
    6e52:	9f ef       	ldi	r25, 0xFF	; 255
    6e54:	a6 e7       	ldi	r26, 0x76	; 118
    6e56:	b1 e0       	ldi	r27, 0x01	; 1
    6e58:	91 50       	subi	r25, 0x01	; 1
    6e5a:	a0 40       	sbci	r26, 0x00	; 0
    6e5c:	b0 40       	sbci	r27, 0x00	; 0
    6e5e:	e1 f7       	brne	.-8      	; 0x6e58 <GetSYBT5highTemperature+0x3e>
    6e60:	00 c0       	rjmp	.+0      	; 0x6e62 <GetSYBT5highTemperature+0x48>
    6e62:	00 00       	nop
		//USART_0_write(ReceivedOK);
		_delay_ms(CommDelay);
		//what is really needed is f to C conversion
		temperature = (SYBTreturnedData * 9)/5 + 32;		//Current temperature is reported in F but hi temperature is recorded in C. 
    6e64:	80 91 84 54 	lds	r24, 0x5484	; 0x805484 <SYBTreturnedData>
    6e68:	90 e0       	ldi	r25, 0x00	; 0
    6e6a:	9c 01       	movw	r18, r24
    6e6c:	22 0f       	add	r18, r18
    6e6e:	33 1f       	adc	r19, r19
    6e70:	22 0f       	add	r18, r18
    6e72:	33 1f       	adc	r19, r19
    6e74:	22 0f       	add	r18, r18
    6e76:	33 1f       	adc	r19, r19
    6e78:	82 0f       	add	r24, r18
    6e7a:	93 1f       	adc	r25, r19
    6e7c:	65 e0       	ldi	r22, 0x05	; 5
    6e7e:	70 e0       	ldi	r23, 0x00	; 0
    6e80:	0e 94 c9 3c 	call	0x7992	; 0x7992 <__divmodhi4>
    6e84:	60 5e       	subi	r22, 0xE0	; 224
		sprintf(SYBT5highTemperature,"%03i,",temperature);		
    6e86:	1f 92       	push	r1
    6e88:	6f 93       	push	r22
    6e8a:	8e e8       	ldi	r24, 0x8E	; 142
    6e8c:	95 e4       	ldi	r25, 0x45	; 69
    6e8e:	9f 93       	push	r25
    6e90:	8f 93       	push	r24
    6e92:	ce 01       	movw	r24, r28
    6e94:	01 96       	adiw	r24, 0x01	; 1
    6e96:	9f 93       	push	r25
    6e98:	8f 93       	push	r24
    6e9a:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    6e9e:	0f 90       	pop	r0
    6ea0:	0f 90       	pop	r0
    6ea2:	0f 90       	pop	r0
    6ea4:	0f 90       	pop	r0
    6ea6:	0f 90       	pop	r0
    6ea8:	0f 90       	pop	r0
    6eaa:	12 c0       	rjmp	.+36     	; 0x6ed0 <GetSYBT5highTemperature+0xb6>
	}
	else{
		sprintf(SYBT5highTemperature,"***,",temperature);
    6eac:	1f 92       	push	r1
    6eae:	1f 92       	push	r1
    6eb0:	84 e9       	ldi	r24, 0x94	; 148
    6eb2:	95 e4       	ldi	r25, 0x45	; 69
    6eb4:	9f 93       	push	r25
    6eb6:	8f 93       	push	r24
    6eb8:	ce 01       	movw	r24, r28
    6eba:	01 96       	adiw	r24, 0x01	; 1
    6ebc:	9f 93       	push	r25
    6ebe:	8f 93       	push	r24
    6ec0:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    6ec4:	0f 90       	pop	r0
    6ec6:	0f 90       	pop	r0
    6ec8:	0f 90       	pop	r0
    6eca:	0f 90       	pop	r0
    6ecc:	0f 90       	pop	r0
    6ece:	0f 90       	pop	r0
	}
	//USART_0_write(ReceivedOK);
	//USART_0_write(SYBTreturnedData);	
	//USART0_sendString("SYBT5_");
	strcat(savedBatteryString,SYBT5highTemperature);						//Next is GetSYBT5Temperature
    6ed0:	be 01       	movw	r22, r28
    6ed2:	6f 5f       	subi	r22, 0xFF	; 255
    6ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ed6:	85 ea       	ldi	r24, 0xA5	; 165
    6ed8:	93 e5       	ldi	r25, 0x53	; 83
    6eda:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <strcat>
	//USART0_sendString(SYBT5highTemperature);
	//USART0_sendString("\n");
	return ReceivedOK;
}
    6ede:	80 e0       	ldi	r24, 0x00	; 0
    6ee0:	2c 96       	adiw	r28, 0x0c	; 12
    6ee2:	cd bf       	out	0x3d, r28	; 61
    6ee4:	de bf       	out	0x3e, r29	; 62
    6ee6:	df 91       	pop	r29
    6ee8:	cf 91       	pop	r28
    6eea:	08 95       	ret

00006eec <GetSYBT5switchPosition>:
//----------------------------------------------------------------------------------------------------------------

bool GetSYBT5switchPosition(void){		//read directly from PIC. no addressing involved. 
    6eec:	cf 93       	push	r28
    6eee:	df 93       	push	r29
    6ef0:	cd b7       	in	r28, 0x3d	; 61
    6ef2:	de b7       	in	r29, 0x3e	; 62
    6ef4:	2c 97       	sbiw	r28, 0x0c	; 12
    6ef6:	cd bf       	out	0x3d, r28	; 61
    6ef8:	de bf       	out	0x3e, r29	; 62
	
	bool ReceivedOK;
	uint16_t temperature;
	char SYBT5switchPositionLocal[8];
	char SYBT5switchPositionApp[4];
	memset(SYBT5switchPositionLocal,0,8*sizeof(char));
    6efa:	fe 01       	movw	r30, r28
    6efc:	31 96       	adiw	r30, 0x01	; 1
    6efe:	88 e0       	ldi	r24, 0x08	; 8
    6f00:	df 01       	movw	r26, r30
    6f02:	1d 92       	st	X+, r1
    6f04:	8a 95       	dec	r24
    6f06:	e9 f7       	brne	.-6      	; 0x6f02 <GetSYBT5switchPosition+0x16>
	memset(SYBT5switchPositionApp,0,4*sizeof(char));
    6f08:	38 96       	adiw	r30, 0x08	; 8
    6f0a:	84 e0       	ldi	r24, 0x04	; 4
    6f0c:	df 01       	movw	r26, r30
    6f0e:	1d 92       	st	X+, r1
    6f10:	8a 95       	dec	r24
    6f12:	e9 f7       	brne	.-6      	; 0x6f0e <GetSYBT5switchPosition+0x22>
	
	if(GetDataFromSYBT(ReadSwitchPosition)){
    6f14:	8b e0       	ldi	r24, 0x0B	; 11
    6f16:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <GetDataFromSYBT>
    6f1a:	88 23       	and	r24, r24
    6f1c:	09 f4       	brne	.+2      	; 0x6f20 <GetSYBT5switchPosition+0x34>
    6f1e:	4b c0       	rjmp	.+150    	; 0x6fb6 <GetSYBT5switchPosition+0xca>
    6f20:	bf ef       	ldi	r27, 0xFF	; 255
    6f22:	26 e7       	ldi	r18, 0x76	; 118
    6f24:	81 e0       	ldi	r24, 0x01	; 1
    6f26:	b1 50       	subi	r27, 0x01	; 1
    6f28:	20 40       	sbci	r18, 0x00	; 0
    6f2a:	80 40       	sbci	r24, 0x00	; 0
    6f2c:	e1 f7       	brne	.-8      	; 0x6f26 <GetSYBT5switchPosition+0x3a>
    6f2e:	00 c0       	rjmp	.+0      	; 0x6f30 <GetSYBT5switchPosition+0x44>
    6f30:	00 00       	nop
		_delay_ms(CommDelay);
		if(SYBTreturnedData){
    6f32:	80 91 84 54 	lds	r24, 0x5484	; 0x805484 <SYBTreturnedData>
    6f36:	88 23       	and	r24, r24
    6f38:	f9 f0       	breq	.+62     	; 0x6f78 <GetSYBT5switchPosition+0x8c>
			//sprintf(SYBT5switchPosition,"SYBT5_SWI.ON\n",SYBTreturnedData);  //------------------this is the one that is causing problems
			sprintf(SYBT5switchPositionLocal,"SWI.ON\n",SYBTreturnedData);
    6f3a:	80 91 84 54 	lds	r24, 0x5484	; 0x805484 <SYBTreturnedData>
    6f3e:	1f 92       	push	r1
    6f40:	8f 93       	push	r24
    6f42:	81 ea       	ldi	r24, 0xA1	; 161
    6f44:	95 e4       	ldi	r25, 0x45	; 69
    6f46:	9f 93       	push	r25
    6f48:	8f 93       	push	r24
    6f4a:	ce 01       	movw	r24, r28
    6f4c:	01 96       	adiw	r24, 0x01	; 1
    6f4e:	9f 93       	push	r25
    6f50:	8f 93       	push	r24
    6f52:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
			sprintf(SYBT5switchPositionApp," ON,",SYBTreturnedData);
    6f56:	80 91 84 54 	lds	r24, 0x5484	; 0x805484 <SYBTreturnedData>
    6f5a:	1f 92       	push	r1
    6f5c:	8f 93       	push	r24
    6f5e:	89 ea       	ldi	r24, 0xA9	; 169
    6f60:	95 e4       	ldi	r25, 0x45	; 69
    6f62:	9f 93       	push	r25
    6f64:	8f 93       	push	r24
    6f66:	ce 01       	movw	r24, r28
    6f68:	09 96       	adiw	r24, 0x09	; 9
    6f6a:	9f 93       	push	r25
    6f6c:	8f 93       	push	r24
    6f6e:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    6f72:	cd bf       	out	0x3d, r28	; 61
    6f74:	de bf       	out	0x3e, r29	; 62
    6f76:	31 c0       	rjmp	.+98     	; 0x6fda <GetSYBT5switchPosition+0xee>
		}
		else{
			//sprintf(SYBT5switchPosition,"SYBT5_SWIOFF\n",SYBTreturnedData);
			sprintf(SYBT5switchPositionLocal,"SWIOFF\n",SYBTreturnedData);		//must be 3 characters. Either "OFF" or "ON."
    6f78:	80 91 84 54 	lds	r24, 0x5484	; 0x805484 <SYBTreturnedData>
    6f7c:	1f 92       	push	r1
    6f7e:	8f 93       	push	r24
    6f80:	8e ea       	ldi	r24, 0xAE	; 174
    6f82:	95 e4       	ldi	r25, 0x45	; 69
    6f84:	9f 93       	push	r25
    6f86:	8f 93       	push	r24
    6f88:	ce 01       	movw	r24, r28
    6f8a:	01 96       	adiw	r24, 0x01	; 1
    6f8c:	9f 93       	push	r25
    6f8e:	8f 93       	push	r24
    6f90:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
			sprintf(SYBT5switchPositionApp,"OFF,",SYBTreturnedData);
    6f94:	80 91 84 54 	lds	r24, 0x5484	; 0x805484 <SYBTreturnedData>
    6f98:	1f 92       	push	r1
    6f9a:	8f 93       	push	r24
    6f9c:	86 eb       	ldi	r24, 0xB6	; 182
    6f9e:	95 e4       	ldi	r25, 0x45	; 69
    6fa0:	9f 93       	push	r25
    6fa2:	8f 93       	push	r24
    6fa4:	ce 01       	movw	r24, r28
    6fa6:	09 96       	adiw	r24, 0x09	; 9
    6fa8:	9f 93       	push	r25
    6faa:	8f 93       	push	r24
    6fac:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    6fb0:	cd bf       	out	0x3d, r28	; 61
    6fb2:	de bf       	out	0x3e, r29	; 62
    6fb4:	12 c0       	rjmp	.+36     	; 0x6fda <GetSYBT5switchPosition+0xee>
		}
	}
	else{
		sprintf(SYBT5switchPositionLocal,"SWI---\n");		//must be 3 characters. Need to fix ATTINY program to work with this.
    6fb6:	88 e0       	ldi	r24, 0x08	; 8
    6fb8:	eb eb       	ldi	r30, 0xBB	; 187
    6fba:	f5 e4       	ldi	r31, 0x45	; 69
    6fbc:	de 01       	movw	r26, r28
    6fbe:	11 96       	adiw	r26, 0x01	; 1
    6fc0:	01 90       	ld	r0, Z+
    6fc2:	0d 92       	st	X+, r0
    6fc4:	8a 95       	dec	r24
    6fc6:	e1 f7       	brne	.-8      	; 0x6fc0 <GetSYBT5switchPosition+0xd4>
		sprintf(SYBT5switchPositionApp,"***,");
    6fc8:	85 e0       	ldi	r24, 0x05	; 5
    6fca:	e4 e9       	ldi	r30, 0x94	; 148
    6fcc:	f5 e4       	ldi	r31, 0x45	; 69
    6fce:	de 01       	movw	r26, r28
    6fd0:	19 96       	adiw	r26, 0x09	; 9
    6fd2:	01 90       	ld	r0, Z+
    6fd4:	0d 92       	st	X+, r0
    6fd6:	8a 95       	dec	r24
    6fd8:	e1 f7       	brne	.-8      	; 0x6fd2 <GetSYBT5switchPosition+0xe6>
	}
	
	
	
	strcat(savedBatteryString,SYBT5switchPositionApp);						//Next is Cal Factor
    6fda:	be 01       	movw	r22, r28
    6fdc:	67 5f       	subi	r22, 0xF7	; 247
    6fde:	7f 4f       	sbci	r23, 0xFF	; 255
    6fe0:	85 ea       	ldi	r24, 0xA5	; 165
    6fe2:	93 e5       	ldi	r25, 0x53	; 83
    6fe4:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <strcat>
	//USART3_sendString(SYBT5switchPositionLocal);
	//USART0_sendString(SYBT5switchPosition);
	//USART3_sendString(SYBT5switchPosition);
	
	return ReceivedOK;
}
    6fe8:	80 e0       	ldi	r24, 0x00	; 0
    6fea:	2c 96       	adiw	r28, 0x0c	; 12
    6fec:	cd bf       	out	0x3d, r28	; 61
    6fee:	de bf       	out	0x3e, r29	; 62
    6ff0:	df 91       	pop	r29
    6ff2:	cf 91       	pop	r28
    6ff4:	08 95       	ret

00006ff6 <GetSYBT5calFactor>:
//----------------------------------------------------------------------------------------------------------------
bool GetSYBT5calFactor(void){		//Go directly to address for cal factor.
    6ff6:	1f 93       	push	r17
    6ff8:	cf 93       	push	r28
    6ffa:	df 93       	push	r29
    6ffc:	cd b7       	in	r28, 0x3d	; 61
    6ffe:	de b7       	in	r29, 0x3e	; 62
    7000:	2e 97       	sbiw	r28, 0x0e	; 14
    7002:	cd bf       	out	0x3d, r28	; 61
    7004:	de bf       	out	0x3e, r29	; 62
	
	bool ReceivedOK;
	uint16_t temperature;
	char calFactorLocal[10];
	char calFactorApp[4];
	memset(calFactorLocal,0,10*sizeof(char));
    7006:	fe 01       	movw	r30, r28
    7008:	31 96       	adiw	r30, 0x01	; 1
    700a:	8a e0       	ldi	r24, 0x0A	; 10
    700c:	df 01       	movw	r26, r30
    700e:	1d 92       	st	X+, r1
    7010:	8a 95       	dec	r24
    7012:	e9 f7       	brne	.-6      	; 0x700e <GetSYBT5calFactor+0x18>
	memset(calFactorApp,0,4*sizeof(char));
    7014:	3a 96       	adiw	r30, 0x0a	; 10
    7016:	84 e0       	ldi	r24, 0x04	; 4
    7018:	df 01       	movw	r26, r30
    701a:	1d 92       	st	X+, r1
    701c:	8a 95       	dec	r24
    701e:	e9 f7       	brne	.-6      	; 0x701a <GetSYBT5calFactor+0x24>
	ReceivedOK = GoToAddress(GotoCalFactorAddress);
    7020:	87 e6       	ldi	r24, 0x67	; 103
    7022:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <GoToAddress>
    7026:	18 2f       	mov	r17, r24
    7028:	bf ef       	ldi	r27, 0xFF	; 255
    702a:	26 e7       	ldi	r18, 0x76	; 118
    702c:	81 e0       	ldi	r24, 0x01	; 1
    702e:	b1 50       	subi	r27, 0x01	; 1
    7030:	20 40       	sbci	r18, 0x00	; 0
    7032:	80 40       	sbci	r24, 0x00	; 0
    7034:	e1 f7       	brne	.-8      	; 0x702e <GetSYBT5calFactor+0x38>
    7036:	00 c0       	rjmp	.+0      	; 0x7038 <GetSYBT5calFactor+0x42>
    7038:	00 00       	nop
	//USART_0_write(ReceivedOK);
	//USART_0_write(SYBTreturnedData);
	_delay_ms(CommDelay);
	if(GetDataFromSYBT(ReadEEPROM)){
    703a:	87 e0       	ldi	r24, 0x07	; 7
    703c:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <GetDataFromSYBT>
    7040:	88 23       	and	r24, r24
    7042:	59 f1       	breq	.+86     	; 0x709a <GetSYBT5calFactor+0xa4>
    7044:	9f ef       	ldi	r25, 0xFF	; 255
    7046:	a6 e7       	ldi	r26, 0x76	; 118
    7048:	b1 e0       	ldi	r27, 0x01	; 1
    704a:	91 50       	subi	r25, 0x01	; 1
    704c:	a0 40       	sbci	r26, 0x00	; 0
    704e:	b0 40       	sbci	r27, 0x00	; 0
    7050:	e1 f7       	brne	.-8      	; 0x704a <GetSYBT5calFactor+0x54>
    7052:	00 c0       	rjmp	.+0      	; 0x7054 <GetSYBT5calFactor+0x5e>
    7054:	00 00       	nop
		_delay_ms(CommDelay);
		sprintf(calFactorLocal,"RES%03i\n",SYBTreturnedData);				//
    7056:	80 91 84 54 	lds	r24, 0x5484	; 0x805484 <SYBTreturnedData>
    705a:	1f 92       	push	r1
    705c:	8f 93       	push	r24
    705e:	83 ec       	ldi	r24, 0xC3	; 195
    7060:	95 e4       	ldi	r25, 0x45	; 69
    7062:	9f 93       	push	r25
    7064:	8f 93       	push	r24
    7066:	ce 01       	movw	r24, r28
    7068:	01 96       	adiw	r24, 0x01	; 1
    706a:	9f 93       	push	r25
    706c:	8f 93       	push	r24
    706e:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
		calFactorLocal[3] = calFactorLocal[3] - AddDecimalToASCII;
    7072:	8c 81       	ldd	r24, Y+4	; 0x04
    7074:	8f 50       	subi	r24, 0x0F	; 15
    7076:	8c 83       	std	Y+4, r24	; 0x04
		//sprintf(calFactor,"SYBT5_CAL: %03i\n",SYBTreturnedData);			
		sprintf(calFactorApp,"%03i,",SYBTreturnedData);						//to send to app
    7078:	80 91 84 54 	lds	r24, 0x5484	; 0x805484 <SYBTreturnedData>
    707c:	1f 92       	push	r1
    707e:	8f 93       	push	r24
    7080:	8e e8       	ldi	r24, 0x8E	; 142
    7082:	95 e4       	ldi	r25, 0x45	; 69
    7084:	9f 93       	push	r25
    7086:	8f 93       	push	r24
    7088:	ce 01       	movw	r24, r28
    708a:	0b 96       	adiw	r24, 0x0b	; 11
    708c:	9f 93       	push	r25
    708e:	8f 93       	push	r24
    7090:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    7094:	cd bf       	out	0x3d, r28	; 61
    7096:	de bf       	out	0x3e, r29	; 62
    7098:	12 c0       	rjmp	.+36     	; 0x70be <GetSYBT5calFactor+0xc8>
		}
		else{
		sprintf(calFactorLocal,"RES***\n");				//
    709a:	88 e0       	ldi	r24, 0x08	; 8
    709c:	ec ec       	ldi	r30, 0xCC	; 204
    709e:	f5 e4       	ldi	r31, 0x45	; 69
    70a0:	de 01       	movw	r26, r28
    70a2:	11 96       	adiw	r26, 0x01	; 1
    70a4:	01 90       	ld	r0, Z+
    70a6:	0d 92       	st	X+, r0
    70a8:	8a 95       	dec	r24
    70aa:	e1 f7       	brne	.-8      	; 0x70a4 <GetSYBT5calFactor+0xae>
		//sprintf(calFactor,"SYBT5_CAL: %03i\n",SYBTreturnedData);			
		sprintf(calFactorApp,"***,");										//to send to app			
    70ac:	85 e0       	ldi	r24, 0x05	; 5
    70ae:	e4 e9       	ldi	r30, 0x94	; 148
    70b0:	f5 e4       	ldi	r31, 0x45	; 69
    70b2:	de 01       	movw	r26, r28
    70b4:	1b 96       	adiw	r26, 0x0b	; 11
    70b6:	01 90       	ld	r0, Z+
    70b8:	0d 92       	st	X+, r0
    70ba:	8a 95       	dec	r24
    70bc:	e1 f7       	brne	.-8      	; 0x70b6 <GetSYBT5calFactor+0xc0>
		}	
	USART3_sendString(calFactorLocal);	
    70be:	ce 01       	movw	r24, r28
    70c0:	01 96       	adiw	r24, 0x01	; 1
    70c2:	0e 94 4c 1a 	call	0x3498	; 0x3498 <USART3_sendString>
	strcat(savedBatteryString,calFactorApp);								//Next is GetSYBT5highTemperature
    70c6:	be 01       	movw	r22, r28
    70c8:	65 5f       	subi	r22, 0xF5	; 245
    70ca:	7f 4f       	sbci	r23, 0xFF	; 255
    70cc:	85 ea       	ldi	r24, 0xA5	; 165
    70ce:	93 e5       	ldi	r25, 0x53	; 83
    70d0:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <strcat>
	//USART0_sendString(calFactorLocal);	
	wdt_reset();
    70d4:	a8 95       	wdr
	return ReceivedOK;
}
    70d6:	81 2f       	mov	r24, r17
    70d8:	2e 96       	adiw	r28, 0x0e	; 14
    70da:	cd bf       	out	0x3d, r28	; 61
    70dc:	de bf       	out	0x3e, r29	; 62
    70de:	df 91       	pop	r29
    70e0:	cf 91       	pop	r28
    70e2:	1f 91       	pop	r17
    70e4:	08 95       	ret

000070e6 <GetSYBT5shuntValue>:
//----------------------------------------------------------------------------------------------------------------
bool GetSYBT5shuntValue(void){   // need to add shunt conversion formula
    70e6:	0f 93       	push	r16
    70e8:	1f 93       	push	r17
    70ea:	cf 93       	push	r28
    70ec:	df 93       	push	r29
    70ee:	cd b7       	in	r28, 0x3d	; 61
    70f0:	de b7       	in	r29, 0x3e	; 62
    70f2:	6e 97       	sbiw	r28, 0x1e	; 30
    70f4:	cd bf       	out	0x3d, r28	; 61
    70f6:	de bf       	out	0x3e, r29	; 62
	bool ReceivedOK;
	uint16_t temperature;
	uint8_t ShuntRaw[2];
	uint8_t ShuntValueString[30];
	uint8_t ShuntValue;
	memset(ShuntValueString,0,20*sizeof(uint8_t));
    70f8:	fe 01       	movw	r30, r28
    70fa:	31 96       	adiw	r30, 0x01	; 1
    70fc:	84 e1       	ldi	r24, 0x14	; 20
    70fe:	df 01       	movw	r26, r30
    7100:	1d 92       	st	X+, r1
    7102:	8a 95       	dec	r24
    7104:	e9 f7       	brne	.-6      	; 0x7100 <GetSYBT5shuntValue+0x1a>
    7106:	bf ef       	ldi	r27, 0xFF	; 255
    7108:	26 e7       	ldi	r18, 0x76	; 118
    710a:	81 e0       	ldi	r24, 0x01	; 1
    710c:	b1 50       	subi	r27, 0x01	; 1
    710e:	20 40       	sbci	r18, 0x00	; 0
    7110:	80 40       	sbci	r24, 0x00	; 0
    7112:	e1 f7       	brne	.-8      	; 0x710c <GetSYBT5shuntValue+0x26>
    7114:	00 c0       	rjmp	.+0      	; 0x7116 <GetSYBT5shuntValue+0x30>
    7116:	00 00       	nop
	_delay_ms(CommDelay);
	ReceivedOK = GoToAddress(GotoShuntValLoAddress);				//GotoShuntValLoAddress
    7118:	82 e0       	ldi	r24, 0x02	; 2
    711a:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <GoToAddress>
    711e:	18 2f       	mov	r17, r24
    7120:	9f ef       	ldi	r25, 0xFF	; 255
    7122:	a6 e7       	ldi	r26, 0x76	; 118
    7124:	b1 e0       	ldi	r27, 0x01	; 1
    7126:	91 50       	subi	r25, 0x01	; 1
    7128:	a0 40       	sbci	r26, 0x00	; 0
    712a:	b0 40       	sbci	r27, 0x00	; 0
    712c:	e1 f7       	brne	.-8      	; 0x7126 <GetSYBT5shuntValue+0x40>
    712e:	00 c0       	rjmp	.+0      	; 0x7130 <GetSYBT5shuntValue+0x4a>
    7130:	00 00       	nop
	//USART_0_write(ReceivedOK+1);
	//USART_0_write(SYBTreturnedData);
	_delay_ms(CommDelay);
	if(GetDataFromSYBT(ReadEEPROM)){
    7132:	87 e0       	ldi	r24, 0x07	; 7
    7134:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <GetDataFromSYBT>
    7138:	88 23       	and	r24, r24
    713a:	c9 f1       	breq	.+114    	; 0x71ae <GetSYBT5shuntValue+0xc8>
		//USART_0_write(ReceivedOK+2);
		//USART_0_write(SYBTreturnedData);
		ShuntRaw[0] = SYBTreturnedData;
    713c:	00 91 84 54 	lds	r16, 0x5484	; 0x805484 <SYBTreturnedData>
    7140:	2f ef       	ldi	r18, 0xFF	; 255
    7142:	86 e7       	ldi	r24, 0x76	; 118
    7144:	91 e0       	ldi	r25, 0x01	; 1
    7146:	21 50       	subi	r18, 0x01	; 1
    7148:	80 40       	sbci	r24, 0x00	; 0
    714a:	90 40       	sbci	r25, 0x00	; 0
    714c:	e1 f7       	brne	.-8      	; 0x7146 <GetSYBT5shuntValue+0x60>
    714e:	00 c0       	rjmp	.+0      	; 0x7150 <GetSYBT5shuntValue+0x6a>
    7150:	00 00       	nop
		_delay_ms(CommDelay);
		ReceivedOK = GetDataFromSYBT(ReadEEPROM);
    7152:	87 e0       	ldi	r24, 0x07	; 7
    7154:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <GetDataFromSYBT>
    7158:	18 2f       	mov	r17, r24
		//USART_0_write(ReceivedOK+3);
		//USART_0_write(SYBTreturnedData);
		ShuntRaw[1] = SYBTreturnedData;
    715a:	80 91 84 54 	lds	r24, 0x5484	; 0x805484 <SYBTreturnedData>
		ShuntValue = ConvertShuntBitsToValue(ShuntRaw[1],ShuntRaw[0]);
    715e:	60 2f       	mov	r22, r16
    7160:	0e 94 09 35 	call	0x6a12	; 0x6a12 <ConvertShuntBitsToValue>
		//sprintf(ShuntValueString,"SYBT5  Sh:%i",ShuntValue);
		//sprintf(ShuntValueString,"%03i,%3d,V%3d,%d sybend\n\r",ShuntValue,twentyfourvoltsupply,SYBT.LXvoltage,TypeOfBatteryConnected);
		sprintf(ShuntValueString,"%03i,%3d,V%3d,%d,%d sybend\n\r",ShuntValue,twentyfourvoltsupply,SYBT.LXvoltage,TypeOfBatteryConnected,SixVoltBattery);	
    7164:	90 91 86 54 	lds	r25, 0x5486	; 0x805486 <SixVoltBattery+0x1>
    7168:	9f 93       	push	r25
    716a:	90 91 85 54 	lds	r25, 0x5485	; 0x805485 <SixVoltBattery>
    716e:	9f 93       	push	r25
    7170:	90 91 4d 48 	lds	r25, 0x484D	; 0x80484d <TypeOfBatteryConnected>
    7174:	1f 92       	push	r1
    7176:	9f 93       	push	r25
    7178:	e7 e4       	ldi	r30, 0x47	; 71
    717a:	f3 e5       	ldi	r31, 0x53	; 83
    717c:	91 8d       	ldd	r25, Z+25	; 0x19
    717e:	9f 93       	push	r25
    7180:	90 8d       	ldd	r25, Z+24	; 0x18
    7182:	9f 93       	push	r25
    7184:	90 91 fd 53 	lds	r25, 0x53FD	; 0x8053fd <twentyfourvoltsupply+0x1>
    7188:	9f 93       	push	r25
    718a:	90 91 fc 53 	lds	r25, 0x53FC	; 0x8053fc <twentyfourvoltsupply>
    718e:	9f 93       	push	r25
    7190:	1f 92       	push	r1
    7192:	8f 93       	push	r24
    7194:	84 ed       	ldi	r24, 0xD4	; 212
    7196:	95 e4       	ldi	r25, 0x45	; 69
    7198:	9f 93       	push	r25
    719a:	8f 93       	push	r24
    719c:	ce 01       	movw	r24, r28
    719e:	01 96       	adiw	r24, 0x01	; 1
    71a0:	9f 93       	push	r25
    71a2:	8f 93       	push	r24
    71a4:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    71a8:	cd bf       	out	0x3d, r28	; 61
    71aa:	de bf       	out	0x3e, r29	; 62
    71ac:	22 c0       	rjmp	.+68     	; 0x71f2 <GetSYBT5shuntValue+0x10c>
	}
	else{
		//sprintf(ShuntValueString,"***,%3d,V%3d,%d sybend\n\r",twentyfourvoltsupply,SYBT.LXvoltage,TypeOfBatteryConnected);
		sprintf(ShuntValueString,"***,%3d,V%3d,%d,%d sybend\n\r",twentyfourvoltsupply,SYBT.LXvoltage,TypeOfBatteryConnected,SixVoltBattery);	
    71ae:	80 91 86 54 	lds	r24, 0x5486	; 0x805486 <SixVoltBattery+0x1>
    71b2:	8f 93       	push	r24
    71b4:	80 91 85 54 	lds	r24, 0x5485	; 0x805485 <SixVoltBattery>
    71b8:	8f 93       	push	r24
    71ba:	80 91 4d 48 	lds	r24, 0x484D	; 0x80484d <TypeOfBatteryConnected>
    71be:	1f 92       	push	r1
    71c0:	8f 93       	push	r24
    71c2:	e7 e4       	ldi	r30, 0x47	; 71
    71c4:	f3 e5       	ldi	r31, 0x53	; 83
    71c6:	81 8d       	ldd	r24, Z+25	; 0x19
    71c8:	8f 93       	push	r24
    71ca:	80 8d       	ldd	r24, Z+24	; 0x18
    71cc:	8f 93       	push	r24
    71ce:	80 91 fd 53 	lds	r24, 0x53FD	; 0x8053fd <twentyfourvoltsupply+0x1>
    71d2:	8f 93       	push	r24
    71d4:	80 91 fc 53 	lds	r24, 0x53FC	; 0x8053fc <twentyfourvoltsupply>
    71d8:	8f 93       	push	r24
    71da:	81 ef       	ldi	r24, 0xF1	; 241
    71dc:	95 e4       	ldi	r25, 0x45	; 69
    71de:	9f 93       	push	r25
    71e0:	8f 93       	push	r24
    71e2:	ce 01       	movw	r24, r28
    71e4:	01 96       	adiw	r24, 0x01	; 1
    71e6:	9f 93       	push	r25
    71e8:	8f 93       	push	r24
    71ea:	0e 94 66 3d 	call	0x7acc	; 0x7acc <sprintf>
    71ee:	cd bf       	out	0x3d, r28	; 61
    71f0:	de bf       	out	0x3e, r29	; 62
	}
	
	//sprintf(savedBatteryString,"sybtvRubia,051224,GL2024012001,SWION,CAL099,HTMP055,TMP081,Sh198,sybend\n\r");
	strcat(savedBatteryString,ShuntValueString);						//Last in line, so a carriage return is added.
    71f2:	be 01       	movw	r22, r28
    71f4:	6f 5f       	subi	r22, 0xFF	; 255
    71f6:	7f 4f       	sbci	r23, 0xFF	; 255
    71f8:	85 ea       	ldi	r24, 0xA5	; 165
    71fa:	93 e5       	ldi	r25, 0x53	; 83
    71fc:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <strcat>
	//USART0_sendHEX(ShuntRaw,2);
	//USART0_sendString(ShuntValueString);
	//USART0_sendString("  \n");
	return ReceivedOK;
}
    7200:	81 2f       	mov	r24, r17
    7202:	6e 96       	adiw	r28, 0x1e	; 30
    7204:	cd bf       	out	0x3d, r28	; 61
    7206:	de bf       	out	0x3e, r29	; 62
    7208:	df 91       	pop	r29
    720a:	cf 91       	pop	r28
    720c:	1f 91       	pop	r17
    720e:	0f 91       	pop	r16
    7210:	08 95       	ret

00007212 <IsConnectedToSYBT5>:
}
//------------------------------------------------------------------------------------------------------------------------------------
bool IsConnectedToSYBT5(void){										// Modified for combined program.
	static uint16_t SYBT5connectedDelay;
	
	if(!IsSYBT5orE3SadapterConnected()){								//HIGH it is an SYBTU battery LOW is SYBT5	// digital method.		However, analog could do two things.  Sense SYBT5 and E3S  by looking at voltage levels.				
    7212:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <IsSYBT5orE3SadapterConnected>
    7216:	81 11       	cpse	r24, r1
    7218:	29 c0       	rjmp	.+82     	; 0x726c <IsConnectedToSYBT5+0x5a>
		if(SYBT5connectedDelay >5000){
    721a:	20 91 4b 48 	lds	r18, 0x484B	; 0x80484b <SYBT5connectedDelay.6249>
    721e:	30 91 4c 48 	lds	r19, 0x484C	; 0x80484c <SYBT5connectedDelay.6249+0x1>
    7222:	29 38       	cpi	r18, 0x89	; 137
    7224:	33 41       	sbci	r19, 0x13	; 19
    7226:	a0 f0       	brcs	.+40     	; 0x7250 <IsConnectedToSYBT5+0x3e>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    7228:	89 b1       	in	r24, 0x09	; 9
    722a:	8f 7b       	andi	r24, 0xBF	; 191
    722c:	89 b9       	out	0x09, r24	; 9
			LED1_set_level(false);
			if(!SYBT5_RLY_get_level()){								// I'm using this as a one shot. 
    722e:	57 99       	sbic	0x0a, 7	; 10
    7230:	0a c0       	rjmp	.+20     	; 0x7246 <IsConnectedToSYBT5+0x34>
				USART0_sendString("LX_CONNECTED\n");					//  "\r" not needed here because data follows this program path.
    7232:	8d e0       	ldi	r24, 0x0D	; 13
    7234:	96 e4       	ldi	r25, 0x46	; 70
    7236:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    723a:	81 b1       	in	r24, 0x01	; 1
    723c:	8f 7d       	andi	r24, 0xDF	; 223
    723e:	81 b9       	out	0x01, r24	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    7240:	81 b1       	in	r24, 0x01	; 1
    7242:	80 61       	ori	r24, 0x10	; 16
    7244:	81 b9       	out	0x01, r24	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    7246:	89 b1       	in	r24, 0x09	; 9
    7248:	80 68       	ori	r24, 0x80	; 128
    724a:	89 b9       	out	0x09, r24	; 9
				ReverseMarchingAnts_set_level(false);
				MarchingAnts_set_level(true);
				}			
			SYBT5_RLY_set_level(true);
			
			return true;
    724c:	81 e0       	ldi	r24, 0x01	; 1
    724e:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    7250:	91 b1       	in	r25, 0x01	; 1
    7252:	90 62       	ori	r25, 0x20	; 32
    7254:	91 b9       	out	0x01, r25	; 1
		}
		else{
			ReverseMarchingAnts_set_level(true);
			SYBT5connectedDelay++;							// && SYBT5connectedDelay <100)		
    7256:	20 91 4b 48 	lds	r18, 0x484B	; 0x80484b <SYBT5connectedDelay.6249>
    725a:	30 91 4c 48 	lds	r19, 0x484C	; 0x80484c <SYBT5connectedDelay.6249+0x1>
    725e:	2f 5f       	subi	r18, 0xFF	; 255
    7260:	3f 4f       	sbci	r19, 0xFF	; 255
    7262:	20 93 4b 48 	sts	0x484B, r18	; 0x80484b <SYBT5connectedDelay.6249>
    7266:	30 93 4c 48 	sts	0x484C, r19	; 0x80484c <SYBT5connectedDelay.6249+0x1>
			return false;	
    726a:	08 95       	ret
			}
	}
	else{
		SYBT5connectedDelay = 0;
    726c:	10 92 4b 48 	sts	0x484B, r1	; 0x80484b <SYBT5connectedDelay.6249>
    7270:	10 92 4c 48 	sts	0x484C, r1	; 0x80484c <SYBT5connectedDelay.6249+0x1>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    7274:	89 b1       	in	r24, 0x09	; 9
    7276:	8f 77       	andi	r24, 0x7F	; 127
    7278:	89 b9       	out	0x09, r24	; 9
		//USART0_sendString("LXnotCONNECT\n");
		SYBT5_RLY_set_level(false);
		return false;
    727a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    727c:	08 95       	ret

0000727e <LookForCommands>:
	else{
		return false;
	}
}
//------------------------------------------------------------------------------------------------------------------------------------
bool LookForCommands(void){
    727e:	cf 93       	push	r28
	if (USART_0_is_rx_ready()){					//listens to Bluetooth module
    7280:	0e 94 bb 34 	call	0x6976	; 0x6976 <USART_0_is_rx_ready>
    7284:	c8 2f       	mov	r28, r24
    7286:	81 11       	cpse	r24, r1
		//		USART_0_enable_rx();
		USART0_getString();
    7288:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <USART0_getString>
		return true;
	}
	return false;
}
    728c:	8c 2f       	mov	r24, r28
    728e:	cf 91       	pop	r28
    7290:	08 95       	ret

00007292 <LookForAnyChanges>:
		return false;
	}
}
//------------------------------------------------------------------------------------------------------
bool LookForAnyChanges(void){						//If a new command or the SYBT5 is unplugged, then stop.
	if(!LookForCommands() && IsConnectedToSYBT5()){
    7292:	0e 94 3f 39 	call	0x727e	; 0x727e <LookForCommands>
    7296:	81 11       	cpse	r24, r1
    7298:	03 c0       	rjmp	.+6      	; 0x72a0 <LookForAnyChanges+0xe>
    729a:	0e 94 09 39 	call	0x7212	; 0x7212 <IsConnectedToSYBT5>
    729e:	08 95       	ret
		return true;
	}
	else{
		return false;
    72a0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    72a2:	08 95       	ret

000072a4 <FastSYBT5query>:
	//USART0_sendString(ShuntValueString);
	//USART0_sendString("  \n");
	return ReceivedOK;
}
//------------------------------------------------------------------------------------------------------------------------------------
bool FastSYBT5query(void){
    72a4:	cf 93       	push	r28
	if(LookForAnyChanges()){						//A good fast query. All data is compiled in a single string that is sent at the end.
    72a6:	0e 94 49 39 	call	0x7292	; 0x7292 <LookForAnyChanges>
    72aa:	c8 2f       	mov	r28, r24
    72ac:	88 23       	and	r24, r24
    72ae:	09 f4       	brne	.+2      	; 0x72b2 <FastSYBT5query+0xe>
    72b0:	60 c0       	rjmp	.+192    	; 0x7372 <FastSYBT5query+0xce>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
    72b2:	8d b1       	in	r24, 0x0d	; 13
    72b4:	80 68       	ori	r24, 0x80	; 128
    72b6:	8d b9       	out	0x0d, r24	; 13
		//ATTINY_PB1_set_level(true);
		//USART0_sendString("StartLX\n\r");
		LED4_set_level(true);
		//YellowLED_set_level(false);
		if(!IsConnectedToSYBT5()){return false;}
    72b8:	0e 94 09 39 	call	0x7212	; 0x7212 <IsConnectedToSYBT5>
    72bc:	c8 2f       	mov	r28, r24
    72be:	88 23       	and	r24, r24
    72c0:	09 f4       	brne	.+2      	; 0x72c4 <FastSYBT5query+0x20>
    72c2:	57 c0       	rjmp	.+174    	; 0x7372 <FastSYBT5query+0xce>
		GetSYBTname();								//Name
    72c4:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <GetSYBTname>
    72c8:	8d b1       	in	r24, 0x0d	; 13
    72ca:	80 68       	ori	r24, 0x80	; 128
    72cc:	8d b9       	out	0x0d, r24	; 13
		//USART0_sendString("Name_LX\n\r");
		//YellowLED_set_level(true);
		LED4_set_level(true);
		if(!IsConnectedToSYBT5()){return false;}	
    72ce:	0e 94 09 39 	call	0x7212	; 0x7212 <IsConnectedToSYBT5>
    72d2:	c8 2f       	mov	r28, r24
    72d4:	88 23       	and	r24, r24
    72d6:	09 f4       	brne	.+2      	; 0x72da <FastSYBT5query+0x36>
    72d8:	4c c0       	rjmp	.+152    	; 0x7372 <FastSYBT5query+0xce>
		GetSYBTdate();								//Date
    72da:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <GetSYBTdate>
    72de:	8d b1       	in	r24, 0x0d	; 13
    72e0:	80 68       	ori	r24, 0x80	; 128
    72e2:	8d b9       	out	0x0d, r24	; 13
		LED4_set_level(true);
		//USART0_sendString("Date_LX\n\r");	
		//YellowLED_set_level(false);
		if(!IsConnectedToSYBT5()){return false;}
    72e4:	0e 94 09 39 	call	0x7212	; 0x7212 <IsConnectedToSYBT5>
    72e8:	c8 2f       	mov	r28, r24
    72ea:	88 23       	and	r24, r24
    72ec:	09 f4       	brne	.+2      	; 0x72f0 <FastSYBT5query+0x4c>
    72ee:	41 c0       	rjmp	.+130    	; 0x7372 <FastSYBT5query+0xce>
		GetSYBT5serialNumber();						//Serial Number
    72f0:	0e 94 82 35 	call	0x6b04	; 0x6b04 <GetSYBT5serialNumber>
    72f4:	8d b1       	in	r24, 0x0d	; 13
    72f6:	80 68       	ori	r24, 0x80	; 128
    72f8:	8d b9       	out	0x0d, r24	; 13
		LED4_set_level(true);
		//USART0_sendString("Serial_LX\n\r");
		//YellowLED_set_level(true);
		if(!IsConnectedToSYBT5()){return false;}
    72fa:	0e 94 09 39 	call	0x7212	; 0x7212 <IsConnectedToSYBT5>
    72fe:	c8 2f       	mov	r28, r24
    7300:	88 23       	and	r24, r24
    7302:	b9 f1       	breq	.+110    	; 0x7372 <FastSYBT5query+0xce>
		GetSYBT5switchPosition();					//Switch Position
    7304:	0e 94 76 37 	call	0x6eec	; 0x6eec <GetSYBT5switchPosition>
    7308:	8d b1       	in	r24, 0x0d	; 13
    730a:	80 68       	ori	r24, 0x80	; 128
    730c:	8d b9       	out	0x0d, r24	; 13
    730e:	8d b1       	in	r24, 0x0d	; 13
    7310:	80 68       	ori	r24, 0x80	; 128
    7312:	8d b9       	out	0x0d, r24	; 13
		LED4_set_level(true);
		//BlueLED_toggle_level();
		LED4_set_level(true);
		if(!IsConnectedToSYBT5()){return false;}
    7314:	0e 94 09 39 	call	0x7212	; 0x7212 <IsConnectedToSYBT5>
    7318:	c8 2f       	mov	r28, r24
    731a:	88 23       	and	r24, r24
    731c:	51 f1       	breq	.+84     	; 0x7372 <FastSYBT5query+0xce>
		GetSYBT5calFactor();						//CalFactor
    731e:	0e 94 fb 37 	call	0x6ff6	; 0x6ff6 <GetSYBT5calFactor>
    7322:	8d b1       	in	r24, 0x0d	; 13
    7324:	80 68       	ori	r24, 0x80	; 128
    7326:	8d b9       	out	0x0d, r24	; 13
		LED4_set_level(true);
		if(!IsConnectedToSYBT5()){return false;}
    7328:	0e 94 09 39 	call	0x7212	; 0x7212 <IsConnectedToSYBT5>
    732c:	c8 2f       	mov	r28, r24
    732e:	88 23       	and	r24, r24
    7330:	01 f1       	breq	.+64     	; 0x7372 <FastSYBT5query+0xce>
		GetSYBT5highTemperature();
    7332:	0e 94 0d 37 	call	0x6e1a	; 0x6e1a <GetSYBT5highTemperature>
    7336:	8d b1       	in	r24, 0x0d	; 13
    7338:	80 68       	ori	r24, 0x80	; 128
    733a:	8d b9       	out	0x0d, r24	; 13
		LED4_set_level(true);
		if(!IsConnectedToSYBT5()){return false;}
    733c:	0e 94 09 39 	call	0x7212	; 0x7212 <IsConnectedToSYBT5>
    7340:	c8 2f       	mov	r28, r24
    7342:	88 23       	and	r24, r24
    7344:	b1 f0       	breq	.+44     	; 0x7372 <FastSYBT5query+0xce>
		GetSYBT5emperature();						//Temperature  -         -----   string was too small at 8 and corrupting other strings
    7346:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <GetSYBT5emperature>
    734a:	8d b1       	in	r24, 0x0d	; 13
    734c:	80 68       	ori	r24, 0x80	; 128
    734e:	8d b9       	out	0x0d, r24	; 13
    7350:	8d b1       	in	r24, 0x0d	; 13
    7352:	80 68       	ori	r24, 0x80	; 128
    7354:	8d b9       	out	0x0d, r24	; 13
		LED4_set_level(true);
		//BlueLED_toggle_level();
		LED4_set_level(true);
		if(!IsConnectedToSYBT5()){return false;}
    7356:	0e 94 09 39 	call	0x7212	; 0x7212 <IsConnectedToSYBT5>
    735a:	c8 2f       	mov	r28, r24
    735c:	88 23       	and	r24, r24
    735e:	49 f0       	breq	.+18     	; 0x7372 <FastSYBT5query+0xce>
		GetSYBT5shuntValue();						//Shunt Value. For some reason shunt needs to follow temperature for temperature to not corrupt things.
    7360:	0e 94 73 38 	call	0x70e6	; 0x70e6 <GetSYBT5shuntValue>
		
		USART0_sendString(savedBatteryString);		//String looks like this:  SYBT5,MM/DD/YY,SERIALNUMBER,SWI.ON,CAL099,HTMP055,TMP084,SH198   62 characters
    7364:	85 ea       	ldi	r24, 0xA5	; 165
    7366:	93 e5       	ldi	r25, 0x53	; 83
    7368:	0e 94 2d 1a 	call	0x345a	; 0x345a <USART0_sendString>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    736c:	81 b1       	in	r24, 0x01	; 1
    736e:	8f 7e       	andi	r24, 0xEF	; 239
    7370:	81 b9       	out	0x01, r24	; 1
		//USART0_sendString("End_LX\n\r");
		MarchingAnts_set_level(false);
		return true;
	}
	return false;
}
    7372:	8c 2f       	mov	r24, r28
    7374:	cf 91       	pop	r28
    7376:	08 95       	ret

00007378 <__subsf3>:
    7378:	50 58       	subi	r21, 0x80	; 128

0000737a <__addsf3>:
    737a:	bb 27       	eor	r27, r27
    737c:	aa 27       	eor	r26, r26
    737e:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__addsf3x>
    7382:	0c 94 8e 3b 	jmp	0x771c	; 0x771c <__fp_round>
    7386:	0e 94 80 3b 	call	0x7700	; 0x7700 <__fp_pscA>
    738a:	38 f0       	brcs	.+14     	; 0x739a <__addsf3+0x20>
    738c:	0e 94 87 3b 	call	0x770e	; 0x770e <__fp_pscB>
    7390:	20 f0       	brcs	.+8      	; 0x739a <__addsf3+0x20>
    7392:	39 f4       	brne	.+14     	; 0x73a2 <__addsf3+0x28>
    7394:	9f 3f       	cpi	r25, 0xFF	; 255
    7396:	19 f4       	brne	.+6      	; 0x739e <__addsf3+0x24>
    7398:	26 f4       	brtc	.+8      	; 0x73a2 <__addsf3+0x28>
    739a:	0c 94 7d 3b 	jmp	0x76fa	; 0x76fa <__fp_nan>
    739e:	0e f4       	brtc	.+2      	; 0x73a2 <__addsf3+0x28>
    73a0:	e0 95       	com	r30
    73a2:	e7 fb       	bst	r30, 7
    73a4:	0c 94 4e 3b 	jmp	0x769c	; 0x769c <__fp_inf>

000073a8 <__addsf3x>:
    73a8:	e9 2f       	mov	r30, r25
    73aa:	0e 94 9f 3b 	call	0x773e	; 0x773e <__fp_split3>
    73ae:	58 f3       	brcs	.-42     	; 0x7386 <__addsf3+0xc>
    73b0:	ba 17       	cp	r27, r26
    73b2:	62 07       	cpc	r22, r18
    73b4:	73 07       	cpc	r23, r19
    73b6:	84 07       	cpc	r24, r20
    73b8:	95 07       	cpc	r25, r21
    73ba:	20 f0       	brcs	.+8      	; 0x73c4 <__addsf3x+0x1c>
    73bc:	79 f4       	brne	.+30     	; 0x73dc <__addsf3x+0x34>
    73be:	a6 f5       	brtc	.+104    	; 0x7428 <__addsf3x+0x80>
    73c0:	0c 94 d9 3b 	jmp	0x77b2	; 0x77b2 <__fp_zero>
    73c4:	0e f4       	brtc	.+2      	; 0x73c8 <__addsf3x+0x20>
    73c6:	e0 95       	com	r30
    73c8:	0b 2e       	mov	r0, r27
    73ca:	ba 2f       	mov	r27, r26
    73cc:	a0 2d       	mov	r26, r0
    73ce:	0b 01       	movw	r0, r22
    73d0:	b9 01       	movw	r22, r18
    73d2:	90 01       	movw	r18, r0
    73d4:	0c 01       	movw	r0, r24
    73d6:	ca 01       	movw	r24, r20
    73d8:	a0 01       	movw	r20, r0
    73da:	11 24       	eor	r1, r1
    73dc:	ff 27       	eor	r31, r31
    73de:	59 1b       	sub	r21, r25
    73e0:	99 f0       	breq	.+38     	; 0x7408 <__addsf3x+0x60>
    73e2:	59 3f       	cpi	r21, 0xF9	; 249
    73e4:	50 f4       	brcc	.+20     	; 0x73fa <__addsf3x+0x52>
    73e6:	50 3e       	cpi	r21, 0xE0	; 224
    73e8:	68 f1       	brcs	.+90     	; 0x7444 <__addsf3x+0x9c>
    73ea:	1a 16       	cp	r1, r26
    73ec:	f0 40       	sbci	r31, 0x00	; 0
    73ee:	a2 2f       	mov	r26, r18
    73f0:	23 2f       	mov	r18, r19
    73f2:	34 2f       	mov	r19, r20
    73f4:	44 27       	eor	r20, r20
    73f6:	58 5f       	subi	r21, 0xF8	; 248
    73f8:	f3 cf       	rjmp	.-26     	; 0x73e0 <__addsf3x+0x38>
    73fa:	46 95       	lsr	r20
    73fc:	37 95       	ror	r19
    73fe:	27 95       	ror	r18
    7400:	a7 95       	ror	r26
    7402:	f0 40       	sbci	r31, 0x00	; 0
    7404:	53 95       	inc	r21
    7406:	c9 f7       	brne	.-14     	; 0x73fa <__addsf3x+0x52>
    7408:	7e f4       	brtc	.+30     	; 0x7428 <__addsf3x+0x80>
    740a:	1f 16       	cp	r1, r31
    740c:	ba 0b       	sbc	r27, r26
    740e:	62 0b       	sbc	r22, r18
    7410:	73 0b       	sbc	r23, r19
    7412:	84 0b       	sbc	r24, r20
    7414:	ba f0       	brmi	.+46     	; 0x7444 <__addsf3x+0x9c>
    7416:	91 50       	subi	r25, 0x01	; 1
    7418:	a1 f0       	breq	.+40     	; 0x7442 <__addsf3x+0x9a>
    741a:	ff 0f       	add	r31, r31
    741c:	bb 1f       	adc	r27, r27
    741e:	66 1f       	adc	r22, r22
    7420:	77 1f       	adc	r23, r23
    7422:	88 1f       	adc	r24, r24
    7424:	c2 f7       	brpl	.-16     	; 0x7416 <__addsf3x+0x6e>
    7426:	0e c0       	rjmp	.+28     	; 0x7444 <__addsf3x+0x9c>
    7428:	ba 0f       	add	r27, r26
    742a:	62 1f       	adc	r22, r18
    742c:	73 1f       	adc	r23, r19
    742e:	84 1f       	adc	r24, r20
    7430:	48 f4       	brcc	.+18     	; 0x7444 <__addsf3x+0x9c>
    7432:	87 95       	ror	r24
    7434:	77 95       	ror	r23
    7436:	67 95       	ror	r22
    7438:	b7 95       	ror	r27
    743a:	f7 95       	ror	r31
    743c:	9e 3f       	cpi	r25, 0xFE	; 254
    743e:	08 f0       	brcs	.+2      	; 0x7442 <__addsf3x+0x9a>
    7440:	b0 cf       	rjmp	.-160    	; 0x73a2 <__addsf3+0x28>
    7442:	93 95       	inc	r25
    7444:	88 0f       	add	r24, r24
    7446:	08 f0       	brcs	.+2      	; 0x744a <__addsf3x+0xa2>
    7448:	99 27       	eor	r25, r25
    744a:	ee 0f       	add	r30, r30
    744c:	97 95       	ror	r25
    744e:	87 95       	ror	r24
    7450:	08 95       	ret

00007452 <__cmpsf2>:
    7452:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__fp_cmp>
    7456:	08 f4       	brcc	.+2      	; 0x745a <__cmpsf2+0x8>
    7458:	81 e0       	ldi	r24, 0x01	; 1
    745a:	08 95       	ret

0000745c <__divsf3>:
    745c:	0e 94 42 3a 	call	0x7484	; 0x7484 <__divsf3x>
    7460:	0c 94 8e 3b 	jmp	0x771c	; 0x771c <__fp_round>
    7464:	0e 94 87 3b 	call	0x770e	; 0x770e <__fp_pscB>
    7468:	58 f0       	brcs	.+22     	; 0x7480 <__divsf3+0x24>
    746a:	0e 94 80 3b 	call	0x7700	; 0x7700 <__fp_pscA>
    746e:	40 f0       	brcs	.+16     	; 0x7480 <__divsf3+0x24>
    7470:	29 f4       	brne	.+10     	; 0x747c <__divsf3+0x20>
    7472:	5f 3f       	cpi	r21, 0xFF	; 255
    7474:	29 f0       	breq	.+10     	; 0x7480 <__divsf3+0x24>
    7476:	0c 94 4e 3b 	jmp	0x769c	; 0x769c <__fp_inf>
    747a:	51 11       	cpse	r21, r1
    747c:	0c 94 da 3b 	jmp	0x77b4	; 0x77b4 <__fp_szero>
    7480:	0c 94 7d 3b 	jmp	0x76fa	; 0x76fa <__fp_nan>

00007484 <__divsf3x>:
    7484:	0e 94 9f 3b 	call	0x773e	; 0x773e <__fp_split3>
    7488:	68 f3       	brcs	.-38     	; 0x7464 <__divsf3+0x8>

0000748a <__divsf3_pse>:
    748a:	99 23       	and	r25, r25
    748c:	b1 f3       	breq	.-20     	; 0x747a <__divsf3+0x1e>
    748e:	55 23       	and	r21, r21
    7490:	91 f3       	breq	.-28     	; 0x7476 <__divsf3+0x1a>
    7492:	95 1b       	sub	r25, r21
    7494:	55 0b       	sbc	r21, r21
    7496:	bb 27       	eor	r27, r27
    7498:	aa 27       	eor	r26, r26
    749a:	62 17       	cp	r22, r18
    749c:	73 07       	cpc	r23, r19
    749e:	84 07       	cpc	r24, r20
    74a0:	38 f0       	brcs	.+14     	; 0x74b0 <__divsf3_pse+0x26>
    74a2:	9f 5f       	subi	r25, 0xFF	; 255
    74a4:	5f 4f       	sbci	r21, 0xFF	; 255
    74a6:	22 0f       	add	r18, r18
    74a8:	33 1f       	adc	r19, r19
    74aa:	44 1f       	adc	r20, r20
    74ac:	aa 1f       	adc	r26, r26
    74ae:	a9 f3       	breq	.-22     	; 0x749a <__divsf3_pse+0x10>
    74b0:	35 d0       	rcall	.+106    	; 0x751c <__divsf3_pse+0x92>
    74b2:	0e 2e       	mov	r0, r30
    74b4:	3a f0       	brmi	.+14     	; 0x74c4 <__divsf3_pse+0x3a>
    74b6:	e0 e8       	ldi	r30, 0x80	; 128
    74b8:	32 d0       	rcall	.+100    	; 0x751e <__divsf3_pse+0x94>
    74ba:	91 50       	subi	r25, 0x01	; 1
    74bc:	50 40       	sbci	r21, 0x00	; 0
    74be:	e6 95       	lsr	r30
    74c0:	00 1c       	adc	r0, r0
    74c2:	ca f7       	brpl	.-14     	; 0x74b6 <__divsf3_pse+0x2c>
    74c4:	2b d0       	rcall	.+86     	; 0x751c <__divsf3_pse+0x92>
    74c6:	fe 2f       	mov	r31, r30
    74c8:	29 d0       	rcall	.+82     	; 0x751c <__divsf3_pse+0x92>
    74ca:	66 0f       	add	r22, r22
    74cc:	77 1f       	adc	r23, r23
    74ce:	88 1f       	adc	r24, r24
    74d0:	bb 1f       	adc	r27, r27
    74d2:	26 17       	cp	r18, r22
    74d4:	37 07       	cpc	r19, r23
    74d6:	48 07       	cpc	r20, r24
    74d8:	ab 07       	cpc	r26, r27
    74da:	b0 e8       	ldi	r27, 0x80	; 128
    74dc:	09 f0       	breq	.+2      	; 0x74e0 <__divsf3_pse+0x56>
    74de:	bb 0b       	sbc	r27, r27
    74e0:	80 2d       	mov	r24, r0
    74e2:	bf 01       	movw	r22, r30
    74e4:	ff 27       	eor	r31, r31
    74e6:	93 58       	subi	r25, 0x83	; 131
    74e8:	5f 4f       	sbci	r21, 0xFF	; 255
    74ea:	3a f0       	brmi	.+14     	; 0x74fa <__divsf3_pse+0x70>
    74ec:	9e 3f       	cpi	r25, 0xFE	; 254
    74ee:	51 05       	cpc	r21, r1
    74f0:	78 f0       	brcs	.+30     	; 0x7510 <__divsf3_pse+0x86>
    74f2:	0c 94 4e 3b 	jmp	0x769c	; 0x769c <__fp_inf>
    74f6:	0c 94 da 3b 	jmp	0x77b4	; 0x77b4 <__fp_szero>
    74fa:	5f 3f       	cpi	r21, 0xFF	; 255
    74fc:	e4 f3       	brlt	.-8      	; 0x74f6 <__divsf3_pse+0x6c>
    74fe:	98 3e       	cpi	r25, 0xE8	; 232
    7500:	d4 f3       	brlt	.-12     	; 0x74f6 <__divsf3_pse+0x6c>
    7502:	86 95       	lsr	r24
    7504:	77 95       	ror	r23
    7506:	67 95       	ror	r22
    7508:	b7 95       	ror	r27
    750a:	f7 95       	ror	r31
    750c:	9f 5f       	subi	r25, 0xFF	; 255
    750e:	c9 f7       	brne	.-14     	; 0x7502 <__divsf3_pse+0x78>
    7510:	88 0f       	add	r24, r24
    7512:	91 1d       	adc	r25, r1
    7514:	96 95       	lsr	r25
    7516:	87 95       	ror	r24
    7518:	97 f9       	bld	r25, 7
    751a:	08 95       	ret
    751c:	e1 e0       	ldi	r30, 0x01	; 1
    751e:	66 0f       	add	r22, r22
    7520:	77 1f       	adc	r23, r23
    7522:	88 1f       	adc	r24, r24
    7524:	bb 1f       	adc	r27, r27
    7526:	62 17       	cp	r22, r18
    7528:	73 07       	cpc	r23, r19
    752a:	84 07       	cpc	r24, r20
    752c:	ba 07       	cpc	r27, r26
    752e:	20 f0       	brcs	.+8      	; 0x7538 <__divsf3_pse+0xae>
    7530:	62 1b       	sub	r22, r18
    7532:	73 0b       	sbc	r23, r19
    7534:	84 0b       	sbc	r24, r20
    7536:	ba 0b       	sbc	r27, r26
    7538:	ee 1f       	adc	r30, r30
    753a:	88 f7       	brcc	.-30     	; 0x751e <__divsf3_pse+0x94>
    753c:	e0 95       	com	r30
    753e:	08 95       	ret

00007540 <__fixsfsi>:
    7540:	0e 94 a7 3a 	call	0x754e	; 0x754e <__fixunssfsi>
    7544:	68 94       	set
    7546:	b1 11       	cpse	r27, r1
    7548:	0c 94 da 3b 	jmp	0x77b4	; 0x77b4 <__fp_szero>
    754c:	08 95       	ret

0000754e <__fixunssfsi>:
    754e:	0e 94 a7 3b 	call	0x774e	; 0x774e <__fp_splitA>
    7552:	88 f0       	brcs	.+34     	; 0x7576 <__fixunssfsi+0x28>
    7554:	9f 57       	subi	r25, 0x7F	; 127
    7556:	98 f0       	brcs	.+38     	; 0x757e <__fixunssfsi+0x30>
    7558:	b9 2f       	mov	r27, r25
    755a:	99 27       	eor	r25, r25
    755c:	b7 51       	subi	r27, 0x17	; 23
    755e:	b0 f0       	brcs	.+44     	; 0x758c <__fixunssfsi+0x3e>
    7560:	e1 f0       	breq	.+56     	; 0x759a <__fixunssfsi+0x4c>
    7562:	66 0f       	add	r22, r22
    7564:	77 1f       	adc	r23, r23
    7566:	88 1f       	adc	r24, r24
    7568:	99 1f       	adc	r25, r25
    756a:	1a f0       	brmi	.+6      	; 0x7572 <__fixunssfsi+0x24>
    756c:	ba 95       	dec	r27
    756e:	c9 f7       	brne	.-14     	; 0x7562 <__fixunssfsi+0x14>
    7570:	14 c0       	rjmp	.+40     	; 0x759a <__fixunssfsi+0x4c>
    7572:	b1 30       	cpi	r27, 0x01	; 1
    7574:	91 f0       	breq	.+36     	; 0x759a <__fixunssfsi+0x4c>
    7576:	0e 94 d9 3b 	call	0x77b2	; 0x77b2 <__fp_zero>
    757a:	b1 e0       	ldi	r27, 0x01	; 1
    757c:	08 95       	ret
    757e:	0c 94 d9 3b 	jmp	0x77b2	; 0x77b2 <__fp_zero>
    7582:	67 2f       	mov	r22, r23
    7584:	78 2f       	mov	r23, r24
    7586:	88 27       	eor	r24, r24
    7588:	b8 5f       	subi	r27, 0xF8	; 248
    758a:	39 f0       	breq	.+14     	; 0x759a <__fixunssfsi+0x4c>
    758c:	b9 3f       	cpi	r27, 0xF9	; 249
    758e:	cc f3       	brlt	.-14     	; 0x7582 <__fixunssfsi+0x34>
    7590:	86 95       	lsr	r24
    7592:	77 95       	ror	r23
    7594:	67 95       	ror	r22
    7596:	b3 95       	inc	r27
    7598:	d9 f7       	brne	.-10     	; 0x7590 <__fixunssfsi+0x42>
    759a:	3e f4       	brtc	.+14     	; 0x75aa <__fixunssfsi+0x5c>
    759c:	90 95       	com	r25
    759e:	80 95       	com	r24
    75a0:	70 95       	com	r23
    75a2:	61 95       	neg	r22
    75a4:	7f 4f       	sbci	r23, 0xFF	; 255
    75a6:	8f 4f       	sbci	r24, 0xFF	; 255
    75a8:	9f 4f       	sbci	r25, 0xFF	; 255
    75aa:	08 95       	ret

000075ac <__floatunsisf>:
    75ac:	e8 94       	clt
    75ae:	09 c0       	rjmp	.+18     	; 0x75c2 <__floatsisf+0x12>

000075b0 <__floatsisf>:
    75b0:	97 fb       	bst	r25, 7
    75b2:	3e f4       	brtc	.+14     	; 0x75c2 <__floatsisf+0x12>
    75b4:	90 95       	com	r25
    75b6:	80 95       	com	r24
    75b8:	70 95       	com	r23
    75ba:	61 95       	neg	r22
    75bc:	7f 4f       	sbci	r23, 0xFF	; 255
    75be:	8f 4f       	sbci	r24, 0xFF	; 255
    75c0:	9f 4f       	sbci	r25, 0xFF	; 255
    75c2:	99 23       	and	r25, r25
    75c4:	a9 f0       	breq	.+42     	; 0x75f0 <__floatsisf+0x40>
    75c6:	f9 2f       	mov	r31, r25
    75c8:	96 e9       	ldi	r25, 0x96	; 150
    75ca:	bb 27       	eor	r27, r27
    75cc:	93 95       	inc	r25
    75ce:	f6 95       	lsr	r31
    75d0:	87 95       	ror	r24
    75d2:	77 95       	ror	r23
    75d4:	67 95       	ror	r22
    75d6:	b7 95       	ror	r27
    75d8:	f1 11       	cpse	r31, r1
    75da:	f8 cf       	rjmp	.-16     	; 0x75cc <__floatsisf+0x1c>
    75dc:	fa f4       	brpl	.+62     	; 0x761c <__floatsisf+0x6c>
    75de:	bb 0f       	add	r27, r27
    75e0:	11 f4       	brne	.+4      	; 0x75e6 <__floatsisf+0x36>
    75e2:	60 ff       	sbrs	r22, 0
    75e4:	1b c0       	rjmp	.+54     	; 0x761c <__floatsisf+0x6c>
    75e6:	6f 5f       	subi	r22, 0xFF	; 255
    75e8:	7f 4f       	sbci	r23, 0xFF	; 255
    75ea:	8f 4f       	sbci	r24, 0xFF	; 255
    75ec:	9f 4f       	sbci	r25, 0xFF	; 255
    75ee:	16 c0       	rjmp	.+44     	; 0x761c <__floatsisf+0x6c>
    75f0:	88 23       	and	r24, r24
    75f2:	11 f0       	breq	.+4      	; 0x75f8 <__floatsisf+0x48>
    75f4:	96 e9       	ldi	r25, 0x96	; 150
    75f6:	11 c0       	rjmp	.+34     	; 0x761a <__floatsisf+0x6a>
    75f8:	77 23       	and	r23, r23
    75fa:	21 f0       	breq	.+8      	; 0x7604 <__floatsisf+0x54>
    75fc:	9e e8       	ldi	r25, 0x8E	; 142
    75fe:	87 2f       	mov	r24, r23
    7600:	76 2f       	mov	r23, r22
    7602:	05 c0       	rjmp	.+10     	; 0x760e <__floatsisf+0x5e>
    7604:	66 23       	and	r22, r22
    7606:	71 f0       	breq	.+28     	; 0x7624 <__floatsisf+0x74>
    7608:	96 e8       	ldi	r25, 0x86	; 134
    760a:	86 2f       	mov	r24, r22
    760c:	70 e0       	ldi	r23, 0x00	; 0
    760e:	60 e0       	ldi	r22, 0x00	; 0
    7610:	2a f0       	brmi	.+10     	; 0x761c <__floatsisf+0x6c>
    7612:	9a 95       	dec	r25
    7614:	66 0f       	add	r22, r22
    7616:	77 1f       	adc	r23, r23
    7618:	88 1f       	adc	r24, r24
    761a:	da f7       	brpl	.-10     	; 0x7612 <__floatsisf+0x62>
    761c:	88 0f       	add	r24, r24
    761e:	96 95       	lsr	r25
    7620:	87 95       	ror	r24
    7622:	97 f9       	bld	r25, 7
    7624:	08 95       	ret

00007626 <floor>:
    7626:	0e 94 c1 3b 	call	0x7782	; 0x7782 <__fp_trunc>
    762a:	90 f0       	brcs	.+36     	; 0x7650 <floor+0x2a>
    762c:	9f 37       	cpi	r25, 0x7F	; 127
    762e:	48 f4       	brcc	.+18     	; 0x7642 <floor+0x1c>
    7630:	91 11       	cpse	r25, r1
    7632:	16 f0       	brts	.+4      	; 0x7638 <floor+0x12>
    7634:	0c 94 da 3b 	jmp	0x77b4	; 0x77b4 <__fp_szero>
    7638:	60 e0       	ldi	r22, 0x00	; 0
    763a:	70 e0       	ldi	r23, 0x00	; 0
    763c:	80 e8       	ldi	r24, 0x80	; 128
    763e:	9f eb       	ldi	r25, 0xBF	; 191
    7640:	08 95       	ret
    7642:	26 f4       	brtc	.+8      	; 0x764c <floor+0x26>
    7644:	1b 16       	cp	r1, r27
    7646:	61 1d       	adc	r22, r1
    7648:	71 1d       	adc	r23, r1
    764a:	81 1d       	adc	r24, r1
    764c:	0c 94 54 3b 	jmp	0x76a8	; 0x76a8 <__fp_mintl>
    7650:	0c 94 6f 3b 	jmp	0x76de	; 0x76de <__fp_mpack>

00007654 <__fp_cmp>:
    7654:	99 0f       	add	r25, r25
    7656:	00 08       	sbc	r0, r0
    7658:	55 0f       	add	r21, r21
    765a:	aa 0b       	sbc	r26, r26
    765c:	e0 e8       	ldi	r30, 0x80	; 128
    765e:	fe ef       	ldi	r31, 0xFE	; 254
    7660:	16 16       	cp	r1, r22
    7662:	17 06       	cpc	r1, r23
    7664:	e8 07       	cpc	r30, r24
    7666:	f9 07       	cpc	r31, r25
    7668:	c0 f0       	brcs	.+48     	; 0x769a <__fp_cmp+0x46>
    766a:	12 16       	cp	r1, r18
    766c:	13 06       	cpc	r1, r19
    766e:	e4 07       	cpc	r30, r20
    7670:	f5 07       	cpc	r31, r21
    7672:	98 f0       	brcs	.+38     	; 0x769a <__fp_cmp+0x46>
    7674:	62 1b       	sub	r22, r18
    7676:	73 0b       	sbc	r23, r19
    7678:	84 0b       	sbc	r24, r20
    767a:	95 0b       	sbc	r25, r21
    767c:	39 f4       	brne	.+14     	; 0x768c <__fp_cmp+0x38>
    767e:	0a 26       	eor	r0, r26
    7680:	61 f0       	breq	.+24     	; 0x769a <__fp_cmp+0x46>
    7682:	23 2b       	or	r18, r19
    7684:	24 2b       	or	r18, r20
    7686:	25 2b       	or	r18, r21
    7688:	21 f4       	brne	.+8      	; 0x7692 <__fp_cmp+0x3e>
    768a:	08 95       	ret
    768c:	0a 26       	eor	r0, r26
    768e:	09 f4       	brne	.+2      	; 0x7692 <__fp_cmp+0x3e>
    7690:	a1 40       	sbci	r26, 0x01	; 1
    7692:	a6 95       	lsr	r26
    7694:	8f ef       	ldi	r24, 0xFF	; 255
    7696:	81 1d       	adc	r24, r1
    7698:	81 1d       	adc	r24, r1
    769a:	08 95       	ret

0000769c <__fp_inf>:
    769c:	97 f9       	bld	r25, 7
    769e:	9f 67       	ori	r25, 0x7F	; 127
    76a0:	80 e8       	ldi	r24, 0x80	; 128
    76a2:	70 e0       	ldi	r23, 0x00	; 0
    76a4:	60 e0       	ldi	r22, 0x00	; 0
    76a6:	08 95       	ret

000076a8 <__fp_mintl>:
    76a8:	88 23       	and	r24, r24
    76aa:	71 f4       	brne	.+28     	; 0x76c8 <__fp_mintl+0x20>
    76ac:	77 23       	and	r23, r23
    76ae:	21 f0       	breq	.+8      	; 0x76b8 <__fp_mintl+0x10>
    76b0:	98 50       	subi	r25, 0x08	; 8
    76b2:	87 2b       	or	r24, r23
    76b4:	76 2f       	mov	r23, r22
    76b6:	07 c0       	rjmp	.+14     	; 0x76c6 <__fp_mintl+0x1e>
    76b8:	66 23       	and	r22, r22
    76ba:	11 f4       	brne	.+4      	; 0x76c0 <__fp_mintl+0x18>
    76bc:	99 27       	eor	r25, r25
    76be:	0d c0       	rjmp	.+26     	; 0x76da <__fp_mintl+0x32>
    76c0:	90 51       	subi	r25, 0x10	; 16
    76c2:	86 2b       	or	r24, r22
    76c4:	70 e0       	ldi	r23, 0x00	; 0
    76c6:	60 e0       	ldi	r22, 0x00	; 0
    76c8:	2a f0       	brmi	.+10     	; 0x76d4 <__fp_mintl+0x2c>
    76ca:	9a 95       	dec	r25
    76cc:	66 0f       	add	r22, r22
    76ce:	77 1f       	adc	r23, r23
    76d0:	88 1f       	adc	r24, r24
    76d2:	da f7       	brpl	.-10     	; 0x76ca <__fp_mintl+0x22>
    76d4:	88 0f       	add	r24, r24
    76d6:	96 95       	lsr	r25
    76d8:	87 95       	ror	r24
    76da:	97 f9       	bld	r25, 7
    76dc:	08 95       	ret

000076de <__fp_mpack>:
    76de:	9f 3f       	cpi	r25, 0xFF	; 255
    76e0:	31 f0       	breq	.+12     	; 0x76ee <__fp_mpack_finite+0xc>

000076e2 <__fp_mpack_finite>:
    76e2:	91 50       	subi	r25, 0x01	; 1
    76e4:	20 f4       	brcc	.+8      	; 0x76ee <__fp_mpack_finite+0xc>
    76e6:	87 95       	ror	r24
    76e8:	77 95       	ror	r23
    76ea:	67 95       	ror	r22
    76ec:	b7 95       	ror	r27
    76ee:	88 0f       	add	r24, r24
    76f0:	91 1d       	adc	r25, r1
    76f2:	96 95       	lsr	r25
    76f4:	87 95       	ror	r24
    76f6:	97 f9       	bld	r25, 7
    76f8:	08 95       	ret

000076fa <__fp_nan>:
    76fa:	9f ef       	ldi	r25, 0xFF	; 255
    76fc:	80 ec       	ldi	r24, 0xC0	; 192
    76fe:	08 95       	ret

00007700 <__fp_pscA>:
    7700:	00 24       	eor	r0, r0
    7702:	0a 94       	dec	r0
    7704:	16 16       	cp	r1, r22
    7706:	17 06       	cpc	r1, r23
    7708:	18 06       	cpc	r1, r24
    770a:	09 06       	cpc	r0, r25
    770c:	08 95       	ret

0000770e <__fp_pscB>:
    770e:	00 24       	eor	r0, r0
    7710:	0a 94       	dec	r0
    7712:	12 16       	cp	r1, r18
    7714:	13 06       	cpc	r1, r19
    7716:	14 06       	cpc	r1, r20
    7718:	05 06       	cpc	r0, r21
    771a:	08 95       	ret

0000771c <__fp_round>:
    771c:	09 2e       	mov	r0, r25
    771e:	03 94       	inc	r0
    7720:	00 0c       	add	r0, r0
    7722:	11 f4       	brne	.+4      	; 0x7728 <__fp_round+0xc>
    7724:	88 23       	and	r24, r24
    7726:	52 f0       	brmi	.+20     	; 0x773c <__fp_round+0x20>
    7728:	bb 0f       	add	r27, r27
    772a:	40 f4       	brcc	.+16     	; 0x773c <__fp_round+0x20>
    772c:	bf 2b       	or	r27, r31
    772e:	11 f4       	brne	.+4      	; 0x7734 <__fp_round+0x18>
    7730:	60 ff       	sbrs	r22, 0
    7732:	04 c0       	rjmp	.+8      	; 0x773c <__fp_round+0x20>
    7734:	6f 5f       	subi	r22, 0xFF	; 255
    7736:	7f 4f       	sbci	r23, 0xFF	; 255
    7738:	8f 4f       	sbci	r24, 0xFF	; 255
    773a:	9f 4f       	sbci	r25, 0xFF	; 255
    773c:	08 95       	ret

0000773e <__fp_split3>:
    773e:	57 fd       	sbrc	r21, 7
    7740:	90 58       	subi	r25, 0x80	; 128
    7742:	44 0f       	add	r20, r20
    7744:	55 1f       	adc	r21, r21
    7746:	59 f0       	breq	.+22     	; 0x775e <__fp_splitA+0x10>
    7748:	5f 3f       	cpi	r21, 0xFF	; 255
    774a:	71 f0       	breq	.+28     	; 0x7768 <__fp_splitA+0x1a>
    774c:	47 95       	ror	r20

0000774e <__fp_splitA>:
    774e:	88 0f       	add	r24, r24
    7750:	97 fb       	bst	r25, 7
    7752:	99 1f       	adc	r25, r25
    7754:	61 f0       	breq	.+24     	; 0x776e <__fp_splitA+0x20>
    7756:	9f 3f       	cpi	r25, 0xFF	; 255
    7758:	79 f0       	breq	.+30     	; 0x7778 <__fp_splitA+0x2a>
    775a:	87 95       	ror	r24
    775c:	08 95       	ret
    775e:	12 16       	cp	r1, r18
    7760:	13 06       	cpc	r1, r19
    7762:	14 06       	cpc	r1, r20
    7764:	55 1f       	adc	r21, r21
    7766:	f2 cf       	rjmp	.-28     	; 0x774c <__fp_split3+0xe>
    7768:	46 95       	lsr	r20
    776a:	f1 df       	rcall	.-30     	; 0x774e <__fp_splitA>
    776c:	08 c0       	rjmp	.+16     	; 0x777e <__fp_splitA+0x30>
    776e:	16 16       	cp	r1, r22
    7770:	17 06       	cpc	r1, r23
    7772:	18 06       	cpc	r1, r24
    7774:	99 1f       	adc	r25, r25
    7776:	f1 cf       	rjmp	.-30     	; 0x775a <__fp_splitA+0xc>
    7778:	86 95       	lsr	r24
    777a:	71 05       	cpc	r23, r1
    777c:	61 05       	cpc	r22, r1
    777e:	08 94       	sec
    7780:	08 95       	ret

00007782 <__fp_trunc>:
    7782:	0e 94 a7 3b 	call	0x774e	; 0x774e <__fp_splitA>
    7786:	a0 f0       	brcs	.+40     	; 0x77b0 <__fp_trunc+0x2e>
    7788:	be e7       	ldi	r27, 0x7E	; 126
    778a:	b9 17       	cp	r27, r25
    778c:	88 f4       	brcc	.+34     	; 0x77b0 <__fp_trunc+0x2e>
    778e:	bb 27       	eor	r27, r27
    7790:	9f 38       	cpi	r25, 0x8F	; 143
    7792:	60 f4       	brcc	.+24     	; 0x77ac <__fp_trunc+0x2a>
    7794:	16 16       	cp	r1, r22
    7796:	b1 1d       	adc	r27, r1
    7798:	67 2f       	mov	r22, r23
    779a:	78 2f       	mov	r23, r24
    779c:	88 27       	eor	r24, r24
    779e:	98 5f       	subi	r25, 0xF8	; 248
    77a0:	f7 cf       	rjmp	.-18     	; 0x7790 <__fp_trunc+0xe>
    77a2:	86 95       	lsr	r24
    77a4:	77 95       	ror	r23
    77a6:	67 95       	ror	r22
    77a8:	b1 1d       	adc	r27, r1
    77aa:	93 95       	inc	r25
    77ac:	96 39       	cpi	r25, 0x96	; 150
    77ae:	c8 f3       	brcs	.-14     	; 0x77a2 <__fp_trunc+0x20>
    77b0:	08 95       	ret

000077b2 <__fp_zero>:
    77b2:	e8 94       	clt

000077b4 <__fp_szero>:
    77b4:	bb 27       	eor	r27, r27
    77b6:	66 27       	eor	r22, r22
    77b8:	77 27       	eor	r23, r23
    77ba:	cb 01       	movw	r24, r22
    77bc:	97 f9       	bld	r25, 7
    77be:	08 95       	ret

000077c0 <__gesf2>:
    77c0:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__fp_cmp>
    77c4:	08 f4       	brcc	.+2      	; 0x77c8 <__gesf2+0x8>
    77c6:	8f ef       	ldi	r24, 0xFF	; 255
    77c8:	08 95       	ret
    77ca:	16 f0       	brts	.+4      	; 0x77d0 <__gesf2+0x10>
    77cc:	0c 94 6f 3b 	jmp	0x76de	; 0x76de <__fp_mpack>
    77d0:	0c 94 7d 3b 	jmp	0x76fa	; 0x76fa <__fp_nan>
    77d4:	68 94       	set
    77d6:	0c 94 4e 3b 	jmp	0x769c	; 0x769c <__fp_inf>

000077da <log>:
    77da:	0e 94 a7 3b 	call	0x774e	; 0x774e <__fp_splitA>
    77de:	a8 f3       	brcs	.-22     	; 0x77ca <__gesf2+0xa>
    77e0:	99 23       	and	r25, r25
    77e2:	c1 f3       	breq	.-16     	; 0x77d4 <__gesf2+0x14>
    77e4:	ae f3       	brts	.-22     	; 0x77d0 <__gesf2+0x10>
    77e6:	df 93       	push	r29
    77e8:	cf 93       	push	r28
    77ea:	1f 93       	push	r17
    77ec:	0f 93       	push	r16
    77ee:	ff 92       	push	r15
    77f0:	c9 2f       	mov	r28, r25
    77f2:	dd 27       	eor	r29, r29
    77f4:	88 23       	and	r24, r24
    77f6:	2a f0       	brmi	.+10     	; 0x7802 <log+0x28>
    77f8:	21 97       	sbiw	r28, 0x01	; 1
    77fa:	66 0f       	add	r22, r22
    77fc:	77 1f       	adc	r23, r23
    77fe:	88 1f       	adc	r24, r24
    7800:	da f7       	brpl	.-10     	; 0x77f8 <log+0x1e>
    7802:	20 e0       	ldi	r18, 0x00	; 0
    7804:	30 e0       	ldi	r19, 0x00	; 0
    7806:	40 e8       	ldi	r20, 0x80	; 128
    7808:	5f eb       	ldi	r21, 0xBF	; 191
    780a:	9f e3       	ldi	r25, 0x3F	; 63
    780c:	88 39       	cpi	r24, 0x98	; 152
    780e:	20 f0       	brcs	.+8      	; 0x7818 <log+0x3e>
    7810:	80 3e       	cpi	r24, 0xE0	; 224
    7812:	38 f0       	brcs	.+14     	; 0x7822 <log+0x48>
    7814:	21 96       	adiw	r28, 0x01	; 1
    7816:	8f 77       	andi	r24, 0x7F	; 127
    7818:	0e 94 bd 39 	call	0x737a	; 0x737a <__addsf3>
    781c:	e8 e9       	ldi	r30, 0x98	; 152
    781e:	f2 e0       	ldi	r31, 0x02	; 2
    7820:	04 c0       	rjmp	.+8      	; 0x782a <log+0x50>
    7822:	0e 94 bd 39 	call	0x737a	; 0x737a <__addsf3>
    7826:	e5 ec       	ldi	r30, 0xC5	; 197
    7828:	f2 e0       	ldi	r31, 0x02	; 2
    782a:	0e 94 a2 3c 	call	0x7944	; 0x7944 <__fp_powser>
    782e:	8b 01       	movw	r16, r22
    7830:	be 01       	movw	r22, r28
    7832:	ec 01       	movw	r28, r24
    7834:	fb 2e       	mov	r15, r27
    7836:	6f 57       	subi	r22, 0x7F	; 127
    7838:	71 09       	sbc	r23, r1
    783a:	75 95       	asr	r23
    783c:	77 1f       	adc	r23, r23
    783e:	88 0b       	sbc	r24, r24
    7840:	99 0b       	sbc	r25, r25
    7842:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__floatsisf>
    7846:	28 e1       	ldi	r18, 0x18	; 24
    7848:	32 e7       	ldi	r19, 0x72	; 114
    784a:	41 e3       	ldi	r20, 0x31	; 49
    784c:	5f e3       	ldi	r21, 0x3F	; 63
    784e:	0e 94 48 3c 	call	0x7890	; 0x7890 <__mulsf3x>
    7852:	af 2d       	mov	r26, r15
    7854:	98 01       	movw	r18, r16
    7856:	ae 01       	movw	r20, r28
    7858:	ff 90       	pop	r15
    785a:	0f 91       	pop	r16
    785c:	1f 91       	pop	r17
    785e:	cf 91       	pop	r28
    7860:	df 91       	pop	r29
    7862:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__addsf3x>
    7866:	0c 94 8e 3b 	jmp	0x771c	; 0x771c <__fp_round>

0000786a <__mulsf3>:
    786a:	0e 94 48 3c 	call	0x7890	; 0x7890 <__mulsf3x>
    786e:	0c 94 8e 3b 	jmp	0x771c	; 0x771c <__fp_round>
    7872:	0e 94 80 3b 	call	0x7700	; 0x7700 <__fp_pscA>
    7876:	38 f0       	brcs	.+14     	; 0x7886 <__mulsf3+0x1c>
    7878:	0e 94 87 3b 	call	0x770e	; 0x770e <__fp_pscB>
    787c:	20 f0       	brcs	.+8      	; 0x7886 <__mulsf3+0x1c>
    787e:	95 23       	and	r25, r21
    7880:	11 f0       	breq	.+4      	; 0x7886 <__mulsf3+0x1c>
    7882:	0c 94 4e 3b 	jmp	0x769c	; 0x769c <__fp_inf>
    7886:	0c 94 7d 3b 	jmp	0x76fa	; 0x76fa <__fp_nan>
    788a:	11 24       	eor	r1, r1
    788c:	0c 94 da 3b 	jmp	0x77b4	; 0x77b4 <__fp_szero>

00007890 <__mulsf3x>:
    7890:	0e 94 9f 3b 	call	0x773e	; 0x773e <__fp_split3>
    7894:	70 f3       	brcs	.-36     	; 0x7872 <__mulsf3+0x8>

00007896 <__mulsf3_pse>:
    7896:	95 9f       	mul	r25, r21
    7898:	c1 f3       	breq	.-16     	; 0x788a <__mulsf3+0x20>
    789a:	95 0f       	add	r25, r21
    789c:	50 e0       	ldi	r21, 0x00	; 0
    789e:	55 1f       	adc	r21, r21
    78a0:	62 9f       	mul	r22, r18
    78a2:	f0 01       	movw	r30, r0
    78a4:	72 9f       	mul	r23, r18
    78a6:	bb 27       	eor	r27, r27
    78a8:	f0 0d       	add	r31, r0
    78aa:	b1 1d       	adc	r27, r1
    78ac:	63 9f       	mul	r22, r19
    78ae:	aa 27       	eor	r26, r26
    78b0:	f0 0d       	add	r31, r0
    78b2:	b1 1d       	adc	r27, r1
    78b4:	aa 1f       	adc	r26, r26
    78b6:	64 9f       	mul	r22, r20
    78b8:	66 27       	eor	r22, r22
    78ba:	b0 0d       	add	r27, r0
    78bc:	a1 1d       	adc	r26, r1
    78be:	66 1f       	adc	r22, r22
    78c0:	82 9f       	mul	r24, r18
    78c2:	22 27       	eor	r18, r18
    78c4:	b0 0d       	add	r27, r0
    78c6:	a1 1d       	adc	r26, r1
    78c8:	62 1f       	adc	r22, r18
    78ca:	73 9f       	mul	r23, r19
    78cc:	b0 0d       	add	r27, r0
    78ce:	a1 1d       	adc	r26, r1
    78d0:	62 1f       	adc	r22, r18
    78d2:	83 9f       	mul	r24, r19
    78d4:	a0 0d       	add	r26, r0
    78d6:	61 1d       	adc	r22, r1
    78d8:	22 1f       	adc	r18, r18
    78da:	74 9f       	mul	r23, r20
    78dc:	33 27       	eor	r19, r19
    78de:	a0 0d       	add	r26, r0
    78e0:	61 1d       	adc	r22, r1
    78e2:	23 1f       	adc	r18, r19
    78e4:	84 9f       	mul	r24, r20
    78e6:	60 0d       	add	r22, r0
    78e8:	21 1d       	adc	r18, r1
    78ea:	82 2f       	mov	r24, r18
    78ec:	76 2f       	mov	r23, r22
    78ee:	6a 2f       	mov	r22, r26
    78f0:	11 24       	eor	r1, r1
    78f2:	9f 57       	subi	r25, 0x7F	; 127
    78f4:	50 40       	sbci	r21, 0x00	; 0
    78f6:	9a f0       	brmi	.+38     	; 0x791e <__mulsf3_pse+0x88>
    78f8:	f1 f0       	breq	.+60     	; 0x7936 <__mulsf3_pse+0xa0>
    78fa:	88 23       	and	r24, r24
    78fc:	4a f0       	brmi	.+18     	; 0x7910 <__mulsf3_pse+0x7a>
    78fe:	ee 0f       	add	r30, r30
    7900:	ff 1f       	adc	r31, r31
    7902:	bb 1f       	adc	r27, r27
    7904:	66 1f       	adc	r22, r22
    7906:	77 1f       	adc	r23, r23
    7908:	88 1f       	adc	r24, r24
    790a:	91 50       	subi	r25, 0x01	; 1
    790c:	50 40       	sbci	r21, 0x00	; 0
    790e:	a9 f7       	brne	.-22     	; 0x78fa <__mulsf3_pse+0x64>
    7910:	9e 3f       	cpi	r25, 0xFE	; 254
    7912:	51 05       	cpc	r21, r1
    7914:	80 f0       	brcs	.+32     	; 0x7936 <__mulsf3_pse+0xa0>
    7916:	0c 94 4e 3b 	jmp	0x769c	; 0x769c <__fp_inf>
    791a:	0c 94 da 3b 	jmp	0x77b4	; 0x77b4 <__fp_szero>
    791e:	5f 3f       	cpi	r21, 0xFF	; 255
    7920:	e4 f3       	brlt	.-8      	; 0x791a <__mulsf3_pse+0x84>
    7922:	98 3e       	cpi	r25, 0xE8	; 232
    7924:	d4 f3       	brlt	.-12     	; 0x791a <__mulsf3_pse+0x84>
    7926:	86 95       	lsr	r24
    7928:	77 95       	ror	r23
    792a:	67 95       	ror	r22
    792c:	b7 95       	ror	r27
    792e:	f7 95       	ror	r31
    7930:	e7 95       	ror	r30
    7932:	9f 5f       	subi	r25, 0xFF	; 255
    7934:	c1 f7       	brne	.-16     	; 0x7926 <__mulsf3_pse+0x90>
    7936:	fe 2b       	or	r31, r30
    7938:	88 0f       	add	r24, r24
    793a:	91 1d       	adc	r25, r1
    793c:	96 95       	lsr	r25
    793e:	87 95       	ror	r24
    7940:	97 f9       	bld	r25, 7
    7942:	08 95       	ret

00007944 <__fp_powser>:
    7944:	df 93       	push	r29
    7946:	cf 93       	push	r28
    7948:	1f 93       	push	r17
    794a:	0f 93       	push	r16
    794c:	ff 92       	push	r15
    794e:	ef 92       	push	r14
    7950:	df 92       	push	r13
    7952:	7b 01       	movw	r14, r22
    7954:	8c 01       	movw	r16, r24
    7956:	68 94       	set
    7958:	06 c0       	rjmp	.+12     	; 0x7966 <__fp_powser+0x22>
    795a:	da 2e       	mov	r13, r26
    795c:	ef 01       	movw	r28, r30
    795e:	0e 94 48 3c 	call	0x7890	; 0x7890 <__mulsf3x>
    7962:	fe 01       	movw	r30, r28
    7964:	e8 94       	clt
    7966:	a5 91       	lpm	r26, Z+
    7968:	25 91       	lpm	r18, Z+
    796a:	35 91       	lpm	r19, Z+
    796c:	45 91       	lpm	r20, Z+
    796e:	55 91       	lpm	r21, Z+
    7970:	a6 f3       	brts	.-24     	; 0x795a <__fp_powser+0x16>
    7972:	ef 01       	movw	r28, r30
    7974:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__addsf3x>
    7978:	fe 01       	movw	r30, r28
    797a:	97 01       	movw	r18, r14
    797c:	a8 01       	movw	r20, r16
    797e:	da 94       	dec	r13
    7980:	69 f7       	brne	.-38     	; 0x795c <__fp_powser+0x18>
    7982:	df 90       	pop	r13
    7984:	ef 90       	pop	r14
    7986:	ff 90       	pop	r15
    7988:	0f 91       	pop	r16
    798a:	1f 91       	pop	r17
    798c:	cf 91       	pop	r28
    798e:	df 91       	pop	r29
    7990:	08 95       	ret

00007992 <__divmodhi4>:
    7992:	97 fb       	bst	r25, 7
    7994:	07 2e       	mov	r0, r23
    7996:	16 f4       	brtc	.+4      	; 0x799c <__divmodhi4+0xa>
    7998:	00 94       	com	r0
    799a:	07 d0       	rcall	.+14     	; 0x79aa <__divmodhi4_neg1>
    799c:	77 fd       	sbrc	r23, 7
    799e:	09 d0       	rcall	.+18     	; 0x79b2 <__divmodhi4_neg2>
    79a0:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <__udivmodhi4>
    79a4:	07 fc       	sbrc	r0, 7
    79a6:	05 d0       	rcall	.+10     	; 0x79b2 <__divmodhi4_neg2>
    79a8:	3e f4       	brtc	.+14     	; 0x79b8 <__divmodhi4_exit>

000079aa <__divmodhi4_neg1>:
    79aa:	90 95       	com	r25
    79ac:	81 95       	neg	r24
    79ae:	9f 4f       	sbci	r25, 0xFF	; 255
    79b0:	08 95       	ret

000079b2 <__divmodhi4_neg2>:
    79b2:	70 95       	com	r23
    79b4:	61 95       	neg	r22
    79b6:	7f 4f       	sbci	r23, 0xFF	; 255

000079b8 <__divmodhi4_exit>:
    79b8:	08 95       	ret

000079ba <__udivmodsi4>:
    79ba:	a1 e2       	ldi	r26, 0x21	; 33
    79bc:	1a 2e       	mov	r1, r26
    79be:	aa 1b       	sub	r26, r26
    79c0:	bb 1b       	sub	r27, r27
    79c2:	fd 01       	movw	r30, r26
    79c4:	0d c0       	rjmp	.+26     	; 0x79e0 <__udivmodsi4_ep>

000079c6 <__udivmodsi4_loop>:
    79c6:	aa 1f       	adc	r26, r26
    79c8:	bb 1f       	adc	r27, r27
    79ca:	ee 1f       	adc	r30, r30
    79cc:	ff 1f       	adc	r31, r31
    79ce:	a2 17       	cp	r26, r18
    79d0:	b3 07       	cpc	r27, r19
    79d2:	e4 07       	cpc	r30, r20
    79d4:	f5 07       	cpc	r31, r21
    79d6:	20 f0       	brcs	.+8      	; 0x79e0 <__udivmodsi4_ep>
    79d8:	a2 1b       	sub	r26, r18
    79da:	b3 0b       	sbc	r27, r19
    79dc:	e4 0b       	sbc	r30, r20
    79de:	f5 0b       	sbc	r31, r21

000079e0 <__udivmodsi4_ep>:
    79e0:	66 1f       	adc	r22, r22
    79e2:	77 1f       	adc	r23, r23
    79e4:	88 1f       	adc	r24, r24
    79e6:	99 1f       	adc	r25, r25
    79e8:	1a 94       	dec	r1
    79ea:	69 f7       	brne	.-38     	; 0x79c6 <__udivmodsi4_loop>
    79ec:	60 95       	com	r22
    79ee:	70 95       	com	r23
    79f0:	80 95       	com	r24
    79f2:	90 95       	com	r25
    79f4:	9b 01       	movw	r18, r22
    79f6:	ac 01       	movw	r20, r24
    79f8:	bd 01       	movw	r22, r26
    79fa:	cf 01       	movw	r24, r30
    79fc:	08 95       	ret

000079fe <__tablejump2__>:
    79fe:	ee 0f       	add	r30, r30
    7a00:	ff 1f       	adc	r31, r31
    7a02:	00 24       	eor	r0, r0
    7a04:	00 1c       	adc	r0, r0
    7a06:	0b be       	out	0x3b, r0	; 59
    7a08:	07 90       	elpm	r0, Z+
    7a0a:	f6 91       	elpm	r31, Z
    7a0c:	e0 2d       	mov	r30, r0
    7a0e:	09 94       	ijmp

00007a10 <__muluhisi3>:
    7a10:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <__umulhisi3>
    7a14:	a5 9f       	mul	r26, r21
    7a16:	90 0d       	add	r25, r0
    7a18:	b4 9f       	mul	r27, r20
    7a1a:	90 0d       	add	r25, r0
    7a1c:	a4 9f       	mul	r26, r20
    7a1e:	80 0d       	add	r24, r0
    7a20:	91 1d       	adc	r25, r1
    7a22:	11 24       	eor	r1, r1
    7a24:	08 95       	ret

00007a26 <__udivmodhi4>:
    7a26:	aa 1b       	sub	r26, r26
    7a28:	bb 1b       	sub	r27, r27
    7a2a:	51 e1       	ldi	r21, 0x11	; 17
    7a2c:	07 c0       	rjmp	.+14     	; 0x7a3c <__udivmodhi4_ep>

00007a2e <__udivmodhi4_loop>:
    7a2e:	aa 1f       	adc	r26, r26
    7a30:	bb 1f       	adc	r27, r27
    7a32:	a6 17       	cp	r26, r22
    7a34:	b7 07       	cpc	r27, r23
    7a36:	10 f0       	brcs	.+4      	; 0x7a3c <__udivmodhi4_ep>
    7a38:	a6 1b       	sub	r26, r22
    7a3a:	b7 0b       	sbc	r27, r23

00007a3c <__udivmodhi4_ep>:
    7a3c:	88 1f       	adc	r24, r24
    7a3e:	99 1f       	adc	r25, r25
    7a40:	5a 95       	dec	r21
    7a42:	a9 f7       	brne	.-22     	; 0x7a2e <__udivmodhi4_loop>
    7a44:	80 95       	com	r24
    7a46:	90 95       	com	r25
    7a48:	bc 01       	movw	r22, r24
    7a4a:	cd 01       	movw	r24, r26
    7a4c:	08 95       	ret

00007a4e <__umulhisi3>:
    7a4e:	a2 9f       	mul	r26, r18
    7a50:	b0 01       	movw	r22, r0
    7a52:	b3 9f       	mul	r27, r19
    7a54:	c0 01       	movw	r24, r0
    7a56:	a3 9f       	mul	r26, r19
    7a58:	70 0d       	add	r23, r0
    7a5a:	81 1d       	adc	r24, r1
    7a5c:	11 24       	eor	r1, r1
    7a5e:	91 1d       	adc	r25, r1
    7a60:	b2 9f       	mul	r27, r18
    7a62:	70 0d       	add	r23, r0
    7a64:	81 1d       	adc	r24, r1
    7a66:	11 24       	eor	r1, r1
    7a68:	91 1d       	adc	r25, r1
    7a6a:	08 95       	ret

00007a6c <memcpy>:
    7a6c:	fb 01       	movw	r30, r22
    7a6e:	dc 01       	movw	r26, r24
    7a70:	02 c0       	rjmp	.+4      	; 0x7a76 <memcpy+0xa>
    7a72:	01 90       	ld	r0, Z+
    7a74:	0d 92       	st	X+, r0
    7a76:	41 50       	subi	r20, 0x01	; 1
    7a78:	50 40       	sbci	r21, 0x00	; 0
    7a7a:	d8 f7       	brcc	.-10     	; 0x7a72 <memcpy+0x6>
    7a7c:	08 95       	ret

00007a7e <memset>:
    7a7e:	dc 01       	movw	r26, r24
    7a80:	01 c0       	rjmp	.+2      	; 0x7a84 <memset+0x6>
    7a82:	6d 93       	st	X+, r22
    7a84:	41 50       	subi	r20, 0x01	; 1
    7a86:	50 40       	sbci	r21, 0x00	; 0
    7a88:	e0 f7       	brcc	.-8      	; 0x7a82 <memset+0x4>
    7a8a:	08 95       	ret

00007a8c <strcat>:
    7a8c:	fb 01       	movw	r30, r22
    7a8e:	dc 01       	movw	r26, r24
    7a90:	0d 90       	ld	r0, X+
    7a92:	00 20       	and	r0, r0
    7a94:	e9 f7       	brne	.-6      	; 0x7a90 <strcat+0x4>
    7a96:	11 97       	sbiw	r26, 0x01	; 1
    7a98:	01 90       	ld	r0, Z+
    7a9a:	0d 92       	st	X+, r0
    7a9c:	00 20       	and	r0, r0
    7a9e:	e1 f7       	brne	.-8      	; 0x7a98 <strcat+0xc>
    7aa0:	08 95       	ret

00007aa2 <strcpy>:
    7aa2:	fb 01       	movw	r30, r22
    7aa4:	dc 01       	movw	r26, r24
    7aa6:	01 90       	ld	r0, Z+
    7aa8:	0d 92       	st	X+, r0
    7aaa:	00 20       	and	r0, r0
    7aac:	e1 f7       	brne	.-8      	; 0x7aa6 <strcpy+0x4>
    7aae:	08 95       	ret

00007ab0 <strncmp>:
    7ab0:	fb 01       	movw	r30, r22
    7ab2:	dc 01       	movw	r26, r24
    7ab4:	41 50       	subi	r20, 0x01	; 1
    7ab6:	50 40       	sbci	r21, 0x00	; 0
    7ab8:	30 f0       	brcs	.+12     	; 0x7ac6 <strncmp+0x16>
    7aba:	8d 91       	ld	r24, X+
    7abc:	01 90       	ld	r0, Z+
    7abe:	80 19       	sub	r24, r0
    7ac0:	19 f4       	brne	.+6      	; 0x7ac8 <strncmp+0x18>
    7ac2:	00 20       	and	r0, r0
    7ac4:	b9 f7       	brne	.-18     	; 0x7ab4 <strncmp+0x4>
    7ac6:	88 1b       	sub	r24, r24
    7ac8:	99 0b       	sbc	r25, r25
    7aca:	08 95       	ret

00007acc <sprintf>:
    7acc:	0f 93       	push	r16
    7ace:	1f 93       	push	r17
    7ad0:	cf 93       	push	r28
    7ad2:	df 93       	push	r29
    7ad4:	cd b7       	in	r28, 0x3d	; 61
    7ad6:	de b7       	in	r29, 0x3e	; 62
    7ad8:	2e 97       	sbiw	r28, 0x0e	; 14
    7ada:	cd bf       	out	0x3d, r28	; 61
    7adc:	de bf       	out	0x3e, r29	; 62
    7ade:	0d 89       	ldd	r16, Y+21	; 0x15
    7ae0:	1e 89       	ldd	r17, Y+22	; 0x16
    7ae2:	86 e0       	ldi	r24, 0x06	; 6
    7ae4:	8c 83       	std	Y+4, r24	; 0x04
    7ae6:	09 83       	std	Y+1, r16	; 0x01
    7ae8:	1a 83       	std	Y+2, r17	; 0x02
    7aea:	8f ef       	ldi	r24, 0xFF	; 255
    7aec:	9f e7       	ldi	r25, 0x7F	; 127
    7aee:	8d 83       	std	Y+5, r24	; 0x05
    7af0:	9e 83       	std	Y+6, r25	; 0x06
    7af2:	ae 01       	movw	r20, r28
    7af4:	47 5e       	subi	r20, 0xE7	; 231
    7af6:	5f 4f       	sbci	r21, 0xFF	; 255
    7af8:	6f 89       	ldd	r22, Y+23	; 0x17
    7afa:	78 8d       	ldd	r23, Y+24	; 0x18
    7afc:	ce 01       	movw	r24, r28
    7afe:	01 96       	adiw	r24, 0x01	; 1
    7b00:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <vfprintf>
    7b04:	ef 81       	ldd	r30, Y+7	; 0x07
    7b06:	f8 85       	ldd	r31, Y+8	; 0x08
    7b08:	e0 0f       	add	r30, r16
    7b0a:	f1 1f       	adc	r31, r17
    7b0c:	10 82       	st	Z, r1
    7b0e:	2e 96       	adiw	r28, 0x0e	; 14
    7b10:	cd bf       	out	0x3d, r28	; 61
    7b12:	de bf       	out	0x3e, r29	; 62
    7b14:	df 91       	pop	r29
    7b16:	cf 91       	pop	r28
    7b18:	1f 91       	pop	r17
    7b1a:	0f 91       	pop	r16
    7b1c:	08 95       	ret

00007b1e <sscanf>:
    7b1e:	cf 93       	push	r28
    7b20:	df 93       	push	r29
    7b22:	cd b7       	in	r28, 0x3d	; 61
    7b24:	de b7       	in	r29, 0x3e	; 62
    7b26:	2e 97       	sbiw	r28, 0x0e	; 14
    7b28:	cd bf       	out	0x3d, r28	; 61
    7b2a:	de bf       	out	0x3e, r29	; 62
    7b2c:	85 e0       	ldi	r24, 0x05	; 5
    7b2e:	8c 83       	std	Y+4, r24	; 0x04
    7b30:	8b 89       	ldd	r24, Y+19	; 0x13
    7b32:	9c 89       	ldd	r25, Y+20	; 0x14
    7b34:	89 83       	std	Y+1, r24	; 0x01
    7b36:	9a 83       	std	Y+2, r25	; 0x02
    7b38:	ae 01       	movw	r20, r28
    7b3a:	49 5e       	subi	r20, 0xE9	; 233
    7b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    7b3e:	6d 89       	ldd	r22, Y+21	; 0x15
    7b40:	7e 89       	ldd	r23, Y+22	; 0x16
    7b42:	ce 01       	movw	r24, r28
    7b44:	01 96       	adiw	r24, 0x01	; 1
    7b46:	0e 94 68 41 	call	0x82d0	; 0x82d0 <vfscanf>
    7b4a:	2e 96       	adiw	r28, 0x0e	; 14
    7b4c:	cd bf       	out	0x3d, r28	; 61
    7b4e:	de bf       	out	0x3e, r29	; 62
    7b50:	df 91       	pop	r29
    7b52:	cf 91       	pop	r28
    7b54:	08 95       	ret

00007b56 <vfprintf>:
    7b56:	2f 92       	push	r2
    7b58:	3f 92       	push	r3
    7b5a:	4f 92       	push	r4
    7b5c:	5f 92       	push	r5
    7b5e:	6f 92       	push	r6
    7b60:	7f 92       	push	r7
    7b62:	8f 92       	push	r8
    7b64:	9f 92       	push	r9
    7b66:	af 92       	push	r10
    7b68:	bf 92       	push	r11
    7b6a:	cf 92       	push	r12
    7b6c:	df 92       	push	r13
    7b6e:	ef 92       	push	r14
    7b70:	ff 92       	push	r15
    7b72:	0f 93       	push	r16
    7b74:	1f 93       	push	r17
    7b76:	cf 93       	push	r28
    7b78:	df 93       	push	r29
    7b7a:	cd b7       	in	r28, 0x3d	; 61
    7b7c:	de b7       	in	r29, 0x3e	; 62
    7b7e:	2b 97       	sbiw	r28, 0x0b	; 11
    7b80:	cd bf       	out	0x3d, r28	; 61
    7b82:	de bf       	out	0x3e, r29	; 62
    7b84:	6c 01       	movw	r12, r24
    7b86:	7b 01       	movw	r14, r22
    7b88:	8a 01       	movw	r16, r20
    7b8a:	fc 01       	movw	r30, r24
    7b8c:	16 82       	std	Z+6, r1	; 0x06
    7b8e:	17 82       	std	Z+7, r1	; 0x07
    7b90:	83 81       	ldd	r24, Z+3	; 0x03
    7b92:	81 ff       	sbrs	r24, 1
    7b94:	cc c1       	rjmp	.+920    	; 0x7f2e <vfprintf+0x3d8>
    7b96:	ce 01       	movw	r24, r28
    7b98:	01 96       	adiw	r24, 0x01	; 1
    7b9a:	3c 01       	movw	r6, r24
    7b9c:	f6 01       	movw	r30, r12
    7b9e:	93 81       	ldd	r25, Z+3	; 0x03
    7ba0:	f7 01       	movw	r30, r14
    7ba2:	93 fd       	sbrc	r25, 3
    7ba4:	85 91       	lpm	r24, Z+
    7ba6:	93 ff       	sbrs	r25, 3
    7ba8:	81 91       	ld	r24, Z+
    7baa:	7f 01       	movw	r14, r30
    7bac:	88 23       	and	r24, r24
    7bae:	09 f4       	brne	.+2      	; 0x7bb2 <vfprintf+0x5c>
    7bb0:	ba c1       	rjmp	.+884    	; 0x7f26 <vfprintf+0x3d0>
    7bb2:	85 32       	cpi	r24, 0x25	; 37
    7bb4:	39 f4       	brne	.+14     	; 0x7bc4 <vfprintf+0x6e>
    7bb6:	93 fd       	sbrc	r25, 3
    7bb8:	85 91       	lpm	r24, Z+
    7bba:	93 ff       	sbrs	r25, 3
    7bbc:	81 91       	ld	r24, Z+
    7bbe:	7f 01       	movw	r14, r30
    7bc0:	85 32       	cpi	r24, 0x25	; 37
    7bc2:	29 f4       	brne	.+10     	; 0x7bce <vfprintf+0x78>
    7bc4:	b6 01       	movw	r22, r12
    7bc6:	90 e0       	ldi	r25, 0x00	; 0
    7bc8:	0e 94 f5 42 	call	0x85ea	; 0x85ea <fputc>
    7bcc:	e7 cf       	rjmp	.-50     	; 0x7b9c <vfprintf+0x46>
    7bce:	91 2c       	mov	r9, r1
    7bd0:	21 2c       	mov	r2, r1
    7bd2:	31 2c       	mov	r3, r1
    7bd4:	ff e1       	ldi	r31, 0x1F	; 31
    7bd6:	f3 15       	cp	r31, r3
    7bd8:	d8 f0       	brcs	.+54     	; 0x7c10 <vfprintf+0xba>
    7bda:	8b 32       	cpi	r24, 0x2B	; 43
    7bdc:	79 f0       	breq	.+30     	; 0x7bfc <vfprintf+0xa6>
    7bde:	38 f4       	brcc	.+14     	; 0x7bee <vfprintf+0x98>
    7be0:	80 32       	cpi	r24, 0x20	; 32
    7be2:	79 f0       	breq	.+30     	; 0x7c02 <vfprintf+0xac>
    7be4:	83 32       	cpi	r24, 0x23	; 35
    7be6:	a1 f4       	brne	.+40     	; 0x7c10 <vfprintf+0xba>
    7be8:	23 2d       	mov	r18, r3
    7bea:	20 61       	ori	r18, 0x10	; 16
    7bec:	1d c0       	rjmp	.+58     	; 0x7c28 <vfprintf+0xd2>
    7bee:	8d 32       	cpi	r24, 0x2D	; 45
    7bf0:	61 f0       	breq	.+24     	; 0x7c0a <vfprintf+0xb4>
    7bf2:	80 33       	cpi	r24, 0x30	; 48
    7bf4:	69 f4       	brne	.+26     	; 0x7c10 <vfprintf+0xba>
    7bf6:	23 2d       	mov	r18, r3
    7bf8:	21 60       	ori	r18, 0x01	; 1
    7bfa:	16 c0       	rjmp	.+44     	; 0x7c28 <vfprintf+0xd2>
    7bfc:	83 2d       	mov	r24, r3
    7bfe:	82 60       	ori	r24, 0x02	; 2
    7c00:	38 2e       	mov	r3, r24
    7c02:	e3 2d       	mov	r30, r3
    7c04:	e4 60       	ori	r30, 0x04	; 4
    7c06:	3e 2e       	mov	r3, r30
    7c08:	2a c0       	rjmp	.+84     	; 0x7c5e <vfprintf+0x108>
    7c0a:	f3 2d       	mov	r31, r3
    7c0c:	f8 60       	ori	r31, 0x08	; 8
    7c0e:	1d c0       	rjmp	.+58     	; 0x7c4a <vfprintf+0xf4>
    7c10:	37 fc       	sbrc	r3, 7
    7c12:	2d c0       	rjmp	.+90     	; 0x7c6e <vfprintf+0x118>
    7c14:	20 ed       	ldi	r18, 0xD0	; 208
    7c16:	28 0f       	add	r18, r24
    7c18:	2a 30       	cpi	r18, 0x0A	; 10
    7c1a:	40 f0       	brcs	.+16     	; 0x7c2c <vfprintf+0xd6>
    7c1c:	8e 32       	cpi	r24, 0x2E	; 46
    7c1e:	b9 f4       	brne	.+46     	; 0x7c4e <vfprintf+0xf8>
    7c20:	36 fc       	sbrc	r3, 6
    7c22:	81 c1       	rjmp	.+770    	; 0x7f26 <vfprintf+0x3d0>
    7c24:	23 2d       	mov	r18, r3
    7c26:	20 64       	ori	r18, 0x40	; 64
    7c28:	32 2e       	mov	r3, r18
    7c2a:	19 c0       	rjmp	.+50     	; 0x7c5e <vfprintf+0x108>
    7c2c:	36 fe       	sbrs	r3, 6
    7c2e:	06 c0       	rjmp	.+12     	; 0x7c3c <vfprintf+0xe6>
    7c30:	8a e0       	ldi	r24, 0x0A	; 10
    7c32:	98 9e       	mul	r9, r24
    7c34:	20 0d       	add	r18, r0
    7c36:	11 24       	eor	r1, r1
    7c38:	92 2e       	mov	r9, r18
    7c3a:	11 c0       	rjmp	.+34     	; 0x7c5e <vfprintf+0x108>
    7c3c:	ea e0       	ldi	r30, 0x0A	; 10
    7c3e:	2e 9e       	mul	r2, r30
    7c40:	20 0d       	add	r18, r0
    7c42:	11 24       	eor	r1, r1
    7c44:	22 2e       	mov	r2, r18
    7c46:	f3 2d       	mov	r31, r3
    7c48:	f0 62       	ori	r31, 0x20	; 32
    7c4a:	3f 2e       	mov	r3, r31
    7c4c:	08 c0       	rjmp	.+16     	; 0x7c5e <vfprintf+0x108>
    7c4e:	8c 36       	cpi	r24, 0x6C	; 108
    7c50:	21 f4       	brne	.+8      	; 0x7c5a <vfprintf+0x104>
    7c52:	83 2d       	mov	r24, r3
    7c54:	80 68       	ori	r24, 0x80	; 128
    7c56:	38 2e       	mov	r3, r24
    7c58:	02 c0       	rjmp	.+4      	; 0x7c5e <vfprintf+0x108>
    7c5a:	88 36       	cpi	r24, 0x68	; 104
    7c5c:	41 f4       	brne	.+16     	; 0x7c6e <vfprintf+0x118>
    7c5e:	f7 01       	movw	r30, r14
    7c60:	93 fd       	sbrc	r25, 3
    7c62:	85 91       	lpm	r24, Z+
    7c64:	93 ff       	sbrs	r25, 3
    7c66:	81 91       	ld	r24, Z+
    7c68:	7f 01       	movw	r14, r30
    7c6a:	81 11       	cpse	r24, r1
    7c6c:	b3 cf       	rjmp	.-154    	; 0x7bd4 <vfprintf+0x7e>
    7c6e:	98 2f       	mov	r25, r24
    7c70:	9f 7d       	andi	r25, 0xDF	; 223
    7c72:	95 54       	subi	r25, 0x45	; 69
    7c74:	93 30       	cpi	r25, 0x03	; 3
    7c76:	28 f4       	brcc	.+10     	; 0x7c82 <vfprintf+0x12c>
    7c78:	0c 5f       	subi	r16, 0xFC	; 252
    7c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    7c7c:	9f e3       	ldi	r25, 0x3F	; 63
    7c7e:	99 83       	std	Y+1, r25	; 0x01
    7c80:	0d c0       	rjmp	.+26     	; 0x7c9c <vfprintf+0x146>
    7c82:	83 36       	cpi	r24, 0x63	; 99
    7c84:	31 f0       	breq	.+12     	; 0x7c92 <vfprintf+0x13c>
    7c86:	83 37       	cpi	r24, 0x73	; 115
    7c88:	71 f0       	breq	.+28     	; 0x7ca6 <vfprintf+0x150>
    7c8a:	83 35       	cpi	r24, 0x53	; 83
    7c8c:	09 f0       	breq	.+2      	; 0x7c90 <vfprintf+0x13a>
    7c8e:	59 c0       	rjmp	.+178    	; 0x7d42 <vfprintf+0x1ec>
    7c90:	21 c0       	rjmp	.+66     	; 0x7cd4 <vfprintf+0x17e>
    7c92:	f8 01       	movw	r30, r16
    7c94:	80 81       	ld	r24, Z
    7c96:	89 83       	std	Y+1, r24	; 0x01
    7c98:	0e 5f       	subi	r16, 0xFE	; 254
    7c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    7c9c:	88 24       	eor	r8, r8
    7c9e:	83 94       	inc	r8
    7ca0:	91 2c       	mov	r9, r1
    7ca2:	53 01       	movw	r10, r6
    7ca4:	13 c0       	rjmp	.+38     	; 0x7ccc <vfprintf+0x176>
    7ca6:	28 01       	movw	r4, r16
    7ca8:	f2 e0       	ldi	r31, 0x02	; 2
    7caa:	4f 0e       	add	r4, r31
    7cac:	51 1c       	adc	r5, r1
    7cae:	f8 01       	movw	r30, r16
    7cb0:	a0 80       	ld	r10, Z
    7cb2:	b1 80       	ldd	r11, Z+1	; 0x01
    7cb4:	36 fe       	sbrs	r3, 6
    7cb6:	03 c0       	rjmp	.+6      	; 0x7cbe <vfprintf+0x168>
    7cb8:	69 2d       	mov	r22, r9
    7cba:	70 e0       	ldi	r23, 0x00	; 0
    7cbc:	02 c0       	rjmp	.+4      	; 0x7cc2 <vfprintf+0x16c>
    7cbe:	6f ef       	ldi	r22, 0xFF	; 255
    7cc0:	7f ef       	ldi	r23, 0xFF	; 255
    7cc2:	c5 01       	movw	r24, r10
    7cc4:	0e 94 ac 42 	call	0x8558	; 0x8558 <strnlen>
    7cc8:	4c 01       	movw	r8, r24
    7cca:	82 01       	movw	r16, r4
    7ccc:	f3 2d       	mov	r31, r3
    7cce:	ff 77       	andi	r31, 0x7F	; 127
    7cd0:	3f 2e       	mov	r3, r31
    7cd2:	16 c0       	rjmp	.+44     	; 0x7d00 <vfprintf+0x1aa>
    7cd4:	28 01       	movw	r4, r16
    7cd6:	22 e0       	ldi	r18, 0x02	; 2
    7cd8:	42 0e       	add	r4, r18
    7cda:	51 1c       	adc	r5, r1
    7cdc:	f8 01       	movw	r30, r16
    7cde:	a0 80       	ld	r10, Z
    7ce0:	b1 80       	ldd	r11, Z+1	; 0x01
    7ce2:	36 fe       	sbrs	r3, 6
    7ce4:	03 c0       	rjmp	.+6      	; 0x7cec <vfprintf+0x196>
    7ce6:	69 2d       	mov	r22, r9
    7ce8:	70 e0       	ldi	r23, 0x00	; 0
    7cea:	02 c0       	rjmp	.+4      	; 0x7cf0 <vfprintf+0x19a>
    7cec:	6f ef       	ldi	r22, 0xFF	; 255
    7cee:	7f ef       	ldi	r23, 0xFF	; 255
    7cf0:	c5 01       	movw	r24, r10
    7cf2:	0e 94 a1 42 	call	0x8542	; 0x8542 <strnlen_P>
    7cf6:	4c 01       	movw	r8, r24
    7cf8:	f3 2d       	mov	r31, r3
    7cfa:	f0 68       	ori	r31, 0x80	; 128
    7cfc:	3f 2e       	mov	r3, r31
    7cfe:	82 01       	movw	r16, r4
    7d00:	33 fc       	sbrc	r3, 3
    7d02:	1b c0       	rjmp	.+54     	; 0x7d3a <vfprintf+0x1e4>
    7d04:	82 2d       	mov	r24, r2
    7d06:	90 e0       	ldi	r25, 0x00	; 0
    7d08:	88 16       	cp	r8, r24
    7d0a:	99 06       	cpc	r9, r25
    7d0c:	b0 f4       	brcc	.+44     	; 0x7d3a <vfprintf+0x1e4>
    7d0e:	b6 01       	movw	r22, r12
    7d10:	80 e2       	ldi	r24, 0x20	; 32
    7d12:	90 e0       	ldi	r25, 0x00	; 0
    7d14:	0e 94 f5 42 	call	0x85ea	; 0x85ea <fputc>
    7d18:	2a 94       	dec	r2
    7d1a:	f4 cf       	rjmp	.-24     	; 0x7d04 <vfprintf+0x1ae>
    7d1c:	f5 01       	movw	r30, r10
    7d1e:	37 fc       	sbrc	r3, 7
    7d20:	85 91       	lpm	r24, Z+
    7d22:	37 fe       	sbrs	r3, 7
    7d24:	81 91       	ld	r24, Z+
    7d26:	5f 01       	movw	r10, r30
    7d28:	b6 01       	movw	r22, r12
    7d2a:	90 e0       	ldi	r25, 0x00	; 0
    7d2c:	0e 94 f5 42 	call	0x85ea	; 0x85ea <fputc>
    7d30:	21 10       	cpse	r2, r1
    7d32:	2a 94       	dec	r2
    7d34:	21 e0       	ldi	r18, 0x01	; 1
    7d36:	82 1a       	sub	r8, r18
    7d38:	91 08       	sbc	r9, r1
    7d3a:	81 14       	cp	r8, r1
    7d3c:	91 04       	cpc	r9, r1
    7d3e:	71 f7       	brne	.-36     	; 0x7d1c <vfprintf+0x1c6>
    7d40:	e8 c0       	rjmp	.+464    	; 0x7f12 <vfprintf+0x3bc>
    7d42:	84 36       	cpi	r24, 0x64	; 100
    7d44:	11 f0       	breq	.+4      	; 0x7d4a <vfprintf+0x1f4>
    7d46:	89 36       	cpi	r24, 0x69	; 105
    7d48:	41 f5       	brne	.+80     	; 0x7d9a <vfprintf+0x244>
    7d4a:	f8 01       	movw	r30, r16
    7d4c:	37 fe       	sbrs	r3, 7
    7d4e:	07 c0       	rjmp	.+14     	; 0x7d5e <vfprintf+0x208>
    7d50:	60 81       	ld	r22, Z
    7d52:	71 81       	ldd	r23, Z+1	; 0x01
    7d54:	82 81       	ldd	r24, Z+2	; 0x02
    7d56:	93 81       	ldd	r25, Z+3	; 0x03
    7d58:	0c 5f       	subi	r16, 0xFC	; 252
    7d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    7d5c:	08 c0       	rjmp	.+16     	; 0x7d6e <vfprintf+0x218>
    7d5e:	60 81       	ld	r22, Z
    7d60:	71 81       	ldd	r23, Z+1	; 0x01
    7d62:	07 2e       	mov	r0, r23
    7d64:	00 0c       	add	r0, r0
    7d66:	88 0b       	sbc	r24, r24
    7d68:	99 0b       	sbc	r25, r25
    7d6a:	0e 5f       	subi	r16, 0xFE	; 254
    7d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    7d6e:	f3 2d       	mov	r31, r3
    7d70:	ff 76       	andi	r31, 0x6F	; 111
    7d72:	3f 2e       	mov	r3, r31
    7d74:	97 ff       	sbrs	r25, 7
    7d76:	09 c0       	rjmp	.+18     	; 0x7d8a <vfprintf+0x234>
    7d78:	90 95       	com	r25
    7d7a:	80 95       	com	r24
    7d7c:	70 95       	com	r23
    7d7e:	61 95       	neg	r22
    7d80:	7f 4f       	sbci	r23, 0xFF	; 255
    7d82:	8f 4f       	sbci	r24, 0xFF	; 255
    7d84:	9f 4f       	sbci	r25, 0xFF	; 255
    7d86:	f0 68       	ori	r31, 0x80	; 128
    7d88:	3f 2e       	mov	r3, r31
    7d8a:	2a e0       	ldi	r18, 0x0A	; 10
    7d8c:	30 e0       	ldi	r19, 0x00	; 0
    7d8e:	a3 01       	movw	r20, r6
    7d90:	0e 94 4a 43 	call	0x8694	; 0x8694 <__ultoa_invert>
    7d94:	88 2e       	mov	r8, r24
    7d96:	86 18       	sub	r8, r6
    7d98:	45 c0       	rjmp	.+138    	; 0x7e24 <vfprintf+0x2ce>
    7d9a:	85 37       	cpi	r24, 0x75	; 117
    7d9c:	31 f4       	brne	.+12     	; 0x7daa <vfprintf+0x254>
    7d9e:	23 2d       	mov	r18, r3
    7da0:	2f 7e       	andi	r18, 0xEF	; 239
    7da2:	b2 2e       	mov	r11, r18
    7da4:	2a e0       	ldi	r18, 0x0A	; 10
    7da6:	30 e0       	ldi	r19, 0x00	; 0
    7da8:	25 c0       	rjmp	.+74     	; 0x7df4 <vfprintf+0x29e>
    7daa:	93 2d       	mov	r25, r3
    7dac:	99 7f       	andi	r25, 0xF9	; 249
    7dae:	b9 2e       	mov	r11, r25
    7db0:	8f 36       	cpi	r24, 0x6F	; 111
    7db2:	c1 f0       	breq	.+48     	; 0x7de4 <vfprintf+0x28e>
    7db4:	18 f4       	brcc	.+6      	; 0x7dbc <vfprintf+0x266>
    7db6:	88 35       	cpi	r24, 0x58	; 88
    7db8:	79 f0       	breq	.+30     	; 0x7dd8 <vfprintf+0x282>
    7dba:	b5 c0       	rjmp	.+362    	; 0x7f26 <vfprintf+0x3d0>
    7dbc:	80 37       	cpi	r24, 0x70	; 112
    7dbe:	19 f0       	breq	.+6      	; 0x7dc6 <vfprintf+0x270>
    7dc0:	88 37       	cpi	r24, 0x78	; 120
    7dc2:	21 f0       	breq	.+8      	; 0x7dcc <vfprintf+0x276>
    7dc4:	b0 c0       	rjmp	.+352    	; 0x7f26 <vfprintf+0x3d0>
    7dc6:	e9 2f       	mov	r30, r25
    7dc8:	e0 61       	ori	r30, 0x10	; 16
    7dca:	be 2e       	mov	r11, r30
    7dcc:	b4 fe       	sbrs	r11, 4
    7dce:	0d c0       	rjmp	.+26     	; 0x7dea <vfprintf+0x294>
    7dd0:	fb 2d       	mov	r31, r11
    7dd2:	f4 60       	ori	r31, 0x04	; 4
    7dd4:	bf 2e       	mov	r11, r31
    7dd6:	09 c0       	rjmp	.+18     	; 0x7dea <vfprintf+0x294>
    7dd8:	34 fe       	sbrs	r3, 4
    7dda:	0a c0       	rjmp	.+20     	; 0x7df0 <vfprintf+0x29a>
    7ddc:	29 2f       	mov	r18, r25
    7dde:	26 60       	ori	r18, 0x06	; 6
    7de0:	b2 2e       	mov	r11, r18
    7de2:	06 c0       	rjmp	.+12     	; 0x7df0 <vfprintf+0x29a>
    7de4:	28 e0       	ldi	r18, 0x08	; 8
    7de6:	30 e0       	ldi	r19, 0x00	; 0
    7de8:	05 c0       	rjmp	.+10     	; 0x7df4 <vfprintf+0x29e>
    7dea:	20 e1       	ldi	r18, 0x10	; 16
    7dec:	30 e0       	ldi	r19, 0x00	; 0
    7dee:	02 c0       	rjmp	.+4      	; 0x7df4 <vfprintf+0x29e>
    7df0:	20 e1       	ldi	r18, 0x10	; 16
    7df2:	32 e0       	ldi	r19, 0x02	; 2
    7df4:	f8 01       	movw	r30, r16
    7df6:	b7 fe       	sbrs	r11, 7
    7df8:	07 c0       	rjmp	.+14     	; 0x7e08 <vfprintf+0x2b2>
    7dfa:	60 81       	ld	r22, Z
    7dfc:	71 81       	ldd	r23, Z+1	; 0x01
    7dfe:	82 81       	ldd	r24, Z+2	; 0x02
    7e00:	93 81       	ldd	r25, Z+3	; 0x03
    7e02:	0c 5f       	subi	r16, 0xFC	; 252
    7e04:	1f 4f       	sbci	r17, 0xFF	; 255
    7e06:	06 c0       	rjmp	.+12     	; 0x7e14 <vfprintf+0x2be>
    7e08:	60 81       	ld	r22, Z
    7e0a:	71 81       	ldd	r23, Z+1	; 0x01
    7e0c:	80 e0       	ldi	r24, 0x00	; 0
    7e0e:	90 e0       	ldi	r25, 0x00	; 0
    7e10:	0e 5f       	subi	r16, 0xFE	; 254
    7e12:	1f 4f       	sbci	r17, 0xFF	; 255
    7e14:	a3 01       	movw	r20, r6
    7e16:	0e 94 4a 43 	call	0x8694	; 0x8694 <__ultoa_invert>
    7e1a:	88 2e       	mov	r8, r24
    7e1c:	86 18       	sub	r8, r6
    7e1e:	fb 2d       	mov	r31, r11
    7e20:	ff 77       	andi	r31, 0x7F	; 127
    7e22:	3f 2e       	mov	r3, r31
    7e24:	36 fe       	sbrs	r3, 6
    7e26:	0d c0       	rjmp	.+26     	; 0x7e42 <vfprintf+0x2ec>
    7e28:	23 2d       	mov	r18, r3
    7e2a:	2e 7f       	andi	r18, 0xFE	; 254
    7e2c:	a2 2e       	mov	r10, r18
    7e2e:	89 14       	cp	r8, r9
    7e30:	58 f4       	brcc	.+22     	; 0x7e48 <vfprintf+0x2f2>
    7e32:	34 fe       	sbrs	r3, 4
    7e34:	0b c0       	rjmp	.+22     	; 0x7e4c <vfprintf+0x2f6>
    7e36:	32 fc       	sbrc	r3, 2
    7e38:	09 c0       	rjmp	.+18     	; 0x7e4c <vfprintf+0x2f6>
    7e3a:	83 2d       	mov	r24, r3
    7e3c:	8e 7e       	andi	r24, 0xEE	; 238
    7e3e:	a8 2e       	mov	r10, r24
    7e40:	05 c0       	rjmp	.+10     	; 0x7e4c <vfprintf+0x2f6>
    7e42:	b8 2c       	mov	r11, r8
    7e44:	a3 2c       	mov	r10, r3
    7e46:	03 c0       	rjmp	.+6      	; 0x7e4e <vfprintf+0x2f8>
    7e48:	b8 2c       	mov	r11, r8
    7e4a:	01 c0       	rjmp	.+2      	; 0x7e4e <vfprintf+0x2f8>
    7e4c:	b9 2c       	mov	r11, r9
    7e4e:	a4 fe       	sbrs	r10, 4
    7e50:	0f c0       	rjmp	.+30     	; 0x7e70 <vfprintf+0x31a>
    7e52:	fe 01       	movw	r30, r28
    7e54:	e8 0d       	add	r30, r8
    7e56:	f1 1d       	adc	r31, r1
    7e58:	80 81       	ld	r24, Z
    7e5a:	80 33       	cpi	r24, 0x30	; 48
    7e5c:	21 f4       	brne	.+8      	; 0x7e66 <vfprintf+0x310>
    7e5e:	9a 2d       	mov	r25, r10
    7e60:	99 7e       	andi	r25, 0xE9	; 233
    7e62:	a9 2e       	mov	r10, r25
    7e64:	09 c0       	rjmp	.+18     	; 0x7e78 <vfprintf+0x322>
    7e66:	a2 fe       	sbrs	r10, 2
    7e68:	06 c0       	rjmp	.+12     	; 0x7e76 <vfprintf+0x320>
    7e6a:	b3 94       	inc	r11
    7e6c:	b3 94       	inc	r11
    7e6e:	04 c0       	rjmp	.+8      	; 0x7e78 <vfprintf+0x322>
    7e70:	8a 2d       	mov	r24, r10
    7e72:	86 78       	andi	r24, 0x86	; 134
    7e74:	09 f0       	breq	.+2      	; 0x7e78 <vfprintf+0x322>
    7e76:	b3 94       	inc	r11
    7e78:	a3 fc       	sbrc	r10, 3
    7e7a:	11 c0       	rjmp	.+34     	; 0x7e9e <vfprintf+0x348>
    7e7c:	a0 fe       	sbrs	r10, 0
    7e7e:	06 c0       	rjmp	.+12     	; 0x7e8c <vfprintf+0x336>
    7e80:	b2 14       	cp	r11, r2
    7e82:	88 f4       	brcc	.+34     	; 0x7ea6 <vfprintf+0x350>
    7e84:	28 0c       	add	r2, r8
    7e86:	92 2c       	mov	r9, r2
    7e88:	9b 18       	sub	r9, r11
    7e8a:	0e c0       	rjmp	.+28     	; 0x7ea8 <vfprintf+0x352>
    7e8c:	b2 14       	cp	r11, r2
    7e8e:	60 f4       	brcc	.+24     	; 0x7ea8 <vfprintf+0x352>
    7e90:	b6 01       	movw	r22, r12
    7e92:	80 e2       	ldi	r24, 0x20	; 32
    7e94:	90 e0       	ldi	r25, 0x00	; 0
    7e96:	0e 94 f5 42 	call	0x85ea	; 0x85ea <fputc>
    7e9a:	b3 94       	inc	r11
    7e9c:	f7 cf       	rjmp	.-18     	; 0x7e8c <vfprintf+0x336>
    7e9e:	b2 14       	cp	r11, r2
    7ea0:	18 f4       	brcc	.+6      	; 0x7ea8 <vfprintf+0x352>
    7ea2:	2b 18       	sub	r2, r11
    7ea4:	02 c0       	rjmp	.+4      	; 0x7eaa <vfprintf+0x354>
    7ea6:	98 2c       	mov	r9, r8
    7ea8:	21 2c       	mov	r2, r1
    7eaa:	a4 fe       	sbrs	r10, 4
    7eac:	10 c0       	rjmp	.+32     	; 0x7ece <vfprintf+0x378>
    7eae:	b6 01       	movw	r22, r12
    7eb0:	80 e3       	ldi	r24, 0x30	; 48
    7eb2:	90 e0       	ldi	r25, 0x00	; 0
    7eb4:	0e 94 f5 42 	call	0x85ea	; 0x85ea <fputc>
    7eb8:	a2 fe       	sbrs	r10, 2
    7eba:	17 c0       	rjmp	.+46     	; 0x7eea <vfprintf+0x394>
    7ebc:	a1 fc       	sbrc	r10, 1
    7ebe:	03 c0       	rjmp	.+6      	; 0x7ec6 <vfprintf+0x370>
    7ec0:	88 e7       	ldi	r24, 0x78	; 120
    7ec2:	90 e0       	ldi	r25, 0x00	; 0
    7ec4:	02 c0       	rjmp	.+4      	; 0x7eca <vfprintf+0x374>
    7ec6:	88 e5       	ldi	r24, 0x58	; 88
    7ec8:	90 e0       	ldi	r25, 0x00	; 0
    7eca:	b6 01       	movw	r22, r12
    7ecc:	0c c0       	rjmp	.+24     	; 0x7ee6 <vfprintf+0x390>
    7ece:	8a 2d       	mov	r24, r10
    7ed0:	86 78       	andi	r24, 0x86	; 134
    7ed2:	59 f0       	breq	.+22     	; 0x7eea <vfprintf+0x394>
    7ed4:	a1 fe       	sbrs	r10, 1
    7ed6:	02 c0       	rjmp	.+4      	; 0x7edc <vfprintf+0x386>
    7ed8:	8b e2       	ldi	r24, 0x2B	; 43
    7eda:	01 c0       	rjmp	.+2      	; 0x7ede <vfprintf+0x388>
    7edc:	80 e2       	ldi	r24, 0x20	; 32
    7ede:	a7 fc       	sbrc	r10, 7
    7ee0:	8d e2       	ldi	r24, 0x2D	; 45
    7ee2:	b6 01       	movw	r22, r12
    7ee4:	90 e0       	ldi	r25, 0x00	; 0
    7ee6:	0e 94 f5 42 	call	0x85ea	; 0x85ea <fputc>
    7eea:	89 14       	cp	r8, r9
    7eec:	38 f4       	brcc	.+14     	; 0x7efc <vfprintf+0x3a6>
    7eee:	b6 01       	movw	r22, r12
    7ef0:	80 e3       	ldi	r24, 0x30	; 48
    7ef2:	90 e0       	ldi	r25, 0x00	; 0
    7ef4:	0e 94 f5 42 	call	0x85ea	; 0x85ea <fputc>
    7ef8:	9a 94       	dec	r9
    7efa:	f7 cf       	rjmp	.-18     	; 0x7eea <vfprintf+0x394>
    7efc:	8a 94       	dec	r8
    7efe:	f3 01       	movw	r30, r6
    7f00:	e8 0d       	add	r30, r8
    7f02:	f1 1d       	adc	r31, r1
    7f04:	80 81       	ld	r24, Z
    7f06:	b6 01       	movw	r22, r12
    7f08:	90 e0       	ldi	r25, 0x00	; 0
    7f0a:	0e 94 f5 42 	call	0x85ea	; 0x85ea <fputc>
    7f0e:	81 10       	cpse	r8, r1
    7f10:	f5 cf       	rjmp	.-22     	; 0x7efc <vfprintf+0x3a6>
    7f12:	22 20       	and	r2, r2
    7f14:	09 f4       	brne	.+2      	; 0x7f18 <vfprintf+0x3c2>
    7f16:	42 ce       	rjmp	.-892    	; 0x7b9c <vfprintf+0x46>
    7f18:	b6 01       	movw	r22, r12
    7f1a:	80 e2       	ldi	r24, 0x20	; 32
    7f1c:	90 e0       	ldi	r25, 0x00	; 0
    7f1e:	0e 94 f5 42 	call	0x85ea	; 0x85ea <fputc>
    7f22:	2a 94       	dec	r2
    7f24:	f6 cf       	rjmp	.-20     	; 0x7f12 <vfprintf+0x3bc>
    7f26:	f6 01       	movw	r30, r12
    7f28:	86 81       	ldd	r24, Z+6	; 0x06
    7f2a:	97 81       	ldd	r25, Z+7	; 0x07
    7f2c:	02 c0       	rjmp	.+4      	; 0x7f32 <vfprintf+0x3dc>
    7f2e:	8f ef       	ldi	r24, 0xFF	; 255
    7f30:	9f ef       	ldi	r25, 0xFF	; 255
    7f32:	2b 96       	adiw	r28, 0x0b	; 11
    7f34:	cd bf       	out	0x3d, r28	; 61
    7f36:	de bf       	out	0x3e, r29	; 62
    7f38:	df 91       	pop	r29
    7f3a:	cf 91       	pop	r28
    7f3c:	1f 91       	pop	r17
    7f3e:	0f 91       	pop	r16
    7f40:	ff 90       	pop	r15
    7f42:	ef 90       	pop	r14
    7f44:	df 90       	pop	r13
    7f46:	cf 90       	pop	r12
    7f48:	bf 90       	pop	r11
    7f4a:	af 90       	pop	r10
    7f4c:	9f 90       	pop	r9
    7f4e:	8f 90       	pop	r8
    7f50:	7f 90       	pop	r7
    7f52:	6f 90       	pop	r6
    7f54:	5f 90       	pop	r5
    7f56:	4f 90       	pop	r4
    7f58:	3f 90       	pop	r3
    7f5a:	2f 90       	pop	r2
    7f5c:	08 95       	ret

00007f5e <putval>:
    7f5e:	20 fd       	sbrc	r18, 0
    7f60:	09 c0       	rjmp	.+18     	; 0x7f74 <putval+0x16>
    7f62:	fc 01       	movw	r30, r24
    7f64:	23 fd       	sbrc	r18, 3
    7f66:	05 c0       	rjmp	.+10     	; 0x7f72 <putval+0x14>
    7f68:	22 ff       	sbrs	r18, 2
    7f6a:	02 c0       	rjmp	.+4      	; 0x7f70 <putval+0x12>
    7f6c:	73 83       	std	Z+3, r23	; 0x03
    7f6e:	62 83       	std	Z+2, r22	; 0x02
    7f70:	51 83       	std	Z+1, r21	; 0x01
    7f72:	40 83       	st	Z, r20
    7f74:	08 95       	ret

00007f76 <mulacc>:
    7f76:	44 fd       	sbrc	r20, 4
    7f78:	17 c0       	rjmp	.+46     	; 0x7fa8 <mulacc+0x32>
    7f7a:	46 fd       	sbrc	r20, 6
    7f7c:	17 c0       	rjmp	.+46     	; 0x7fac <mulacc+0x36>
    7f7e:	ab 01       	movw	r20, r22
    7f80:	bc 01       	movw	r22, r24
    7f82:	da 01       	movw	r26, r20
    7f84:	fb 01       	movw	r30, r22
    7f86:	aa 0f       	add	r26, r26
    7f88:	bb 1f       	adc	r27, r27
    7f8a:	ee 1f       	adc	r30, r30
    7f8c:	ff 1f       	adc	r31, r31
    7f8e:	10 94       	com	r1
    7f90:	d1 f7       	brne	.-12     	; 0x7f86 <mulacc+0x10>
    7f92:	4a 0f       	add	r20, r26
    7f94:	5b 1f       	adc	r21, r27
    7f96:	6e 1f       	adc	r22, r30
    7f98:	7f 1f       	adc	r23, r31
    7f9a:	cb 01       	movw	r24, r22
    7f9c:	ba 01       	movw	r22, r20
    7f9e:	66 0f       	add	r22, r22
    7fa0:	77 1f       	adc	r23, r23
    7fa2:	88 1f       	adc	r24, r24
    7fa4:	99 1f       	adc	r25, r25
    7fa6:	09 c0       	rjmp	.+18     	; 0x7fba <mulacc+0x44>
    7fa8:	33 e0       	ldi	r19, 0x03	; 3
    7faa:	01 c0       	rjmp	.+2      	; 0x7fae <mulacc+0x38>
    7fac:	34 e0       	ldi	r19, 0x04	; 4
    7fae:	66 0f       	add	r22, r22
    7fb0:	77 1f       	adc	r23, r23
    7fb2:	88 1f       	adc	r24, r24
    7fb4:	99 1f       	adc	r25, r25
    7fb6:	31 50       	subi	r19, 0x01	; 1
    7fb8:	d1 f7       	brne	.-12     	; 0x7fae <mulacc+0x38>
    7fba:	62 0f       	add	r22, r18
    7fbc:	71 1d       	adc	r23, r1
    7fbe:	81 1d       	adc	r24, r1
    7fc0:	91 1d       	adc	r25, r1
    7fc2:	08 95       	ret

00007fc4 <skip_spaces>:
    7fc4:	0f 93       	push	r16
    7fc6:	1f 93       	push	r17
    7fc8:	cf 93       	push	r28
    7fca:	df 93       	push	r29
    7fcc:	8c 01       	movw	r16, r24
    7fce:	c8 01       	movw	r24, r16
    7fd0:	0e 94 b7 42 	call	0x856e	; 0x856e <fgetc>
    7fd4:	ec 01       	movw	r28, r24
    7fd6:	97 fd       	sbrc	r25, 7
    7fd8:	08 c0       	rjmp	.+16     	; 0x7fea <skip_spaces+0x26>
    7fda:	0e 94 8d 42 	call	0x851a	; 0x851a <isspace>
    7fde:	89 2b       	or	r24, r25
    7fe0:	b1 f7       	brne	.-20     	; 0x7fce <skip_spaces+0xa>
    7fe2:	b8 01       	movw	r22, r16
    7fe4:	ce 01       	movw	r24, r28
    7fe6:	0e 94 31 43 	call	0x8662	; 0x8662 <ungetc>
    7fea:	ce 01       	movw	r24, r28
    7fec:	df 91       	pop	r29
    7fee:	cf 91       	pop	r28
    7ff0:	1f 91       	pop	r17
    7ff2:	0f 91       	pop	r16
    7ff4:	08 95       	ret

00007ff6 <conv_int>:
    7ff6:	8f 92       	push	r8
    7ff8:	9f 92       	push	r9
    7ffa:	af 92       	push	r10
    7ffc:	bf 92       	push	r11
    7ffe:	ef 92       	push	r14
    8000:	ff 92       	push	r15
    8002:	0f 93       	push	r16
    8004:	1f 93       	push	r17
    8006:	cf 93       	push	r28
    8008:	df 93       	push	r29
    800a:	8c 01       	movw	r16, r24
    800c:	d6 2f       	mov	r29, r22
    800e:	7a 01       	movw	r14, r20
    8010:	b2 2e       	mov	r11, r18
    8012:	0e 94 b7 42 	call	0x856e	; 0x856e <fgetc>
    8016:	9c 01       	movw	r18, r24
    8018:	33 27       	eor	r19, r19
    801a:	2b 32       	cpi	r18, 0x2B	; 43
    801c:	31 05       	cpc	r19, r1
    801e:	31 f0       	breq	.+12     	; 0x802c <__RODATA_PM_OFFSET__+0x2c>
    8020:	2d 32       	cpi	r18, 0x2D	; 45
    8022:	31 05       	cpc	r19, r1
    8024:	61 f4       	brne	.+24     	; 0x803e <__RODATA_PM_OFFSET__+0x3e>
    8026:	8b 2d       	mov	r24, r11
    8028:	80 68       	ori	r24, 0x80	; 128
    802a:	b8 2e       	mov	r11, r24
    802c:	d1 50       	subi	r29, 0x01	; 1
    802e:	11 f4       	brne	.+4      	; 0x8034 <__RODATA_PM_OFFSET__+0x34>
    8030:	80 e0       	ldi	r24, 0x00	; 0
    8032:	68 c0       	rjmp	.+208    	; 0x8104 <__RODATA_PM_OFFSET__+0x104>
    8034:	c8 01       	movw	r24, r16
    8036:	0e 94 b7 42 	call	0x856e	; 0x856e <fgetc>
    803a:	97 fd       	sbrc	r25, 7
    803c:	f9 cf       	rjmp	.-14     	; 0x8030 <__RODATA_PM_OFFSET__+0x30>
    803e:	cb 2d       	mov	r28, r11
    8040:	cd 7f       	andi	r28, 0xFD	; 253
    8042:	2b 2d       	mov	r18, r11
    8044:	20 73       	andi	r18, 0x30	; 48
    8046:	09 f5       	brne	.+66     	; 0x808a <__RODATA_PM_OFFSET__+0x8a>
    8048:	80 33       	cpi	r24, 0x30	; 48
    804a:	f9 f4       	brne	.+62     	; 0x808a <__RODATA_PM_OFFSET__+0x8a>
    804c:	aa 24       	eor	r10, r10
    804e:	aa 94       	dec	r10
    8050:	ad 0e       	add	r10, r29
    8052:	09 f4       	brne	.+2      	; 0x8056 <__RODATA_PM_OFFSET__+0x56>
    8054:	43 c0       	rjmp	.+134    	; 0x80dc <__RODATA_PM_OFFSET__+0xdc>
    8056:	c8 01       	movw	r24, r16
    8058:	0e 94 b7 42 	call	0x856e	; 0x856e <fgetc>
    805c:	97 fd       	sbrc	r25, 7
    805e:	3e c0       	rjmp	.+124    	; 0x80dc <__RODATA_PM_OFFSET__+0xdc>
    8060:	9c 01       	movw	r18, r24
    8062:	2f 7d       	andi	r18, 0xDF	; 223
    8064:	33 27       	eor	r19, r19
    8066:	28 35       	cpi	r18, 0x58	; 88
    8068:	31 05       	cpc	r19, r1
    806a:	49 f4       	brne	.+18     	; 0x807e <__RODATA_PM_OFFSET__+0x7e>
    806c:	c2 64       	ori	r28, 0x42	; 66
    806e:	d2 50       	subi	r29, 0x02	; 2
    8070:	a9 f1       	breq	.+106    	; 0x80dc <__RODATA_PM_OFFSET__+0xdc>
    8072:	c8 01       	movw	r24, r16
    8074:	0e 94 b7 42 	call	0x856e	; 0x856e <fgetc>
    8078:	97 ff       	sbrs	r25, 7
    807a:	07 c0       	rjmp	.+14     	; 0x808a <__RODATA_PM_OFFSET__+0x8a>
    807c:	2f c0       	rjmp	.+94     	; 0x80dc <__RODATA_PM_OFFSET__+0xdc>
    807e:	b6 fe       	sbrs	r11, 6
    8080:	02 c0       	rjmp	.+4      	; 0x8086 <__RODATA_PM_OFFSET__+0x86>
    8082:	c2 60       	ori	r28, 0x02	; 2
    8084:	01 c0       	rjmp	.+2      	; 0x8088 <__RODATA_PM_OFFSET__+0x88>
    8086:	c2 61       	ori	r28, 0x12	; 18
    8088:	da 2d       	mov	r29, r10
    808a:	81 2c       	mov	r8, r1
    808c:	91 2c       	mov	r9, r1
    808e:	54 01       	movw	r10, r8
    8090:	20 ed       	ldi	r18, 0xD0	; 208
    8092:	28 0f       	add	r18, r24
    8094:	28 30       	cpi	r18, 0x08	; 8
    8096:	80 f0       	brcs	.+32     	; 0x80b8 <__RODATA_PM_OFFSET__+0xb8>
    8098:	c4 ff       	sbrs	r28, 4
    809a:	04 c0       	rjmp	.+8      	; 0x80a4 <__RODATA_PM_OFFSET__+0xa4>
    809c:	b8 01       	movw	r22, r16
    809e:	0e 94 31 43 	call	0x8662	; 0x8662 <ungetc>
    80a2:	19 c0       	rjmp	.+50     	; 0x80d6 <__RODATA_PM_OFFSET__+0xd6>
    80a4:	2a 30       	cpi	r18, 0x0A	; 10
    80a6:	40 f0       	brcs	.+16     	; 0x80b8 <__RODATA_PM_OFFSET__+0xb8>
    80a8:	c6 ff       	sbrs	r28, 6
    80aa:	f8 cf       	rjmp	.-16     	; 0x809c <__RODATA_PM_OFFSET__+0x9c>
    80ac:	2f 7d       	andi	r18, 0xDF	; 223
    80ae:	3f ee       	ldi	r19, 0xEF	; 239
    80b0:	32 0f       	add	r19, r18
    80b2:	36 30       	cpi	r19, 0x06	; 6
    80b4:	98 f7       	brcc	.-26     	; 0x809c <__RODATA_PM_OFFSET__+0x9c>
    80b6:	27 50       	subi	r18, 0x07	; 7
    80b8:	4c 2f       	mov	r20, r28
    80ba:	c5 01       	movw	r24, r10
    80bc:	b4 01       	movw	r22, r8
    80be:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <mulacc>
    80c2:	4b 01       	movw	r8, r22
    80c4:	5c 01       	movw	r10, r24
    80c6:	c2 60       	ori	r28, 0x02	; 2
    80c8:	d1 50       	subi	r29, 0x01	; 1
    80ca:	59 f0       	breq	.+22     	; 0x80e2 <__RODATA_PM_OFFSET__+0xe2>
    80cc:	c8 01       	movw	r24, r16
    80ce:	0e 94 b7 42 	call	0x856e	; 0x856e <fgetc>
    80d2:	97 ff       	sbrs	r25, 7
    80d4:	dd cf       	rjmp	.-70     	; 0x8090 <__RODATA_PM_OFFSET__+0x90>
    80d6:	c1 fd       	sbrc	r28, 1
    80d8:	04 c0       	rjmp	.+8      	; 0x80e2 <__RODATA_PM_OFFSET__+0xe2>
    80da:	aa cf       	rjmp	.-172    	; 0x8030 <__RODATA_PM_OFFSET__+0x30>
    80dc:	81 2c       	mov	r8, r1
    80de:	91 2c       	mov	r9, r1
    80e0:	54 01       	movw	r10, r8
    80e2:	c7 ff       	sbrs	r28, 7
    80e4:	08 c0       	rjmp	.+16     	; 0x80f6 <__RODATA_PM_OFFSET__+0xf6>
    80e6:	b0 94       	com	r11
    80e8:	a0 94       	com	r10
    80ea:	90 94       	com	r9
    80ec:	80 94       	com	r8
    80ee:	81 1c       	adc	r8, r1
    80f0:	91 1c       	adc	r9, r1
    80f2:	a1 1c       	adc	r10, r1
    80f4:	b1 1c       	adc	r11, r1
    80f6:	2c 2f       	mov	r18, r28
    80f8:	b5 01       	movw	r22, r10
    80fa:	a4 01       	movw	r20, r8
    80fc:	c7 01       	movw	r24, r14
    80fe:	0e 94 af 3f 	call	0x7f5e	; 0x7f5e <putval>
    8102:	81 e0       	ldi	r24, 0x01	; 1
    8104:	df 91       	pop	r29
    8106:	cf 91       	pop	r28
    8108:	1f 91       	pop	r17
    810a:	0f 91       	pop	r16
    810c:	ff 90       	pop	r15
    810e:	ef 90       	pop	r14
    8110:	bf 90       	pop	r11
    8112:	af 90       	pop	r10
    8114:	9f 90       	pop	r9
    8116:	8f 90       	pop	r8
    8118:	08 95       	ret

0000811a <conv_brk>:
    811a:	5f 92       	push	r5
    811c:	6f 92       	push	r6
    811e:	7f 92       	push	r7
    8120:	8f 92       	push	r8
    8122:	9f 92       	push	r9
    8124:	af 92       	push	r10
    8126:	bf 92       	push	r11
    8128:	cf 92       	push	r12
    812a:	df 92       	push	r13
    812c:	ef 92       	push	r14
    812e:	ff 92       	push	r15
    8130:	0f 93       	push	r16
    8132:	1f 93       	push	r17
    8134:	cf 93       	push	r28
    8136:	df 93       	push	r29
    8138:	cd b7       	in	r28, 0x3d	; 61
    813a:	de b7       	in	r29, 0x3e	; 62
    813c:	a0 97       	sbiw	r28, 0x20	; 32
    813e:	cd bf       	out	0x3d, r28	; 61
    8140:	de bf       	out	0x3e, r29	; 62
    8142:	5c 01       	movw	r10, r24
    8144:	96 2e       	mov	r9, r22
    8146:	7a 01       	movw	r14, r20
    8148:	f9 01       	movw	r30, r18
    814a:	8e 01       	movw	r16, r28
    814c:	0f 5f       	subi	r16, 0xFF	; 255
    814e:	1f 4f       	sbci	r17, 0xFF	; 255
    8150:	68 01       	movw	r12, r16
    8152:	80 e2       	ldi	r24, 0x20	; 32
    8154:	d8 01       	movw	r26, r16
    8156:	1d 92       	st	X+, r1
    8158:	8a 95       	dec	r24
    815a:	e9 f7       	brne	.-6      	; 0x8156 <conv_brk+0x3c>
    815c:	d5 01       	movw	r26, r10
    815e:	13 96       	adiw	r26, 0x03	; 3
    8160:	8c 90       	ld	r8, X
    8162:	80 e0       	ldi	r24, 0x00	; 0
    8164:	90 e0       	ldi	r25, 0x00	; 0
    8166:	61 2c       	mov	r6, r1
    8168:	71 2c       	mov	r7, r1
    816a:	30 e0       	ldi	r19, 0x00	; 0
    816c:	61 e0       	ldi	r22, 0x01	; 1
    816e:	70 e0       	ldi	r23, 0x00	; 0
    8170:	83 fc       	sbrc	r8, 3
    8172:	25 91       	lpm	r18, Z+
    8174:	83 fe       	sbrs	r8, 3
    8176:	21 91       	ld	r18, Z+
    8178:	8f 01       	movw	r16, r30
    817a:	52 2e       	mov	r5, r18
    817c:	21 11       	cpse	r18, r1
    817e:	03 c0       	rjmp	.+6      	; 0x8186 <conv_brk+0x6c>
    8180:	80 e0       	ldi	r24, 0x00	; 0
    8182:	90 e0       	ldi	r25, 0x00	; 0
    8184:	92 c0       	rjmp	.+292    	; 0x82aa <conv_brk+0x190>
    8186:	2e 35       	cpi	r18, 0x5E	; 94
    8188:	11 f4       	brne	.+4      	; 0x818e <conv_brk+0x74>
    818a:	00 97       	sbiw	r24, 0x00	; 0
    818c:	51 f1       	breq	.+84     	; 0x81e2 <conv_brk+0xc8>
    818e:	43 2f       	mov	r20, r19
    8190:	50 e0       	ldi	r21, 0x00	; 0
    8192:	48 17       	cp	r20, r24
    8194:	59 07       	cpc	r21, r25
    8196:	3c f4       	brge	.+14     	; 0x81a6 <conv_brk+0x8c>
    8198:	2d 35       	cpi	r18, 0x5D	; 93
    819a:	59 f1       	breq	.+86     	; 0x81f2 <conv_brk+0xd8>
    819c:	2d 32       	cpi	r18, 0x2D	; 45
    819e:	19 f4       	brne	.+6      	; 0x81a6 <conv_brk+0x8c>
    81a0:	77 20       	and	r7, r7
    81a2:	09 f1       	breq	.+66     	; 0x81e6 <conv_brk+0xcc>
    81a4:	03 c0       	rjmp	.+6      	; 0x81ac <conv_brk+0x92>
    81a6:	77 20       	and	r7, r7
    81a8:	09 f4       	brne	.+2      	; 0x81ac <conv_brk+0x92>
    81aa:	6a c0       	rjmp	.+212    	; 0x8280 <conv_brk+0x166>
    81ac:	45 2d       	mov	r20, r5
    81ae:	46 95       	lsr	r20
    81b0:	46 95       	lsr	r20
    81b2:	46 95       	lsr	r20
    81b4:	d6 01       	movw	r26, r12
    81b6:	a4 0f       	add	r26, r20
    81b8:	b1 1d       	adc	r27, r1
    81ba:	45 2d       	mov	r20, r5
    81bc:	47 70       	andi	r20, 0x07	; 7
    81be:	8b 01       	movw	r16, r22
    81c0:	02 c0       	rjmp	.+4      	; 0x81c6 <conv_brk+0xac>
    81c2:	00 0f       	add	r16, r16
    81c4:	11 1f       	adc	r17, r17
    81c6:	4a 95       	dec	r20
    81c8:	e2 f7       	brpl	.-8      	; 0x81c2 <conv_brk+0xa8>
    81ca:	a8 01       	movw	r20, r16
    81cc:	5c 91       	ld	r21, X
    81ce:	45 2b       	or	r20, r21
    81d0:	4c 93       	st	X, r20
    81d2:	65 14       	cp	r6, r5
    81d4:	59 f0       	breq	.+22     	; 0x81ec <conv_brk+0xd2>
    81d6:	56 14       	cp	r5, r6
    81d8:	10 f4       	brcc	.+4      	; 0x81de <conv_brk+0xc4>
    81da:	53 94       	inc	r5
    81dc:	e7 cf       	rjmp	.-50     	; 0x81ac <conv_brk+0x92>
    81de:	5a 94       	dec	r5
    81e0:	e5 cf       	rjmp	.-54     	; 0x81ac <conv_brk+0x92>
    81e2:	31 e0       	ldi	r19, 0x01	; 1
    81e4:	04 c0       	rjmp	.+8      	; 0x81ee <conv_brk+0xd4>
    81e6:	77 24       	eor	r7, r7
    81e8:	73 94       	inc	r7
    81ea:	01 c0       	rjmp	.+2      	; 0x81ee <conv_brk+0xd4>
    81ec:	71 2c       	mov	r7, r1
    81ee:	01 96       	adiw	r24, 0x01	; 1
    81f0:	bf cf       	rjmp	.-130    	; 0x8170 <conv_brk+0x56>
    81f2:	77 20       	and	r7, r7
    81f4:	19 f0       	breq	.+6      	; 0x81fc <conv_brk+0xe2>
    81f6:	8e 81       	ldd	r24, Y+6	; 0x06
    81f8:	80 62       	ori	r24, 0x20	; 32
    81fa:	8e 83       	std	Y+6, r24	; 0x06
    81fc:	31 11       	cpse	r19, r1
    81fe:	03 c0       	rjmp	.+6      	; 0x8206 <conv_brk+0xec>
    8200:	88 24       	eor	r8, r8
    8202:	83 94       	inc	r8
    8204:	17 c0       	rjmp	.+46     	; 0x8234 <conv_brk+0x11a>
    8206:	f6 01       	movw	r30, r12
    8208:	9e 01       	movw	r18, r28
    820a:	2f 5d       	subi	r18, 0xDF	; 223
    820c:	3f 4f       	sbci	r19, 0xFF	; 255
    820e:	80 81       	ld	r24, Z
    8210:	80 95       	com	r24
    8212:	81 93       	st	Z+, r24
    8214:	2e 17       	cp	r18, r30
    8216:	3f 07       	cpc	r19, r31
    8218:	d1 f7       	brne	.-12     	; 0x820e <conv_brk+0xf4>
    821a:	f2 cf       	rjmp	.-28     	; 0x8200 <conv_brk+0xe6>
    821c:	e1 14       	cp	r14, r1
    821e:	f1 04       	cpc	r15, r1
    8220:	29 f0       	breq	.+10     	; 0x822c <conv_brk+0x112>
    8222:	d7 01       	movw	r26, r14
    8224:	8c 93       	st	X, r24
    8226:	f7 01       	movw	r30, r14
    8228:	31 96       	adiw	r30, 0x01	; 1
    822a:	7f 01       	movw	r14, r30
    822c:	9a 94       	dec	r9
    822e:	81 2c       	mov	r8, r1
    8230:	99 20       	and	r9, r9
    8232:	f9 f0       	breq	.+62     	; 0x8272 <conv_brk+0x158>
    8234:	c5 01       	movw	r24, r10
    8236:	0e 94 b7 42 	call	0x856e	; 0x856e <fgetc>
    823a:	97 fd       	sbrc	r25, 7
    823c:	18 c0       	rjmp	.+48     	; 0x826e <conv_brk+0x154>
    823e:	fc 01       	movw	r30, r24
    8240:	ff 27       	eor	r31, r31
    8242:	23 e0       	ldi	r18, 0x03	; 3
    8244:	f5 95       	asr	r31
    8246:	e7 95       	ror	r30
    8248:	2a 95       	dec	r18
    824a:	e1 f7       	brne	.-8      	; 0x8244 <conv_brk+0x12a>
    824c:	ec 0d       	add	r30, r12
    824e:	fd 1d       	adc	r31, r13
    8250:	20 81       	ld	r18, Z
    8252:	30 e0       	ldi	r19, 0x00	; 0
    8254:	ac 01       	movw	r20, r24
    8256:	47 70       	andi	r20, 0x07	; 7
    8258:	55 27       	eor	r21, r21
    825a:	02 c0       	rjmp	.+4      	; 0x8260 <conv_brk+0x146>
    825c:	35 95       	asr	r19
    825e:	27 95       	ror	r18
    8260:	4a 95       	dec	r20
    8262:	e2 f7       	brpl	.-8      	; 0x825c <conv_brk+0x142>
    8264:	20 fd       	sbrc	r18, 0
    8266:	da cf       	rjmp	.-76     	; 0x821c <conv_brk+0x102>
    8268:	b5 01       	movw	r22, r10
    826a:	0e 94 31 43 	call	0x8662	; 0x8662 <ungetc>
    826e:	81 10       	cpse	r8, r1
    8270:	87 cf       	rjmp	.-242    	; 0x8180 <conv_brk+0x66>
    8272:	e1 14       	cp	r14, r1
    8274:	f1 04       	cpc	r15, r1
    8276:	11 f0       	breq	.+4      	; 0x827c <conv_brk+0x162>
    8278:	d7 01       	movw	r26, r14
    827a:	1c 92       	st	X, r1
    827c:	c8 01       	movw	r24, r16
    827e:	15 c0       	rjmp	.+42     	; 0x82aa <conv_brk+0x190>
    8280:	42 2f       	mov	r20, r18
    8282:	46 95       	lsr	r20
    8284:	46 95       	lsr	r20
    8286:	46 95       	lsr	r20
    8288:	d6 01       	movw	r26, r12
    828a:	a4 0f       	add	r26, r20
    828c:	b1 1d       	adc	r27, r1
    828e:	42 2f       	mov	r20, r18
    8290:	47 70       	andi	r20, 0x07	; 7
    8292:	8b 01       	movw	r16, r22
    8294:	02 c0       	rjmp	.+4      	; 0x829a <conv_brk+0x180>
    8296:	00 0f       	add	r16, r16
    8298:	11 1f       	adc	r17, r17
    829a:	4a 95       	dec	r20
    829c:	e2 f7       	brpl	.-8      	; 0x8296 <conv_brk+0x17c>
    829e:	a8 01       	movw	r20, r16
    82a0:	5c 91       	ld	r21, X
    82a2:	45 2b       	or	r20, r21
    82a4:	4c 93       	st	X, r20
    82a6:	62 2e       	mov	r6, r18
    82a8:	a2 cf       	rjmp	.-188    	; 0x81ee <conv_brk+0xd4>
    82aa:	a0 96       	adiw	r28, 0x20	; 32
    82ac:	cd bf       	out	0x3d, r28	; 61
    82ae:	de bf       	out	0x3e, r29	; 62
    82b0:	df 91       	pop	r29
    82b2:	cf 91       	pop	r28
    82b4:	1f 91       	pop	r17
    82b6:	0f 91       	pop	r16
    82b8:	ff 90       	pop	r15
    82ba:	ef 90       	pop	r14
    82bc:	df 90       	pop	r13
    82be:	cf 90       	pop	r12
    82c0:	bf 90       	pop	r11
    82c2:	af 90       	pop	r10
    82c4:	9f 90       	pop	r9
    82c6:	8f 90       	pop	r8
    82c8:	7f 90       	pop	r7
    82ca:	6f 90       	pop	r6
    82cc:	5f 90       	pop	r5
    82ce:	08 95       	ret

000082d0 <vfscanf>:
    82d0:	5f 92       	push	r5
    82d2:	6f 92       	push	r6
    82d4:	7f 92       	push	r7
    82d6:	8f 92       	push	r8
    82d8:	9f 92       	push	r9
    82da:	af 92       	push	r10
    82dc:	bf 92       	push	r11
    82de:	cf 92       	push	r12
    82e0:	df 92       	push	r13
    82e2:	ef 92       	push	r14
    82e4:	ff 92       	push	r15
    82e6:	0f 93       	push	r16
    82e8:	1f 93       	push	r17
    82ea:	cf 93       	push	r28
    82ec:	df 93       	push	r29
    82ee:	6c 01       	movw	r12, r24
    82f0:	eb 01       	movw	r28, r22
    82f2:	5a 01       	movw	r10, r20
    82f4:	fc 01       	movw	r30, r24
    82f6:	16 82       	std	Z+6, r1	; 0x06
    82f8:	17 82       	std	Z+7, r1	; 0x07
    82fa:	51 2c       	mov	r5, r1
    82fc:	f6 01       	movw	r30, r12
    82fe:	e3 80       	ldd	r14, Z+3	; 0x03
    8300:	fe 01       	movw	r30, r28
    8302:	e3 fc       	sbrc	r14, 3
    8304:	85 91       	lpm	r24, Z+
    8306:	e3 fe       	sbrs	r14, 3
    8308:	81 91       	ld	r24, Z+
    830a:	18 2f       	mov	r17, r24
    830c:	ef 01       	movw	r28, r30
    830e:	88 23       	and	r24, r24
    8310:	09 f4       	brne	.+2      	; 0x8314 <vfscanf+0x44>
    8312:	ee c0       	rjmp	.+476    	; 0x84f0 <vfscanf+0x220>
    8314:	90 e0       	ldi	r25, 0x00	; 0
    8316:	0e 94 8d 42 	call	0x851a	; 0x851a <isspace>
    831a:	89 2b       	or	r24, r25
    831c:	21 f0       	breq	.+8      	; 0x8326 <vfscanf+0x56>
    831e:	c6 01       	movw	r24, r12
    8320:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <skip_spaces>
    8324:	eb cf       	rjmp	.-42     	; 0x82fc <vfscanf+0x2c>
    8326:	15 32       	cpi	r17, 0x25	; 37
    8328:	41 f4       	brne	.+16     	; 0x833a <vfscanf+0x6a>
    832a:	fe 01       	movw	r30, r28
    832c:	e3 fc       	sbrc	r14, 3
    832e:	15 91       	lpm	r17, Z+
    8330:	e3 fe       	sbrs	r14, 3
    8332:	11 91       	ld	r17, Z+
    8334:	ef 01       	movw	r28, r30
    8336:	15 32       	cpi	r17, 0x25	; 37
    8338:	81 f4       	brne	.+32     	; 0x835a <vfscanf+0x8a>
    833a:	c6 01       	movw	r24, r12
    833c:	0e 94 b7 42 	call	0x856e	; 0x856e <fgetc>
    8340:	97 fd       	sbrc	r25, 7
    8342:	d4 c0       	rjmp	.+424    	; 0x84ec <vfscanf+0x21c>
    8344:	41 2f       	mov	r20, r17
    8346:	50 e0       	ldi	r21, 0x00	; 0
    8348:	9c 01       	movw	r18, r24
    834a:	33 27       	eor	r19, r19
    834c:	24 17       	cp	r18, r20
    834e:	35 07       	cpc	r19, r21
    8350:	a9 f2       	breq	.-86     	; 0x82fc <vfscanf+0x2c>
    8352:	b6 01       	movw	r22, r12
    8354:	0e 94 31 43 	call	0x8662	; 0x8662 <ungetc>
    8358:	cb c0       	rjmp	.+406    	; 0x84f0 <vfscanf+0x220>
    835a:	1a 32       	cpi	r17, 0x2A	; 42
    835c:	39 f4       	brne	.+14     	; 0x836c <vfscanf+0x9c>
    835e:	e3 fc       	sbrc	r14, 3
    8360:	15 91       	lpm	r17, Z+
    8362:	e3 fe       	sbrs	r14, 3
    8364:	11 91       	ld	r17, Z+
    8366:	ef 01       	movw	r28, r30
    8368:	01 e0       	ldi	r16, 0x01	; 1
    836a:	01 c0       	rjmp	.+2      	; 0x836e <vfscanf+0x9e>
    836c:	00 e0       	ldi	r16, 0x00	; 0
    836e:	f1 2c       	mov	r15, r1
    8370:	20 ed       	ldi	r18, 0xD0	; 208
    8372:	21 0f       	add	r18, r17
    8374:	2a 30       	cpi	r18, 0x0A	; 10
    8376:	80 f4       	brcc	.+32     	; 0x8398 <vfscanf+0xc8>
    8378:	02 60       	ori	r16, 0x02	; 2
    837a:	6f 2d       	mov	r22, r15
    837c:	70 e0       	ldi	r23, 0x00	; 0
    837e:	80 e0       	ldi	r24, 0x00	; 0
    8380:	90 e0       	ldi	r25, 0x00	; 0
    8382:	40 e2       	ldi	r20, 0x20	; 32
    8384:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <mulacc>
    8388:	f6 2e       	mov	r15, r22
    838a:	fe 01       	movw	r30, r28
    838c:	e3 fc       	sbrc	r14, 3
    838e:	15 91       	lpm	r17, Z+
    8390:	e3 fe       	sbrs	r14, 3
    8392:	11 91       	ld	r17, Z+
    8394:	ef 01       	movw	r28, r30
    8396:	ec cf       	rjmp	.-40     	; 0x8370 <vfscanf+0xa0>
    8398:	01 ff       	sbrs	r16, 1
    839a:	03 c0       	rjmp	.+6      	; 0x83a2 <vfscanf+0xd2>
    839c:	f1 10       	cpse	r15, r1
    839e:	03 c0       	rjmp	.+6      	; 0x83a6 <vfscanf+0xd6>
    83a0:	a7 c0       	rjmp	.+334    	; 0x84f0 <vfscanf+0x220>
    83a2:	ff 24       	eor	r15, r15
    83a4:	fa 94       	dec	r15
    83a6:	18 36       	cpi	r17, 0x68	; 104
    83a8:	19 f0       	breq	.+6      	; 0x83b0 <vfscanf+0xe0>
    83aa:	1c 36       	cpi	r17, 0x6C	; 108
    83ac:	51 f0       	breq	.+20     	; 0x83c2 <vfscanf+0xf2>
    83ae:	10 c0       	rjmp	.+32     	; 0x83d0 <vfscanf+0x100>
    83b0:	fe 01       	movw	r30, r28
    83b2:	e3 fc       	sbrc	r14, 3
    83b4:	15 91       	lpm	r17, Z+
    83b6:	e3 fe       	sbrs	r14, 3
    83b8:	11 91       	ld	r17, Z+
    83ba:	ef 01       	movw	r28, r30
    83bc:	18 36       	cpi	r17, 0x68	; 104
    83be:	41 f4       	brne	.+16     	; 0x83d0 <vfscanf+0x100>
    83c0:	08 60       	ori	r16, 0x08	; 8
    83c2:	04 60       	ori	r16, 0x04	; 4
    83c4:	fe 01       	movw	r30, r28
    83c6:	e3 fc       	sbrc	r14, 3
    83c8:	15 91       	lpm	r17, Z+
    83ca:	e3 fe       	sbrs	r14, 3
    83cc:	11 91       	ld	r17, Z+
    83ce:	ef 01       	movw	r28, r30
    83d0:	11 23       	and	r17, r17
    83d2:	09 f4       	brne	.+2      	; 0x83d6 <vfscanf+0x106>
    83d4:	8d c0       	rjmp	.+282    	; 0x84f0 <vfscanf+0x220>
    83d6:	61 2f       	mov	r22, r17
    83d8:	70 e0       	ldi	r23, 0x00	; 0
    83da:	82 ef       	ldi	r24, 0xF2	; 242
    83dc:	92 e0       	ldi	r25, 0x02	; 2
    83de:	0e 94 96 42 	call	0x852c	; 0x852c <strchr_P>
    83e2:	89 2b       	or	r24, r25
    83e4:	09 f4       	brne	.+2      	; 0x83e8 <vfscanf+0x118>
    83e6:	84 c0       	rjmp	.+264    	; 0x84f0 <vfscanf+0x220>
    83e8:	00 fd       	sbrc	r16, 0
    83ea:	07 c0       	rjmp	.+14     	; 0x83fa <vfscanf+0x12a>
    83ec:	f5 01       	movw	r30, r10
    83ee:	80 80       	ld	r8, Z
    83f0:	91 80       	ldd	r9, Z+1	; 0x01
    83f2:	c5 01       	movw	r24, r10
    83f4:	02 96       	adiw	r24, 0x02	; 2
    83f6:	5c 01       	movw	r10, r24
    83f8:	02 c0       	rjmp	.+4      	; 0x83fe <vfscanf+0x12e>
    83fa:	81 2c       	mov	r8, r1
    83fc:	91 2c       	mov	r9, r1
    83fe:	1e 36       	cpi	r17, 0x6E	; 110
    8400:	51 f4       	brne	.+20     	; 0x8416 <vfscanf+0x146>
    8402:	f6 01       	movw	r30, r12
    8404:	46 81       	ldd	r20, Z+6	; 0x06
    8406:	57 81       	ldd	r21, Z+7	; 0x07
    8408:	60 e0       	ldi	r22, 0x00	; 0
    840a:	70 e0       	ldi	r23, 0x00	; 0
    840c:	20 2f       	mov	r18, r16
    840e:	c4 01       	movw	r24, r8
    8410:	0e 94 af 3f 	call	0x7f5e	; 0x7f5e <putval>
    8414:	73 cf       	rjmp	.-282    	; 0x82fc <vfscanf+0x2c>
    8416:	13 36       	cpi	r17, 0x63	; 99
    8418:	a9 f4       	brne	.+42     	; 0x8444 <vfscanf+0x174>
    841a:	01 fd       	sbrc	r16, 1
    841c:	02 c0       	rjmp	.+4      	; 0x8422 <vfscanf+0x152>
    841e:	ff 24       	eor	r15, r15
    8420:	f3 94       	inc	r15
    8422:	c6 01       	movw	r24, r12
    8424:	0e 94 b7 42 	call	0x856e	; 0x856e <fgetc>
    8428:	97 fd       	sbrc	r25, 7
    842a:	60 c0       	rjmp	.+192    	; 0x84ec <vfscanf+0x21c>
    842c:	81 14       	cp	r8, r1
    842e:	91 04       	cpc	r9, r1
    8430:	29 f0       	breq	.+10     	; 0x843c <vfscanf+0x16c>
    8432:	f4 01       	movw	r30, r8
    8434:	80 83       	st	Z, r24
    8436:	c4 01       	movw	r24, r8
    8438:	01 96       	adiw	r24, 0x01	; 1
    843a:	4c 01       	movw	r8, r24
    843c:	fa 94       	dec	r15
    843e:	f1 10       	cpse	r15, r1
    8440:	f0 cf       	rjmp	.-32     	; 0x8422 <vfscanf+0x152>
    8442:	50 c0       	rjmp	.+160    	; 0x84e4 <vfscanf+0x214>
    8444:	1b 35       	cpi	r17, 0x5B	; 91
    8446:	59 f4       	brne	.+22     	; 0x845e <vfscanf+0x18e>
    8448:	9e 01       	movw	r18, r28
    844a:	a4 01       	movw	r20, r8
    844c:	6f 2d       	mov	r22, r15
    844e:	c6 01       	movw	r24, r12
    8450:	0e 94 8d 40 	call	0x811a	; 0x811a <conv_brk>
    8454:	ec 01       	movw	r28, r24
    8456:	89 2b       	or	r24, r25
    8458:	09 f0       	breq	.+2      	; 0x845c <vfscanf+0x18c>
    845a:	44 c0       	rjmp	.+136    	; 0x84e4 <vfscanf+0x214>
    845c:	3e c0       	rjmp	.+124    	; 0x84da <vfscanf+0x20a>
    845e:	c6 01       	movw	r24, r12
    8460:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <skip_spaces>
    8464:	97 fd       	sbrc	r25, 7
    8466:	42 c0       	rjmp	.+132    	; 0x84ec <vfscanf+0x21c>
    8468:	1f 36       	cpi	r17, 0x6F	; 111
    846a:	61 f1       	breq	.+88     	; 0x84c4 <vfscanf+0x1f4>
    846c:	28 f4       	brcc	.+10     	; 0x8478 <vfscanf+0x1a8>
    846e:	14 36       	cpi	r17, 0x64	; 100
    8470:	39 f1       	breq	.+78     	; 0x84c0 <vfscanf+0x1f0>
    8472:	19 36       	cpi	r17, 0x69	; 105
    8474:	51 f1       	breq	.+84     	; 0x84ca <vfscanf+0x1fa>
    8476:	28 c0       	rjmp	.+80     	; 0x84c8 <vfscanf+0x1f8>
    8478:	13 37       	cpi	r17, 0x73	; 115
    847a:	71 f0       	breq	.+28     	; 0x8498 <vfscanf+0x1c8>
    847c:	15 37       	cpi	r17, 0x75	; 117
    847e:	01 f1       	breq	.+64     	; 0x84c0 <vfscanf+0x1f0>
    8480:	23 c0       	rjmp	.+70     	; 0x84c8 <vfscanf+0x1f8>
    8482:	81 14       	cp	r8, r1
    8484:	91 04       	cpc	r9, r1
    8486:	29 f0       	breq	.+10     	; 0x8492 <vfscanf+0x1c2>
    8488:	f4 01       	movw	r30, r8
    848a:	60 82       	st	Z, r6
    848c:	c4 01       	movw	r24, r8
    848e:	01 96       	adiw	r24, 0x01	; 1
    8490:	4c 01       	movw	r8, r24
    8492:	fa 94       	dec	r15
    8494:	ff 20       	and	r15, r15
    8496:	71 f0       	breq	.+28     	; 0x84b4 <vfscanf+0x1e4>
    8498:	c6 01       	movw	r24, r12
    849a:	0e 94 b7 42 	call	0x856e	; 0x856e <fgetc>
    849e:	3c 01       	movw	r6, r24
    84a0:	97 fd       	sbrc	r25, 7
    84a2:	08 c0       	rjmp	.+16     	; 0x84b4 <vfscanf+0x1e4>
    84a4:	0e 94 8d 42 	call	0x851a	; 0x851a <isspace>
    84a8:	89 2b       	or	r24, r25
    84aa:	59 f3       	breq	.-42     	; 0x8482 <vfscanf+0x1b2>
    84ac:	b6 01       	movw	r22, r12
    84ae:	c3 01       	movw	r24, r6
    84b0:	0e 94 31 43 	call	0x8662	; 0x8662 <ungetc>
    84b4:	81 14       	cp	r8, r1
    84b6:	91 04       	cpc	r9, r1
    84b8:	a9 f0       	breq	.+42     	; 0x84e4 <vfscanf+0x214>
    84ba:	f4 01       	movw	r30, r8
    84bc:	10 82       	st	Z, r1
    84be:	12 c0       	rjmp	.+36     	; 0x84e4 <vfscanf+0x214>
    84c0:	00 62       	ori	r16, 0x20	; 32
    84c2:	03 c0       	rjmp	.+6      	; 0x84ca <vfscanf+0x1fa>
    84c4:	00 61       	ori	r16, 0x10	; 16
    84c6:	01 c0       	rjmp	.+2      	; 0x84ca <vfscanf+0x1fa>
    84c8:	00 64       	ori	r16, 0x40	; 64
    84ca:	20 2f       	mov	r18, r16
    84cc:	a4 01       	movw	r20, r8
    84ce:	6f 2d       	mov	r22, r15
    84d0:	c6 01       	movw	r24, r12
    84d2:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <conv_int>
    84d6:	81 11       	cpse	r24, r1
    84d8:	05 c0       	rjmp	.+10     	; 0x84e4 <vfscanf+0x214>
    84da:	f6 01       	movw	r30, r12
    84dc:	83 81       	ldd	r24, Z+3	; 0x03
    84de:	80 73       	andi	r24, 0x30	; 48
    84e0:	29 f4       	brne	.+10     	; 0x84ec <vfscanf+0x21c>
    84e2:	06 c0       	rjmp	.+12     	; 0x84f0 <vfscanf+0x220>
    84e4:	00 fd       	sbrc	r16, 0
    84e6:	0a cf       	rjmp	.-492    	; 0x82fc <vfscanf+0x2c>
    84e8:	53 94       	inc	r5
    84ea:	08 cf       	rjmp	.-496    	; 0x82fc <vfscanf+0x2c>
    84ec:	55 20       	and	r5, r5
    84ee:	19 f0       	breq	.+6      	; 0x84f6 <vfscanf+0x226>
    84f0:	85 2d       	mov	r24, r5
    84f2:	90 e0       	ldi	r25, 0x00	; 0
    84f4:	02 c0       	rjmp	.+4      	; 0x84fa <vfscanf+0x22a>
    84f6:	8f ef       	ldi	r24, 0xFF	; 255
    84f8:	9f ef       	ldi	r25, 0xFF	; 255
    84fa:	df 91       	pop	r29
    84fc:	cf 91       	pop	r28
    84fe:	1f 91       	pop	r17
    8500:	0f 91       	pop	r16
    8502:	ff 90       	pop	r15
    8504:	ef 90       	pop	r14
    8506:	df 90       	pop	r13
    8508:	cf 90       	pop	r12
    850a:	bf 90       	pop	r11
    850c:	af 90       	pop	r10
    850e:	9f 90       	pop	r9
    8510:	8f 90       	pop	r8
    8512:	7f 90       	pop	r7
    8514:	6f 90       	pop	r6
    8516:	5f 90       	pop	r5
    8518:	08 95       	ret

0000851a <isspace>:
    851a:	91 11       	cpse	r25, r1
    851c:	0c 94 a8 43 	jmp	0x8750	; 0x8750 <__ctype_isfalse>
    8520:	80 32       	cpi	r24, 0x20	; 32
    8522:	19 f0       	breq	.+6      	; 0x852a <isspace+0x10>
    8524:	89 50       	subi	r24, 0x09	; 9
    8526:	85 50       	subi	r24, 0x05	; 5
    8528:	c8 f7       	brcc	.-14     	; 0x851c <isspace+0x2>
    852a:	08 95       	ret

0000852c <strchr_P>:
    852c:	fc 01       	movw	r30, r24
    852e:	05 90       	lpm	r0, Z+
    8530:	06 16       	cp	r0, r22
    8532:	21 f0       	breq	.+8      	; 0x853c <strchr_P+0x10>
    8534:	00 20       	and	r0, r0
    8536:	d9 f7       	brne	.-10     	; 0x852e <strchr_P+0x2>
    8538:	c0 01       	movw	r24, r0
    853a:	08 95       	ret
    853c:	31 97       	sbiw	r30, 0x01	; 1
    853e:	cf 01       	movw	r24, r30
    8540:	08 95       	ret

00008542 <strnlen_P>:
    8542:	fc 01       	movw	r30, r24
    8544:	05 90       	lpm	r0, Z+
    8546:	61 50       	subi	r22, 0x01	; 1
    8548:	70 40       	sbci	r23, 0x00	; 0
    854a:	01 10       	cpse	r0, r1
    854c:	d8 f7       	brcc	.-10     	; 0x8544 <strnlen_P+0x2>
    854e:	80 95       	com	r24
    8550:	90 95       	com	r25
    8552:	8e 0f       	add	r24, r30
    8554:	9f 1f       	adc	r25, r31
    8556:	08 95       	ret

00008558 <strnlen>:
    8558:	fc 01       	movw	r30, r24
    855a:	61 50       	subi	r22, 0x01	; 1
    855c:	70 40       	sbci	r23, 0x00	; 0
    855e:	01 90       	ld	r0, Z+
    8560:	01 10       	cpse	r0, r1
    8562:	d8 f7       	brcc	.-10     	; 0x855a <strnlen+0x2>
    8564:	80 95       	com	r24
    8566:	90 95       	com	r25
    8568:	8e 0f       	add	r24, r30
    856a:	9f 1f       	adc	r25, r31
    856c:	08 95       	ret

0000856e <fgetc>:
    856e:	cf 93       	push	r28
    8570:	df 93       	push	r29
    8572:	ec 01       	movw	r28, r24
    8574:	2b 81       	ldd	r18, Y+3	; 0x03
    8576:	20 ff       	sbrs	r18, 0
    8578:	33 c0       	rjmp	.+102    	; 0x85e0 <fgetc+0x72>
    857a:	26 ff       	sbrs	r18, 6
    857c:	0a c0       	rjmp	.+20     	; 0x8592 <fgetc+0x24>
    857e:	2f 7b       	andi	r18, 0xBF	; 191
    8580:	2b 83       	std	Y+3, r18	; 0x03
    8582:	8e 81       	ldd	r24, Y+6	; 0x06
    8584:	9f 81       	ldd	r25, Y+7	; 0x07
    8586:	01 96       	adiw	r24, 0x01	; 1
    8588:	8e 83       	std	Y+6, r24	; 0x06
    858a:	9f 83       	std	Y+7, r25	; 0x07
    858c:	8a 81       	ldd	r24, Y+2	; 0x02
    858e:	90 e0       	ldi	r25, 0x00	; 0
    8590:	29 c0       	rjmp	.+82     	; 0x85e4 <fgetc+0x76>
    8592:	22 ff       	sbrs	r18, 2
    8594:	0f c0       	rjmp	.+30     	; 0x85b4 <fgetc+0x46>
    8596:	e8 81       	ld	r30, Y
    8598:	f9 81       	ldd	r31, Y+1	; 0x01
    859a:	80 81       	ld	r24, Z
    859c:	08 2e       	mov	r0, r24
    859e:	00 0c       	add	r0, r0
    85a0:	99 0b       	sbc	r25, r25
    85a2:	00 97       	sbiw	r24, 0x00	; 0
    85a4:	19 f4       	brne	.+6      	; 0x85ac <fgetc+0x3e>
    85a6:	20 62       	ori	r18, 0x20	; 32
    85a8:	2b 83       	std	Y+3, r18	; 0x03
    85aa:	1a c0       	rjmp	.+52     	; 0x85e0 <fgetc+0x72>
    85ac:	31 96       	adiw	r30, 0x01	; 1
    85ae:	e8 83       	st	Y, r30
    85b0:	f9 83       	std	Y+1, r31	; 0x01
    85b2:	0e c0       	rjmp	.+28     	; 0x85d0 <fgetc+0x62>
    85b4:	ea 85       	ldd	r30, Y+10	; 0x0a
    85b6:	fb 85       	ldd	r31, Y+11	; 0x0b
    85b8:	09 95       	icall
    85ba:	97 ff       	sbrs	r25, 7
    85bc:	09 c0       	rjmp	.+18     	; 0x85d0 <fgetc+0x62>
    85be:	2b 81       	ldd	r18, Y+3	; 0x03
    85c0:	01 96       	adiw	r24, 0x01	; 1
    85c2:	11 f0       	breq	.+4      	; 0x85c8 <fgetc+0x5a>
    85c4:	80 e2       	ldi	r24, 0x20	; 32
    85c6:	01 c0       	rjmp	.+2      	; 0x85ca <fgetc+0x5c>
    85c8:	80 e1       	ldi	r24, 0x10	; 16
    85ca:	82 2b       	or	r24, r18
    85cc:	8b 83       	std	Y+3, r24	; 0x03
    85ce:	08 c0       	rjmp	.+16     	; 0x85e0 <fgetc+0x72>
    85d0:	2e 81       	ldd	r18, Y+6	; 0x06
    85d2:	3f 81       	ldd	r19, Y+7	; 0x07
    85d4:	2f 5f       	subi	r18, 0xFF	; 255
    85d6:	3f 4f       	sbci	r19, 0xFF	; 255
    85d8:	2e 83       	std	Y+6, r18	; 0x06
    85da:	3f 83       	std	Y+7, r19	; 0x07
    85dc:	99 27       	eor	r25, r25
    85de:	02 c0       	rjmp	.+4      	; 0x85e4 <fgetc+0x76>
    85e0:	8f ef       	ldi	r24, 0xFF	; 255
    85e2:	9f ef       	ldi	r25, 0xFF	; 255
    85e4:	df 91       	pop	r29
    85e6:	cf 91       	pop	r28
    85e8:	08 95       	ret

000085ea <fputc>:
    85ea:	0f 93       	push	r16
    85ec:	1f 93       	push	r17
    85ee:	cf 93       	push	r28
    85f0:	df 93       	push	r29
    85f2:	fb 01       	movw	r30, r22
    85f4:	23 81       	ldd	r18, Z+3	; 0x03
    85f6:	21 fd       	sbrc	r18, 1
    85f8:	03 c0       	rjmp	.+6      	; 0x8600 <fputc+0x16>
    85fa:	8f ef       	ldi	r24, 0xFF	; 255
    85fc:	9f ef       	ldi	r25, 0xFF	; 255
    85fe:	2c c0       	rjmp	.+88     	; 0x8658 <fputc+0x6e>
    8600:	22 ff       	sbrs	r18, 2
    8602:	16 c0       	rjmp	.+44     	; 0x8630 <fputc+0x46>
    8604:	46 81       	ldd	r20, Z+6	; 0x06
    8606:	57 81       	ldd	r21, Z+7	; 0x07
    8608:	24 81       	ldd	r18, Z+4	; 0x04
    860a:	35 81       	ldd	r19, Z+5	; 0x05
    860c:	42 17       	cp	r20, r18
    860e:	53 07       	cpc	r21, r19
    8610:	44 f4       	brge	.+16     	; 0x8622 <fputc+0x38>
    8612:	a0 81       	ld	r26, Z
    8614:	b1 81       	ldd	r27, Z+1	; 0x01
    8616:	9d 01       	movw	r18, r26
    8618:	2f 5f       	subi	r18, 0xFF	; 255
    861a:	3f 4f       	sbci	r19, 0xFF	; 255
    861c:	20 83       	st	Z, r18
    861e:	31 83       	std	Z+1, r19	; 0x01
    8620:	8c 93       	st	X, r24
    8622:	26 81       	ldd	r18, Z+6	; 0x06
    8624:	37 81       	ldd	r19, Z+7	; 0x07
    8626:	2f 5f       	subi	r18, 0xFF	; 255
    8628:	3f 4f       	sbci	r19, 0xFF	; 255
    862a:	26 83       	std	Z+6, r18	; 0x06
    862c:	37 83       	std	Z+7, r19	; 0x07
    862e:	14 c0       	rjmp	.+40     	; 0x8658 <fputc+0x6e>
    8630:	8b 01       	movw	r16, r22
    8632:	ec 01       	movw	r28, r24
    8634:	fb 01       	movw	r30, r22
    8636:	00 84       	ldd	r0, Z+8	; 0x08
    8638:	f1 85       	ldd	r31, Z+9	; 0x09
    863a:	e0 2d       	mov	r30, r0
    863c:	09 95       	icall
    863e:	89 2b       	or	r24, r25
    8640:	e1 f6       	brne	.-72     	; 0x85fa <fputc+0x10>
    8642:	d8 01       	movw	r26, r16
    8644:	16 96       	adiw	r26, 0x06	; 6
    8646:	8d 91       	ld	r24, X+
    8648:	9c 91       	ld	r25, X
    864a:	17 97       	sbiw	r26, 0x07	; 7
    864c:	01 96       	adiw	r24, 0x01	; 1
    864e:	16 96       	adiw	r26, 0x06	; 6
    8650:	8d 93       	st	X+, r24
    8652:	9c 93       	st	X, r25
    8654:	17 97       	sbiw	r26, 0x07	; 7
    8656:	ce 01       	movw	r24, r28
    8658:	df 91       	pop	r29
    865a:	cf 91       	pop	r28
    865c:	1f 91       	pop	r17
    865e:	0f 91       	pop	r16
    8660:	08 95       	ret

00008662 <ungetc>:
    8662:	fb 01       	movw	r30, r22
    8664:	23 81       	ldd	r18, Z+3	; 0x03
    8666:	20 ff       	sbrs	r18, 0
    8668:	12 c0       	rjmp	.+36     	; 0x868e <ungetc+0x2c>
    866a:	26 fd       	sbrc	r18, 6
    866c:	10 c0       	rjmp	.+32     	; 0x868e <ungetc+0x2c>
    866e:	8f 3f       	cpi	r24, 0xFF	; 255
    8670:	3f ef       	ldi	r19, 0xFF	; 255
    8672:	93 07       	cpc	r25, r19
    8674:	61 f0       	breq	.+24     	; 0x868e <ungetc+0x2c>
    8676:	82 83       	std	Z+2, r24	; 0x02
    8678:	2f 7d       	andi	r18, 0xDF	; 223
    867a:	20 64       	ori	r18, 0x40	; 64
    867c:	23 83       	std	Z+3, r18	; 0x03
    867e:	26 81       	ldd	r18, Z+6	; 0x06
    8680:	37 81       	ldd	r19, Z+7	; 0x07
    8682:	21 50       	subi	r18, 0x01	; 1
    8684:	31 09       	sbc	r19, r1
    8686:	26 83       	std	Z+6, r18	; 0x06
    8688:	37 83       	std	Z+7, r19	; 0x07
    868a:	99 27       	eor	r25, r25
    868c:	08 95       	ret
    868e:	8f ef       	ldi	r24, 0xFF	; 255
    8690:	9f ef       	ldi	r25, 0xFF	; 255
    8692:	08 95       	ret

00008694 <__ultoa_invert>:
    8694:	fa 01       	movw	r30, r20
    8696:	aa 27       	eor	r26, r26
    8698:	28 30       	cpi	r18, 0x08	; 8
    869a:	51 f1       	breq	.+84     	; 0x86f0 <__ultoa_invert+0x5c>
    869c:	20 31       	cpi	r18, 0x10	; 16
    869e:	81 f1       	breq	.+96     	; 0x8700 <__ultoa_invert+0x6c>
    86a0:	e8 94       	clt
    86a2:	6f 93       	push	r22
    86a4:	6e 7f       	andi	r22, 0xFE	; 254
    86a6:	6e 5f       	subi	r22, 0xFE	; 254
    86a8:	7f 4f       	sbci	r23, 0xFF	; 255
    86aa:	8f 4f       	sbci	r24, 0xFF	; 255
    86ac:	9f 4f       	sbci	r25, 0xFF	; 255
    86ae:	af 4f       	sbci	r26, 0xFF	; 255
    86b0:	b1 e0       	ldi	r27, 0x01	; 1
    86b2:	3e d0       	rcall	.+124    	; 0x8730 <__ultoa_invert+0x9c>
    86b4:	b4 e0       	ldi	r27, 0x04	; 4
    86b6:	3c d0       	rcall	.+120    	; 0x8730 <__ultoa_invert+0x9c>
    86b8:	67 0f       	add	r22, r23
    86ba:	78 1f       	adc	r23, r24
    86bc:	89 1f       	adc	r24, r25
    86be:	9a 1f       	adc	r25, r26
    86c0:	a1 1d       	adc	r26, r1
    86c2:	68 0f       	add	r22, r24
    86c4:	79 1f       	adc	r23, r25
    86c6:	8a 1f       	adc	r24, r26
    86c8:	91 1d       	adc	r25, r1
    86ca:	a1 1d       	adc	r26, r1
    86cc:	6a 0f       	add	r22, r26
    86ce:	71 1d       	adc	r23, r1
    86d0:	81 1d       	adc	r24, r1
    86d2:	91 1d       	adc	r25, r1
    86d4:	a1 1d       	adc	r26, r1
    86d6:	20 d0       	rcall	.+64     	; 0x8718 <__ultoa_invert+0x84>
    86d8:	09 f4       	brne	.+2      	; 0x86dc <__ultoa_invert+0x48>
    86da:	68 94       	set
    86dc:	3f 91       	pop	r19
    86de:	2a e0       	ldi	r18, 0x0A	; 10
    86e0:	26 9f       	mul	r18, r22
    86e2:	11 24       	eor	r1, r1
    86e4:	30 19       	sub	r19, r0
    86e6:	30 5d       	subi	r19, 0xD0	; 208
    86e8:	31 93       	st	Z+, r19
    86ea:	de f6       	brtc	.-74     	; 0x86a2 <__ultoa_invert+0xe>
    86ec:	cf 01       	movw	r24, r30
    86ee:	08 95       	ret
    86f0:	46 2f       	mov	r20, r22
    86f2:	47 70       	andi	r20, 0x07	; 7
    86f4:	40 5d       	subi	r20, 0xD0	; 208
    86f6:	41 93       	st	Z+, r20
    86f8:	b3 e0       	ldi	r27, 0x03	; 3
    86fa:	0f d0       	rcall	.+30     	; 0x871a <__ultoa_invert+0x86>
    86fc:	c9 f7       	brne	.-14     	; 0x86f0 <__ultoa_invert+0x5c>
    86fe:	f6 cf       	rjmp	.-20     	; 0x86ec <__ultoa_invert+0x58>
    8700:	46 2f       	mov	r20, r22
    8702:	4f 70       	andi	r20, 0x0F	; 15
    8704:	40 5d       	subi	r20, 0xD0	; 208
    8706:	4a 33       	cpi	r20, 0x3A	; 58
    8708:	18 f0       	brcs	.+6      	; 0x8710 <__ultoa_invert+0x7c>
    870a:	49 5d       	subi	r20, 0xD9	; 217
    870c:	31 fd       	sbrc	r19, 1
    870e:	40 52       	subi	r20, 0x20	; 32
    8710:	41 93       	st	Z+, r20
    8712:	02 d0       	rcall	.+4      	; 0x8718 <__ultoa_invert+0x84>
    8714:	a9 f7       	brne	.-22     	; 0x8700 <__ultoa_invert+0x6c>
    8716:	ea cf       	rjmp	.-44     	; 0x86ec <__ultoa_invert+0x58>
    8718:	b4 e0       	ldi	r27, 0x04	; 4
    871a:	a6 95       	lsr	r26
    871c:	97 95       	ror	r25
    871e:	87 95       	ror	r24
    8720:	77 95       	ror	r23
    8722:	67 95       	ror	r22
    8724:	ba 95       	dec	r27
    8726:	c9 f7       	brne	.-14     	; 0x871a <__ultoa_invert+0x86>
    8728:	00 97       	sbiw	r24, 0x00	; 0
    872a:	61 05       	cpc	r22, r1
    872c:	71 05       	cpc	r23, r1
    872e:	08 95       	ret
    8730:	9b 01       	movw	r18, r22
    8732:	ac 01       	movw	r20, r24
    8734:	0a 2e       	mov	r0, r26
    8736:	06 94       	lsr	r0
    8738:	57 95       	ror	r21
    873a:	47 95       	ror	r20
    873c:	37 95       	ror	r19
    873e:	27 95       	ror	r18
    8740:	ba 95       	dec	r27
    8742:	c9 f7       	brne	.-14     	; 0x8736 <__ultoa_invert+0xa2>
    8744:	62 0f       	add	r22, r18
    8746:	73 1f       	adc	r23, r19
    8748:	84 1f       	adc	r24, r20
    874a:	95 1f       	adc	r25, r21
    874c:	a0 1d       	adc	r26, r0
    874e:	08 95       	ret

00008750 <__ctype_isfalse>:
    8750:	99 27       	eor	r25, r25
    8752:	88 27       	eor	r24, r24

00008754 <__ctype_istrue>:
    8754:	08 95       	ret

00008756 <_exit>:
    8756:	f8 94       	cli

00008758 <__stop_program>:
    8758:	ff cf       	rjmp	.-2      	; 0x8758 <__stop_program>
